<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OBJ\xbot_main_ctrl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OBJ\xbot_main_ctrl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Thu Oct 23 09:42:22 2014
<BR><P>
<H3>Maximum Stack Usage =        776 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM2_IRQHandler &rArr; XbotApp::runOnTime2() &rArr; XbotApp::updateSendDriverData() &rArr; XbotApp::XbotArmSetXyzCtrlMode() &rArr; XbotApp::runOnXYZLine(signed char, double*, short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[15]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">SysTick_Handler</a><BR>
 <LI><a href="#[29]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[19]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from stm32_irq_fun.o(i.TIM2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from stm32_irq_fun.o(i.TIM3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from stm32_irq_fun.o(i.TIM4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from stm32f4_usartirq.o(i.UART4_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from stm32f4_usartirq.o(i.UART5_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from stm32f4_usartirq.o(i.USART1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from stm32f4_usartirq.o(i.USART2_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from stm32f4_usartirq.o(i.USART3_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">USART6_IRQHandler</a> from stm32f4_usartirq.o(i.USART6_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[6b]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[6d]">XbotApp::setWristPitchSpeed(short)</a> from xbotapp.o(i._ZN7XbotApp18setWristPitchSpeedEs) referenced from xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
 <LI><a href="#[6f]">XbotApp::setBigArmPitchSpeed(short)</a> from xbotapp.o(i._ZN7XbotApp19setBigArmPitchSpeedEs) referenced from xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
 <LI><a href="#[70]">XbotApp::setBigArmRotateSpeed(short)</a> from xbotapp.o(i._ZN7XbotApp20setBigArmRotateSpeedEs) referenced from xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
 <LI><a href="#[6e]">XbotApp::setForearmPitchSpeed(short)</a> from xbotapp.o(i._ZN7XbotApp20setForearmPitchSpeedEs) referenced from xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
 <LI><a href="#[6c]">XbotApp::setPanTiltPitchSpeed(short)</a> from xbotapp.o(i._ZN7XbotApp20setPanTiltPitchSpeedEs) referenced from xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
 <LI><a href="#[74]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[72]">__sti___11_XbotApp_cpp</a> from xbotapp.o(i.__sti___11_XbotApp_cpp) referenced from xbotapp.o(.init_array)
 <LI><a href="#[73]">__sti___15_BaseControl_cpp</a> from basecontrol.o(i.__sti___15_BaseControl_cpp) referenced from basecontrol.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[78]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[177]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[178]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[79]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[179]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[82]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[17a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[17e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[180]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[181]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[182]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[183]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[184]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[185]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[186]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[187]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[188]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[189]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[18d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[18e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[18f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[190]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[191]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[192]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[77]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[193]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[81]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[194]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[83]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; XbotApp::XbotApp() &rArr; SerialPort::SerialPort(int, int) &rArr; STM32_InitUsart6 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[195]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[86]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[196]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[88]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle_1(long long, long long, long long)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle(long long, long long, long long)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle(unsigned char(*)(short), long long, long long, long long)
</UL>

<P><STRONG><a name="[8a]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::threeArmRunToPos(int, int, int, int)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[15b]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[8c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[8f]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[19c]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[92]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[71]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[19d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[19f]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[95]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7d]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[97]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[80]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[94]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[85]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[99]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[96]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[98]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[89]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1a3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[9f]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[9d]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[9e]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a1]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1a6]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[a2]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[a4]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[a9]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaChannelConfig
</UL>

<P><STRONG><a name="[ab]"></a>ADC_CommonInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaCominit
</UL>

<P><STRONG><a name="[a8]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaChannelConfig
</UL>

<P><STRONG><a name="[a7]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaChannelConfig
</UL>

<P><STRONG><a name="[b5]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaStrinit
</UL>

<P><STRONG><a name="[a6]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaChannelConfig
</UL>

<P><STRONG><a name="[110]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::initADC()
</UL>

<P><STRONG><a name="[a5]"></a>Adc1DmaChannelConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32_adc.o(i.Adc1DmaChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adc1DmaChannelConfig &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
</UL>

<P><STRONG><a name="[aa]"></a>Adc1DmaCominit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, stm32_adc.o(i.Adc1DmaCominit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adc1DmaCominit &rArr; ADC_CommonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
</UL>

<P><STRONG><a name="[ac]"></a>Adc1DmaConfig</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, stm32_adc.o(i.Adc1DmaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Adc1DmaConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
</UL>

<P><STRONG><a name="[af]"></a>Adc1DmaGpioConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32_adc.o(i.Adc1DmaGpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adc1DmaGpioConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
</UL>

<P><STRONG><a name="[b1]"></a>Adc1DmaInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32_adc.o(i.Adc1DmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Adc1DmaInit &rArr; Adc1DmaConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaStrinit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaGpioConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaCominit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaChannelConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::initADC()
</UL>

<P><STRONG><a name="[b4]"></a>Adc1DmaStrinit</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, stm32_adc.o(i.Adc1DmaStrinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Adc1DmaStrinit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
</UL>

<P><STRONG><a name="[ae]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaConfig
</UL>

<P><STRONG><a name="[ad]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaConfig
</UL>

<P><STRONG><a name="[166]"></a>FilteAdcVaule</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32_adc.o(i.FilteAdcVaule))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADCValue
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaGpioConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
</UL>

<P><STRONG><a name="[bb]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::checkPowerKey()
</UL>

<P><STRONG><a name="[e2]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::reverseLight()
</UL>

<P><STRONG><a name="[d4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendPowerOnOffCommand()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::setLightStatus(bool)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendPowerOnOffCommand()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::setLightStatus(bool)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_DataRegEmpty
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_DataRegEmpty
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DataRegEmpty
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_DataRegEmpty
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DataRegEmpty
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DataRegEmpty
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::reverseLight()
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setPriority(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
</UL>

<P><STRONG><a name="[168]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemPriorityGroup
</UL>

<P><STRONG><a name="[b2]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::initLighter()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[c1]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[db]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b6]"></a>STM32_GpioInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32f4_gpioinit.o(i.STM32_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = STM32_GpioInit &rArr; STM32_GpioOneInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>STM32_GpioOneInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f4_gpioinit.o(i.STM32_GpioOneInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM32_GpioOneInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::initLighter()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[b8]"></a>STM32_InitUsart1</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, stm32f4_usartinit.o(i.STM32_InitUsart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STM32_InitUsart1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InterruptDriver_Initialize
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
</UL>

<P><STRONG><a name="[c0]"></a>STM32_InitUsart2</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f4_usartinit.o(i.STM32_InitUsart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32_InitUsart2 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InterruptDriver_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
</UL>

<P><STRONG><a name="[c3]"></a>STM32_InitUsart3</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f4_usartinit.o(i.STM32_InitUsart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32_InitUsart3 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InterruptDriver_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
</UL>

<P><STRONG><a name="[c4]"></a>STM32_InitUsart4</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f4_usartinit.o(i.STM32_InitUsart4))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32_InitUsart4 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InterruptDriver_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
</UL>

<P><STRONG><a name="[c5]"></a>STM32_InitUsart5</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f4_usartinit.o(i.STM32_InitUsart5))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32_InitUsart5 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InterruptDriver_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
</UL>

<P><STRONG><a name="[c6]"></a>STM32_InitUsart6</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f4_usartinit.o(i.STM32_InitUsart6))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STM32_InitUsart6 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InterruptDriver_Initialize
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitNVIC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
</UL>

<P><STRONG><a name="[c2]"></a>STM32_Usart_InitConfig</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4_usartinit.o(i.STM32_Usart_InitConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
</UL>

<P><STRONG><a name="[be]"></a>STM32_Usart_InitNVIC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4_usartinit.o(i.STM32_Usart_InitNVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STM32_Usart_InitNVIC &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[148]"></a>SysTick_DelayMs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4_systick.o(i.SysTick_DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::sendSaveCommand()
</UL>

<P><STRONG><a name="[69]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32_irq_fun.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = TIM2_IRQHandler &rArr; XbotApp::runOnTime2() &rArr; XbotApp::updateSendDriverData() &rArr; XbotApp::XbotArmSetXyzCtrlMode() &rArr; XbotApp::runOnXYZLine(signed char, double*, short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(TIM_TypeDef*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop(TIM_TypeDef*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::clearITPendingBit(TIM_TypeDef*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::getITStatus(TIM_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_irq_fun.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIM3_IRQHandler &rArr; XbotApp::runOnTime3() &rArr; XbotApp::sendSaveCommand() &rArr; Timer::setTimeOut(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(TIM_TypeDef*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop(TIM_TypeDef*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::clearITPendingBit(TIM_TypeDef*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::getITStatus(TIM_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_irq_fun.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TIM4_IRQHandler &rArr; XbotApp::runOnTime4() &rArr; GpsImuControl::sendsetLEDColorCommand() &rArr; SerialPort::write(unsigned char*, unsigned char) &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime4()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(TIM_TypeDef*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop(TIM_TypeDef*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::clearITPendingBit(TIM_TypeDef*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::getITStatus(TIM_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setTimeOut(int)
</UL>

<P><STRONG><a name="[119]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::clearITPendingBit(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[11a]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(TIM_TypeDef*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop(TIM_TypeDef*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop()
</UL>

<P><STRONG><a name="[117]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::getITStatus(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[116]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setTimeOut(int)
</UL>

<P><STRONG><a name="[114]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setTimeOut(int)
</UL>

<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4_usartirq.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USART4_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXComplete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_DataRegEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4_usartirq.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; USART5_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXComplete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_DataRegEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>USART1_DataRegEmpty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4_usartdriver.o(i.USART1_DataRegEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4_usartirq.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART1_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXComplete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DataRegEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>USART2_DataRegEmpty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4_usartdriver.o(i.USART2_DataRegEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4_usartirq.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART2_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXComplete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_DataRegEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>USART3_DataRegEmpty</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4_usartdriver.o(i.USART3_DataRegEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4_usartirq.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART3_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXComplete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_DataRegEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>USART4_DataRegEmpty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4_usartdriver.o(i.USART4_DataRegEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART4_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>USART5_DataRegEmpty</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4_usartdriver.o(i.USART5_DataRegEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART5_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>USART6_DataRegEmpty</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4_usartdriver.o(i.USART6_DataRegEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART6_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>USART6_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4_usartirq.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART6_IRQHandler &rArr; USART6_DataRegEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXComplete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_DataRegEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::open()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[d0]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[bd]"></a>USART_Init</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[b9]"></a>USART_InterruptDriver_Initialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4_usartdriver.o(i.USART_InterruptDriver_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[eb]"></a>USART_RXBufferData_Available</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4_usartdriver.o(i.USART_RXBufferData_Available))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readAllow()
</UL>

<P><STRONG><a name="[e9]"></a>USART_RXBuffer_GetByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4_usartdriver.o(i.USART_RXBuffer_GetByte))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::getChar()
</UL>

<P><STRONG><a name="[d2]"></a>USART_RXComplete</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f4_usartdriver.o(i.USART_RXComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_RXComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Usart_InitConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>

<P><STRONG><a name="[dd]"></a>USART_TXBuffer_FreeSpace</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4_usartdriver.o(i.USART_TXBuffer_FreeSpace))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXBuffer_PutByte
</UL>

<P><STRONG><a name="[dc]"></a>USART_TXBuffer_PutByte</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4_usartdriver.o(i.USART_TXBuffer_PutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXBuffer_FreeSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::putChar(unsigned char)
</UL>

<P><STRONG><a name="[de]"></a>LEDLighter::initLighter()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ledlighter.o(i._ZN10LEDLighter11initLighterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LEDLighter::initLighter() &rArr; STM32_GpioOneInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioOneInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::LEDLighter(GPIO_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[df]"></a>LEDLighter::setLightOff()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xbotapp.o(i._ZN10LEDLighter11setLightOffEv))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::setLightStatus(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime4()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[e1]"></a>LEDLighter::reverseLight()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ledlighter.o(i._ZN10LEDLighter12reverseLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDLighter::reverseLight()
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime4()
</UL>

<P><STRONG><a name="[e0]"></a>LEDLighter::setLightStatus(bool)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ledlighter.o(i._ZN10LEDLighter14setLightStatusEb))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::setLightOff()
</UL>

<P><STRONG><a name="[e4]"></a>LEDLighter::LEDLighter(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ledlighter.o(i._ZN10LEDLighterC1EP12GPIO_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LEDLighter::LEDLighter(GPIO_TypeDef*, unsigned) &rArr; LEDLighter::initLighter() &rArr; STM32_GpioOneInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::initLighter()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1a8]"></a>LEDLighter::LEDLighter__sub_object(GPIO_TypeDef*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ledlighter.o(i._ZN10LEDLighterC1EP12GPIO_TypeDefj), UNUSED)

<P><STRONG><a name="[e5]"></a>SerialPort::open()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, serialport.o(i._ZN10SerialPort4openEv))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::openUserInterrupt()
</UL>

<P><STRONG><a name="[e6]"></a>SerialPort::write(unsigned char*, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, serialport.o(i._ZN10SerialPort5writeEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SerialPort::write(unsigned char*, unsigned char) &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::putChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::sendcommand()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsImuControl::sendsetLEDColorCommand()
</UL>

<P><STRONG><a name="[e8]"></a>SerialPort::getChar()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serialport.o(i._ZN10SerialPort7getCharEv))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXBuffer_GetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::controlArmISO()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[ee]"></a>SerialPort::getPort()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serialport.o(i._ZN10SerialPort7getPortEv))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[e7]"></a>SerialPort::putChar(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serialport.o(i._ZN10SerialPort7putCharEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXBuffer_PutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::controlArmISO()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(unsigned char*, unsigned char)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::sendCommand()
</UL>

<P><STRONG><a name="[ea]"></a>SerialPort::readAllow()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serialport.o(i._ZN10SerialPort9readAllowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SerialPort::readAllow()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RXBufferData_Available
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::controlArmISO()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[ec]"></a>SerialPort::SerialPort(int, int)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, serialport.o(i._ZN10SerialPortC1Eii))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SerialPort::SerialPort(int, int) &rArr; STM32_InitUsart6 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart6
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart5
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart4
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart3
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_InitUsart1
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_XbotApp_cpp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1a9]"></a>SerialPort::SerialPort__sub_object(int, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, serialport.o(i._ZN10SerialPortC1Eii), UNUSED)

<P><STRONG><a name="[ed]"></a>BaseControl::reciveData(SerialPort*)</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, basecontrol.o(i._ZN11BaseControl10reciveDataEP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BaseControl::reciveData(SerialPort*) &rArr; SerialPort::readAllow()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::previous()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::setData(unsigned char)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::getData()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::next()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::getPort()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readAllow()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::getChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeArmsData()
</UL>

<P><STRONG><a name="[f3]"></a>BaseControl::sendCommand()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, basecontrol.o(i._ZN11BaseControl11sendCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BaseControl::sendCommand() &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::putChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendGetTemperatureCommand(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendGetEctQuantityCommand(signed char)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::sendSpeedCommand(signed char)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::sendAngleCommand(signed char)
</UL>

<P><STRONG><a name="[145]"></a>BaseControl::setErrorFlag(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, basecontrol.o(i._ZN11BaseControl12setErrorFlagEh))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeArmsData()
</UL>

<P><STRONG><a name="[146]"></a>BaseControl::getReciveData(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xbotapp.o(i._ZN11BaseControl13getReciveDataEh))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeArmsData()
</UL>

<P><STRONG><a name="[151]"></a>BaseControl::setErrorFlag_1(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, basecontrol.o(i._ZN11BaseControl14setErrorFlag_1Eh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::fingerRunToNNNModel()
</UL>

<P><STRONG><a name="[147]"></a>BaseControl::resetNumCounter()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basecontrol.o(i._ZN11BaseControl15resetNumCounterEv))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeArmsData()
</UL>

<P><STRONG><a name="[f4]"></a>BaseControl::BaseControl(SerialPort*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, basecontrol.o(i._ZN11BaseControlC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BaseControl::BaseControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::OtherDeviceControl(SerialPort*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalBobbin::OpticalBobbin(SerialPort*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsImuControl::GpsImuControl(SerialPort*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::PowerControl(SerialPort*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::MotorControl(SerialPort*)
</UL>

<P><STRONG><a name="[1aa]"></a>BaseControl::BaseControl__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, basecontrol.o(i._ZN11BaseControlC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[13b]"></a>MotorControl::setSpeed_1(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motorcontrol.o(i._ZN12MotorControl10setSpeed_1Es))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
</UL>

<P><STRONG><a name="[f6]"></a>MotorControl::sendAngleCommand(signed char)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motorcontrol.o(i._ZN12MotorControl16sendAngleCommandEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MotorControl::sendAngleCommand(signed char) &rArr; BaseControl::sendCommand() &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::sendCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::sendSaveCommand()
</UL>

<P><STRONG><a name="[f7]"></a>MotorControl::sendSpeedCommand(signed char)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, motorcontrol.o(i._ZN12MotorControl16sendSpeedCommandEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MotorControl::sendSpeedCommand(signed char) &rArr; BaseControl::sendCommand() &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::sendCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
</UL>

<P><STRONG><a name="[127]"></a>MotorControl::updateUspeedTime()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motorcontrol.o(i._ZN12MotorControl16updateUspeedTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[f8]"></a>MotorControl::setSpeedFromSubAngle(unsigned char(*)(short), long long, long long, long long)</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, motorcontrol.o(i._ZN12MotorControl20setSpeedFromSubAngleEPFhsExxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotorControl::setSpeedFromSubAngle(unsigned char(*)(short), long long, long long, long long) &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[fa]"></a>MotorControl::setSpeedFromSubAngle(long long, long long, long long)</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, motorcontrol.o(i._ZN12MotorControl20setSpeedFromSubAngleExxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotorControl::setSpeedFromSubAngle(long long, long long, long long) &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[fc]"></a>MotorControl::setSpeedFromSubAngle_1(long long, long long, long long)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, motorcontrol.o(i._ZN12MotorControl22setSpeedFromSubAngle_1Exxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorControl::setSpeedFromSubAngle_1(long long, long long, long long) &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::threeArmRunToPos(int, int, int, int)
</UL>

<P><STRONG><a name="[fb]"></a>MotorControl::setSpeed(short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motorcontrol.o(i._ZN12MotorControl8setSpeedEs))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle(long long, long long, long long)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setFingerMediateSpeed(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setPanTiltPitchSpeed(short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmRotateSpeed(short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::fingerRunToNNNModel()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setWristPitchSpeed(short)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setSupportArmSpeed(short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::suppArmRunToPos(int, bool)
</UL>

<P><STRONG><a name="[fd]"></a>MotorControl::MotorControl(SerialPort*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motorcontrol.o(i._ZN12MotorControlC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MotorControl::MotorControl(SerialPort*) &rArr; BaseControl::BaseControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::BaseControl(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_XbotApp_cpp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1ab]"></a>MotorControl::MotorControl__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motorcontrol.o(i._ZN12MotorControlC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[fe]"></a>PowerControl::checkPowerKey()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, powercontrol.o(i._ZN12PowerControl13checkPowerKeyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerControl::checkPowerKey()
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[100]"></a>PowerControl::sendPowerOnOffCommand()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, powercontrol.o(i._ZN12PowerControl21sendPowerOnOffCommandEv))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime4()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::sendSaveCommand()
</UL>

<P><STRONG><a name="[101]"></a>PowerControl::sendGetEctQuantityCommand(signed char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, powercontrol.o(i._ZN12PowerControl25sendGetEctQuantityCommandEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PowerControl::sendGetEctQuantityCommand(signed char) &rArr; BaseControl::sendCommand() &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::sendCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
</UL>

<P><STRONG><a name="[102]"></a>PowerControl::sendGetTemperatureCommand(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, powercontrol.o(i._ZN12PowerControl25sendGetTemperatureCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PowerControl::sendGetTemperatureCommand(unsigned char) &rArr; BaseControl::sendCommand() &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::sendCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
</UL>

<P><STRONG><a name="[103]"></a>PowerControl::PowerControl(SerialPort*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powercontrol.o(i._ZN12PowerControlC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PowerControl::PowerControl(SerialPort*) &rArr; BaseControl::BaseControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::BaseControl(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1ac]"></a>PowerControl::PowerControl__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, powercontrol.o(i._ZN12PowerControlC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[104]"></a>GpsImuControl::sendsetLEDColorCommand()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gpsimucontrol.o(i._ZN13GpsImuControl22sendsetLEDColorCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GpsImuControl::sendsetLEDColorCommand() &rArr; SerialPort::write(unsigned char*, unsigned char) &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime4()
</UL>

<P><STRONG><a name="[14b]"></a>GpsImuControl::setPowerLEDColorFromVoltage(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gpsimucontrol.o(i._ZN13GpsImuControl27setPowerLEDColorFromVoltageEh))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
</UL>

<P><STRONG><a name="[105]"></a>GpsImuControl::GpsImuControl(SerialPort*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpsimucontrol.o(i._ZN13GpsImuControlC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GpsImuControl::GpsImuControl(SerialPort*) &rArr; BaseControl::BaseControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::BaseControl(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1ad]"></a>GpsImuControl::GpsImuControl__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gpsimucontrol.o(i._ZN13GpsImuControlC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[106]"></a>OpticalBobbin::OpticalBobbin(SerialPort*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, opticalbobbin.o(i._ZN13OpticalBobbinC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OpticalBobbin::OpticalBobbin(SerialPort*) &rArr; BaseControl::BaseControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::BaseControl(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1ae]"></a>OpticalBobbin::OpticalBobbin__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, opticalbobbin.o(i._ZN13OpticalBobbinC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[107]"></a>TerminalControl::reciveData(SerialPort*)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, terminalcontrol.o(i._ZN15TerminalControl10reciveDataEP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TerminalControl::reciveData(SerialPort*) &rArr; SerialPort::readAllow()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::previous()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::setData(unsigned char)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::getData()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::next()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readAllow()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::getChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData()
</UL>

<P><STRONG><a name="[108]"></a>TerminalControl::reciveData()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, terminalcontrol.o(i._ZN15TerminalControl10reciveDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TerminalControl::reciveData() &rArr; TerminalControl::reciveData(SerialPort*) &rArr; SerialPort::readAllow()
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[109]"></a>TerminalControl::sendcommand()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, terminalcontrol.o(i._ZN15TerminalControl11sendcommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TerminalControl::sendcommand() &rArr; SerialPort::write(unsigned char*, unsigned char) &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::write(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[159]"></a>TerminalControl::updateSendBuf(unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, terminalcontrol.o(i._ZN15TerminalControl13updateSendBufEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TerminalControl::updateSendBuf(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendTerminalData()
</UL>

<P><STRONG><a name="[10a]"></a>TerminalControl::TerminalControl(SerialPort*, SerialPort*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, terminalcontrol.o(i._ZN15TerminalControlC1EP10SerialPortS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TerminalControl::TerminalControl(SerialPort*, SerialPort*) &rArr; RingChain::RingChain(int) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::RingChain(int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1af]"></a>TerminalControl::TerminalControl__sub_object(SerialPort*, SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, terminalcontrol.o(i._ZN15TerminalControlC1EP10SerialPortS1_), UNUSED)

<P><STRONG><a name="[10d]"></a>CodedDiscControl::getADCAngle()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, codeddisccontrol.o(i._ZN16CodedDiscControl11getADCAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CodedDiscControl::getADCAngle() &rArr; getADCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposCodedDiscData()
</UL>

<P><STRONG><a name="[10f]"></a>CodedDiscControl::initADC()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, codeddisccontrol.o(i._ZN16CodedDiscControl7initADCEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CodedDiscControl::initADC() &rArr; Adc1DmaInit &rArr; Adc1DmaConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc1DmaInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::openUserInterrupt()
</UL>

<P><STRONG><a name="[111]"></a>CodedDiscControl::CodedDiscControl(SerialPort*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, codeddisccontrol.o(i._ZN16CodedDiscControlC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CodedDiscControl::CodedDiscControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1b0]"></a>CodedDiscControl::CodedDiscControl__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, codeddisccontrol.o(i._ZN16CodedDiscControlC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[157]"></a>OtherDeviceControl::setVideoZoom(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControl12setVideoZoomEh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[153]"></a>OtherDeviceControl::setheadLight(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControl12setheadLightEb))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[154]"></a>OtherDeviceControl::setFloodLight(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControl13setFloodLightEb))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[155]"></a>OtherDeviceControl::setLaserSight(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControl13setLaserSightEb))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[156]"></a>OtherDeviceControl::setVideoSelect(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControl14setVideoSelectEh))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[112]"></a>OtherDeviceControl::OtherDeviceControl(SerialPort*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControlC1EP10SerialPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OtherDeviceControl::OtherDeviceControl(SerialPort*) &rArr; BaseControl::BaseControl(SerialPort*) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::BaseControl(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1b1]"></a>OtherDeviceControl::OtherDeviceControl__sub_object(SerialPort*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, otherdevicecontrol.o(i._ZN18OtherDeviceControlC1EP10SerialPort), UNUSED)

<P><STRONG><a name="[113]"></a>Timer::setTimeOut(int)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, timer.o(i._ZN5Timer10setTimeOutEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer::setTimeOut(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::sendSaveCommand()
</UL>

<P><STRONG><a name="[c9]"></a>Timer::getITStatus(TIM_TypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer11getITStatusEP11TIM_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>Timer::setPriority(unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(i._ZN5Timer11setPriorityEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer::setPriority(unsigned char, unsigned char) &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[ca]"></a>Timer::clearITPendingBit(TIM_TypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer17clearITPendingBitEP11TIM_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>Timer::stop(TIM_TypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer4stopEP11TIM_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>Timer::stop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer4stopEv))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeTerminalData()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::sendSaveCommand()
</UL>

<P><STRONG><a name="[cd]"></a>Timer::start(TIM_TypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer5startEP11TIM_TypeDef))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::resetSave()
</UL>

<P><STRONG><a name="[11c]"></a>Timer::start()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer5startEv))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::openUserInterrupt()
</UL>

<P><STRONG><a name="[11d]"></a>Timer::Timer(TIM_TypeDef*)</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer::Timer(TIM_TypeDef*) &rArr; Timer::setTimeOut(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setPriority(unsigned char, unsigned char)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setTimeOut(int)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
</UL>

<P><STRONG><a name="[1b2]"></a>Timer::Timer__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[cc]"></a>XbotApp::runOnTime2()</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, xbotapp.o(i._ZN7XbotApp10runOnTime2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = XbotApp::runOnTime2() &rArr; XbotApp::updateSendDriverData() &rArr; XbotApp::XbotArmSetXyzCtrlMode() &rArr; XbotApp::runOnXYZLine(signed char, double*, short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::controlArmISO()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::stopAllMoter()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::sendcommand()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::checkPowerKey()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::updateUspeedTime()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::resetSave()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendTerminalData()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeTerminalData()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposCodedDiscData()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeArmsData()
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>XbotApp::runOnTime3()</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp10runOnTime3Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = XbotApp::runOnTime3() &rArr; XbotApp::sendSaveCommand() &rArr; Timer::setTimeOut(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendGetTemperatureCommand(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendGetEctQuantityCommand(signed char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::sendSpeedCommand(signed char)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::suppArmRunToPos(int, bool)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::sendSaveCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>XbotApp::runOnTime4()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, xbotapp.o(i._ZN7XbotApp10runOnTime4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = XbotApp::runOnTime4() &rArr; GpsImuControl::sendsetLEDColorCommand() &rArr; SerialPort::write(unsigned char*, unsigned char) &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::setLightOff()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsImuControl::sendsetLEDColorCommand()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendPowerOnOffCommand()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::reverseLight()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>XbotApp::unlockArms(short)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp10unlockArmsEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XbotApp::unlockArms(short) &rArr; XbotApp::suppArmRunToPos(int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::suppArmRunToPos(int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockForZup()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[14e]"></a>XbotApp::resetReInit()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xbotapp.o(i._ZN7XbotApp11resetReInitEv))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeTerminalData()
</UL>

<P><STRONG><a name="[12b]"></a>XbotApp::runOnXXXLine(short)</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, xbotapp.o(i._ZN7XbotApp12runOnXXXLineEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = XbotApp::runOnXXXLine(short) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmRotateSpeed(short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[133]"></a>XbotApp::runOnXYZLine(signed char, double*, short)</STRONG> (Thumb, 2566 bytes, Stack size 112 bytes, xbotapp.o(i._ZN7XbotApp12runOnXYZLineEaPds))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = XbotApp::runOnXYZLine(signed char, double*, short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed_1(short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmRotateSpeed(short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::threeArmRunToPos(int, int, int, int)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::checkBlockError()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
</UL>

<P><STRONG><a name="[13d]"></a>XbotApp::runOnYYYLine(short)</STRONG> (Thumb, 1136 bytes, Stack size 88 bytes, xbotapp.o(i._ZN7XbotApp12runOnYYYLineEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = XbotApp::runOnYYYLine(short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setWristPitchSpeed(short)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[140]"></a>XbotApp::runOnZZZLine(short)</STRONG> (Thumb, 1372 bytes, Stack size 136 bytes, xbotapp.o(i._ZN7XbotApp12runOnZZZLineEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = XbotApp::runOnZZZLine(short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockForZup()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setWristPitchSpeed(short)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[120]"></a>XbotApp::stopAllMoter()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, xbotapp.o(i._ZN7XbotApp12stopAllMoterEv))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[141]"></a>XbotApp::unlockForZup()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, xbotapp.o(i._ZN7XbotApp12unlockForZupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XbotApp::unlockForZup() &rArr; XbotApp::unlockArms(short) &rArr; XbotApp::suppArmRunToPos(int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockArms(short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::suppArmRunToPos(int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
</UL>

<P><STRONG><a name="[11f]"></a>XbotApp::controlArmISO()</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, xbotapp.o(i._ZN7XbotApp13controlArmISOEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = XbotApp::controlArmISO() &rArr; SerialPort::putChar(unsigned char) &rArr; USART_TXBuffer_PutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::readAllow()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::putChar(unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::getChar()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[14d]"></a>XbotApp::resetOffLimit()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xbotapp.o(i._ZN7XbotApp13resetOffLimitEv))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposeTerminalData()
</UL>

<P><STRONG><a name="[142]"></a>XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)</STRONG> (Thumb, 440 bytes, Stack size 136 bytes, xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int) &rArr; XbotApp::maxTime(int*) &rArr; XbotApp::setBigArmRotateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle(long long, long long, long long)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle(unsigned char(*)(short), long long, long long, long long)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::suppArmRunToPos(int, bool)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::checkBlockError()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::panTiltRunToMMMModel()
</UL>

<P><STRONG><a name="[14a]"></a>XbotApp::subEctQuantity()</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, xbotapp.o(i._ZN7XbotApp14subEctQuantityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XbotApp::subEctQuantity()
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::disposUnderpanData()
</UL>

<P><STRONG><a name="[13c]"></a>XbotApp::checkBlockError()</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, xbotapp.o(i._ZN7XbotApp15checkBlockErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XbotApp::checkBlockError()
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[124]"></a>XbotApp::disposeArmsData()</STRONG> (Thumb, 566 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp15disposeArmsDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XbotApp::disposeArmsData() &rArr; BaseControl::reciveData(SerialPort*) &rArr; SerialPort::readAllow()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::getReciveData(unsigned char)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::resetNumCounter()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::setErrorFlag(unsigned char)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[128]"></a>XbotApp::sendSaveCommand()</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, xbotapp.o(i._ZN7XbotApp15sendSaveCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = XbotApp::sendSaveCommand() &rArr; Timer::setTimeOut(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setTimeOut(int)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::sendPowerOnOffCommand()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::sendAngleCommand(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
</UL>

<P><STRONG><a name="[129]"></a>XbotApp::suppArmRunToPos(int, bool)</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp15suppArmRunToPosEib))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XbotApp::suppArmRunToPos(int, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockForZup()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockArms(short)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime3()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[13a]"></a>XbotApp::threeArmRunToPos(int, int, int, int)</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, xbotapp.o(i._ZN7XbotApp16threeArmRunToPosEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = XbotApp::threeArmRunToPos(int, int, int, int) &rArr; XbotApp::maxTime(int*) &rArr; XbotApp::setBigArmRotateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeedFromSubAngle_1(long long, long long, long long)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
</UL>

<P><STRONG><a name="[149]"></a>XbotApp::openUserInterrupt()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, xbotapp.o(i._ZN7XbotApp17openUserInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = XbotApp::openUserInterrupt() &rArr; CodedDiscControl::initADC() &rArr; Adc1DmaInit &rArr; Adc1DmaConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::initADC()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::open()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>XbotApp::disposUnderpanData()</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp18disposUnderpanDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XbotApp::disposUnderpanData() &rArr; BaseControl::reciveData(SerialPort*) &rArr; SerialPort::readAllow()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::getReciveData(unsigned char)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsImuControl::setPowerLEDColorFromVoltage(unsigned char)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::resetNumCounter()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::setErrorFlag(unsigned char)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::subEctQuantity()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[14c]"></a>XbotApp::setSupportArmSpeed(short)</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, xbotapp.o(i._ZN7XbotApp18setSupportArmSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XbotApp::setSupportArmSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[6d]"></a>XbotApp::setWristPitchSpeed(short)</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp18setWristPitchSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XbotApp::setWristPitchSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
</UL>
<P><STRONG><a name="[126]"></a>XbotApp::disposCodedDiscData()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xbotapp.o(i._ZN7XbotApp19disposCodedDiscDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XbotApp::disposCodedDiscData() &rArr; CodedDiscControl::getADCAngle() &rArr; getADCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::getADCAngle()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[121]"></a>XbotApp::disposeTerminalData()</STRONG> (Thumb, 502 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp19disposeTerminalDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XbotApp::disposeTerminalData()
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::resetReInit()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::stop()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::resetOffLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[14f]"></a>XbotApp::fingerRunToNNNModel()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, xbotapp.o(i._ZN7XbotApp19fingerRunToNNNModelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XbotApp::fingerRunToNNNModel() &rArr; XbotApp::setFingerMediateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::setErrorFlag_1(unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setFingerMediateSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[6f]"></a>XbotApp::setBigArmPitchSpeed(short)</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, xbotapp.o(i._ZN7XbotApp19setBigArmPitchSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XbotApp::setBigArmPitchSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
</UL>
<P><STRONG><a name="[152]"></a>XbotApp::panTiltRunToMMMModel()</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, xbotapp.o(i._ZN7XbotApp20panTiltRunToMMMModelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = XbotApp::panTiltRunToMMMModel() &rArr; XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int) &rArr; XbotApp::maxTime(int*) &rArr; XbotApp::setBigArmRotateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[70]"></a>XbotApp::setBigArmRotateSpeed(short)</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, xbotapp.o(i._ZN7XbotApp20setBigArmRotateSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XbotApp::setBigArmRotateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
</UL>
<P><STRONG><a name="[6e]"></a>XbotApp::setForearmPitchSpeed(short)</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp20setForearmPitchSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XbotApp::setForearmPitchSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
</UL>
<P><STRONG><a name="[6c]"></a>XbotApp::setPanTiltPitchSpeed(short)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp20setPanTiltPitchSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XbotApp::setPanTiltPitchSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::maxTime(int*)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbotapp.o(i._ZN7XbotApp14allArmRunToPosEiiiiiiii)
</UL>
<P><STRONG><a name="[123]"></a>XbotApp::updateSendDriverData()</STRONG> (Thumb, 1802 bytes, Stack size 240 bytes, xbotapp.o(i._ZN7XbotApp20updateSendDriverDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = XbotApp::updateSendDriverData() &rArr; XbotApp::XbotArmSetXyzCtrlMode() &rArr; XbotApp::runOnXYZLine(signed char, double*, short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::stopAllMoter()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockArms(short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::setVideoSelect(unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::setLaserSight(bool)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::setFloodLight(bool)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::setheadLight(bool)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::setVideoZoom(unsigned char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::setErrorFlag_1(unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setFingerMediateSpeed(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setPanTiltPitchSpeed(short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmRotateSpeed(short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::panTiltRunToMMMModel()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::fingerRunToNNNModel()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setWristPitchSpeed(short)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setSupportArmSpeed(short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::suppArmRunToPos(int, bool)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[158]"></a>XbotApp::XbotArmSetXyzCtrlMode()</STRONG> (Thumb, 564 bytes, Stack size 160 bytes, xbotapp.o(i._ZN7XbotApp21XbotArmSetXyzCtrlModeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = XbotApp::XbotArmSetXyzCtrlMode() &rArr; XbotApp::runOnXYZLine(signed char, double*, short) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::unlockForZup()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setWristPitchSpeed(short)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
</UL>

<P><STRONG><a name="[150]"></a>XbotApp::setFingerMediateSpeed(short)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp21setFingerMediateSpeedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XbotApp::setFingerMediateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::setSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::updateSendDriverData()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::fingerRunToNNNModel()
</UL>

<P><STRONG><a name="[122]"></a>XbotApp::updateSendTerminalData()</STRONG> (Thumb, 506 bytes, Stack size 32 bytes, xbotapp.o(i._ZN7XbotApp22updateSendTerminalDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XbotApp::updateSendTerminalData() &rArr; TerminalControl::updateSendBuf(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::updateSendBuf(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[144]"></a>XbotApp::maxTime(int*)</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, xbotapp.o(i._ZN7XbotApp7maxTimeEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XbotApp::maxTime(int*) &rArr; XbotApp::setBigArmRotateSpeed(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setPanTiltPitchSpeed(short)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setForearmPitchSpeed(short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmRotateSpeed(short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setBigArmPitchSpeed(short)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setWristPitchSpeed(short)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::setSupportArmSpeed(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::threeArmRunToPos(int, int, int, int)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::allArmRunToPos(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[11e]"></a>XbotApp::resetSave()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, xbotapp.o(i._ZN7XbotApp9resetSaveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XbotApp::resetSave()
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnTime2()
</UL>

<P><STRONG><a name="[15a]"></a>XbotApp::XbotApp()</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, xbotapp.o(i._ZN7XbotAppC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = XbotApp::XbotApp() &rArr; SerialPort::SerialPort(int, int) &rArr; STM32_InitUsart6 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::setLightOff()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setPriority(unsigned char, unsigned char)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::setTimeOut(int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OtherDeviceControl::OtherDeviceControl(SerialPort*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::CodedDiscControl(SerialPort*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::TerminalControl(SerialPort*, SerialPort*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalBobbin::OpticalBobbin(SerialPort*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsImuControl::GpsImuControl(SerialPort*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerControl::PowerControl(SerialPort*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::MotorControl(SerialPort*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDLighter::LEDLighter(GPIO_TypeDef*, unsigned)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>XbotApp::XbotApp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, xbotapp.o(i._ZN7XbotAppC1Ev), UNUSED)

<P><STRONG><a name="[f0]"></a>RingChain::next()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, datachain.o(i._ZN9RingChain4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[f1]"></a>RingChain::getData()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datachain.o(i._ZN9RingChain7getDataEv))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[ef]"></a>RingChain::setData(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, datachain.o(i._ZN9RingChain7setDataEh))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[f2]"></a>RingChain::previous()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, datachain.o(i._ZN9RingChain8previousEv))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::reciveData(SerialPort*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::reciveData(SerialPort*)
</UL>

<P><STRONG><a name="[10b]"></a>RingChain::RingChain(int)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, datachain.o(i._ZN9RingChainC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RingChain::RingChain(int) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_BaseControl_cpp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::TerminalControl(SerialPort*, SerialPort*)
</UL>

<P><STRONG><a name="[1b4]"></a>RingChain::RingChain__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, datachain.o(i._ZN9RingChainC1Ei), UNUSED)

<P><STRONG><a name="[10c]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::TerminalControl(SerialPort*, SerialPort*)
</UL>

<P><STRONG><a name="[f5]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_XbotApp_cpp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::RingChain(int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseControl::BaseControl(SerialPort*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_BaseControl_cpp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::CodedDiscControl(SerialPort*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalControl::TerminalControl(SerialPort*, SerialPort*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[15e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[138]"></a>__hardfp_acos</STRONG> (Thumb, 738 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
</UL>

<P><STRONG><a name="[137]"></a>__hardfp_atan</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
</UL>

<P><STRONG><a name="[130]"></a>__hardfp_cos</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
</UL>

<P><STRONG><a name="[134]"></a>__hardfp_sin</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
</UL>

<P><STRONG><a name="[135]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
</UL>

<P><STRONG><a name="[161]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 972 bytes, Stack size 168 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[163]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[15c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[162]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[15f]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[160]"></a>fabs</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[10e]"></a>getADCValue</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32_adc.o(i.getADCValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getADCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilteAdcVaule
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodedDiscControl::getADCAngle()
</UL>

<P><STRONG><a name="[84]"></a>main</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; XbotApp::XbotApp() &rArr; SerialPort::SerialPort(int, int) &rArr; STM32_InitUsart6 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSystemPriorityGroup
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotApp()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::openUserInterrupt()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_GpioInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[167]"></a>setSystemPriorityGroup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4_prioritycontrol.o(i.setSystemPriorityGroup))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1b5]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b6]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b7]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b8]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1b9]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[169]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[170]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[16d]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[16e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1ba]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[165]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1bb]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
</UL>

<P><STRONG><a name="[16f]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[173]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::XbotArmSetXyzCtrlMode()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[171]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[16b]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
</UL>

<P><STRONG><a name="[172]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[174]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[164]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnZZZLine(short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnYYYLine(short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXYZLine(signed char, double*, short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XbotApp::runOnXXXLine(short)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[176]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[7b]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1bc]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1bd]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[72]"></a>__sti___11_XbotApp_cpp</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, xbotapp.o(i.__sti___11_XbotApp_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __sti___11_XbotApp_cpp &rArr; SerialPort::SerialPort(int, int) &rArr; STM32_InitUsart6 &rArr; STM32_Usart_InitConfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl::MotorControl(SerialPort*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPort::SerialPort(int, int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbotapp.o(.init_array)
</UL>
<P><STRONG><a name="[73]"></a>__sti___15_BaseControl_cpp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, basecontrol.o(i.__sti___15_BaseControl_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___15_BaseControl_cpp &rArr; RingChain::RingChain(int) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingChain::RingChain(int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basecontrol.o(.init_array)
</UL>
<P><STRONG><a name="[175]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[16a]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[6b]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
