
CbBoxDebug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ca4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00005ca4  00005d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000271  0080205e  0080205e  00005d96  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00005d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b9b  00000000  00000000  00005f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008a3f  00000000  00000000  00006af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014bd  00000000  00000000  0000f530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003a6b  00000000  00000000  000109ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000910  00000000  00000000  00014458  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000036a9  00000000  00000000  00014d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_25>
      68:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_26>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      70:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_28>
      74:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_29>
      78:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      7c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      80:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      84:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      88:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      8c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      90:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      94:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      98:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      9c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      a8:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_42>
      ac:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      b0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      b4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      b8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      bc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      c0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      c4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      c8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      cc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      d8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      dc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      e8:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__vector_58>
      ec:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__vector_59>
      f0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      f4:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_61>
      f8:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_62>
      fc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     100:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     104:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     108:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     10c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     110:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     114:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     118:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     11c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     120:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     124:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     128:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_74>
     12c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     130:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     134:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_77>
     138:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     13c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     140:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     144:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     148:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     14c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_83>
     150:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     154:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     158:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     15c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     160:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_88>
     164:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_89>
     168:	0c 94 14 0b 	jmp	0x1628	; 0x1628 <__vector_90>
     16c:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_91>
     170:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__vector_92>
     174:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     178:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     17c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     180:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     184:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     188:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     18c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     190:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     194:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     198:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     19c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1a0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1a4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1a8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1ac:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1b0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1b4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1b8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1bc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1c0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1c4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1c8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1cc:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1d0:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1d4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1d8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
     1dc:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_119>
     1e0:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_120>
     1e4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e2       	ldi	r29, 0x2F	; 47
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	10 e2       	ldi	r17, 0x20	; 32
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	e4 ea       	ldi	r30, 0xA4	; 164
     1fc:	fc e5       	ldi	r31, 0x5C	; 92
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0b bf       	out	0x3b, r16	; 59
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
     204:	07 90       	elpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ae 35       	cpi	r26, 0x5E	; 94
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
     20e:	12 e2       	ldi	r17, 0x22	; 34
     210:	ae e5       	ldi	r26, 0x5E	; 94
     212:	b0 e2       	ldi	r27, 0x20	; 32
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	af 3c       	cpi	r26, 0xCF	; 207
     21a:	b1 07       	cpc	r27, r17
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 ac 03 	call	0x758	; 0x758 <main>
     222:	0c 94 50 2e 	jmp	0x5ca0	; 0x5ca0 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <InitAdcA>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitAdcA(void)
{
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
	/* Move stored calibration values to ADC A. */
	ADC_CalibrationValues_Load(&ADCA);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCA, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b2 e0       	ldi	r27, 0x02	; 2
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	81 81       	ldd	r24, Z+1	; 0x01
     244:	89 7e       	andi	r24, 0xE9	; 233
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	8c 93       	st	X, r24

	/* Set sample rate */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV512_gc);
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b2 e0       	ldi	r27, 0x02	; 2
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	84 81       	ldd	r24, Z+4	; 0x04
     254:	87 60       	ori	r24, 0x07	; 7
     256:	14 96       	adiw	r26, 0x04	; 4
     258:	8c 93       	st	X, r24

	/* Set referance voltage on ADC A to be VCC/1.6 V.*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_VCC_gc);
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	e0 e0       	ldi	r30, 0x00	; 0
     260:	f2 e0       	ldi	r31, 0x02	; 2
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	8f 7c       	andi	r24, 0xCF	; 207
     266:	80 61       	ori	r24, 0x10	; 16
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	8c 93       	st	X, r24

   	/* Get offset value for ADC A. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     26c:	a0 e2       	ldi	r26, 0x20	; 32
     26e:	b2 e0       	ldi	r27, 0x02	; 2
     270:	e0 e2       	ldi	r30, 0x20	; 32
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	80 81       	ld	r24, Z
     276:	80 7e       	andi	r24, 0xE0	; 224
     278:	82 60       	ori	r24, 0x02	; 2
     27a:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_DIFF_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

   	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     27c:	e0 e2       	ldi	r30, 0x20	; 32
     27e:	f2 e0       	ldi	r31, 0x02	; 2
     280:	89 e0       	ldi	r24, 0x09	; 9
     282:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCA);
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b2 e0       	ldi	r27, 0x02	; 2
     288:	e0 e0       	ldi	r30, 0x00	; 0
     28a:	f2 e0       	ldi	r31, 0x02	; 2
     28c:	80 81       	ld	r24, Z
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	8c 93       	st	X, r24
	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	92 e0       	ldi	r25, 0x02	; 2
     296:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <ADC_Wait_32MHz>
	adc_a_control.offset = ADC_Offset_Get_Signed(&ADCA, &ADCA.CH0, false);
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	60 e2       	ldi	r22, 0x20	; 32
     2a0:	72 e0       	ldi	r23, 0x02	; 2
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <ADC_Offset_Get_Signed>
     2a8:	80 93 08 20 	sts	0x2008, r24
    ADC_Disable(&ADCA);
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
     2ae:	b2 e0       	ldi	r27, 0x02	; 2
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	80 81       	ld	r24, Z
     2b6:	8e 7f       	andi	r24, 0xFE	; 254
     2b8:	8c 93       	st	X, r24

	/* Setup channel 0, 1, 2 and 3 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     2ba:	a0 e2       	ldi	r26, 0x20	; 32
     2bc:	b2 e0       	ldi	r27, 0x02	; 2
     2be:	e0 e2       	ldi	r30, 0x20	; 32
     2c0:	f2 e0       	ldi	r31, 0x02	; 2
     2c2:	80 81       	ld	r24, Z
     2c4:	80 7e       	andi	r24, 0xE0	; 224
     2c6:	81 60       	ori	r24, 0x01	; 1
     2c8:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     2ca:	a8 e2       	ldi	r26, 0x28	; 40
     2cc:	b2 e0       	ldi	r27, 0x02	; 2
     2ce:	e8 e2       	ldi	r30, 0x28	; 40
     2d0:	f2 e0       	ldi	r31, 0x02	; 2
     2d2:	80 81       	ld	r24, Z
     2d4:	80 7e       	andi	r24, 0xE0	; 224
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH2,
     2da:	a0 e3       	ldi	r26, 0x30	; 48
     2dc:	b2 e0       	ldi	r27, 0x02	; 2
     2de:	e0 e3       	ldi	r30, 0x30	; 48
     2e0:	f2 e0       	ldi	r31, 0x02	; 2
     2e2:	80 81       	ld	r24, Z
     2e4:	80 7e       	andi	r24, 0xE0	; 224
     2e6:	81 60       	ori	r24, 0x01	; 1
     2e8:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH3,
     2ea:	a8 e3       	ldi	r26, 0x38	; 56
     2ec:	b2 e0       	ldi	r27, 0x02	; 2
     2ee:	e8 e3       	ldi	r30, 0x38	; 56
     2f0:	f2 e0       	ldi	r31, 0x02	; 2
     2f2:	80 81       	ld	r24, Z
     2f4:	80 7e       	andi	r24, 0xE0	; 224
     2f6:	81 60       	ori	r24, 0x01	; 1
     2f8:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH0,
     2fa:	a0 e2       	ldi	r26, 0x20	; 32
     2fc:	b2 e0       	ldi	r27, 0x02	; 2
     2fe:	e0 e2       	ldi	r30, 0x20	; 32
     300:	f2 e0       	ldi	r31, 0x02	; 2
     302:	80 81       	ld	r24, Z
     304:	80 7e       	andi	r24, 0xE0	; 224
     306:	81 60       	ori	r24, 0x01	; 1
     308:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	/* Set input to the channels in ADC A to be PIN 4, 5, 6 and 7. */
	ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     30a:	e0 e2       	ldi	r30, 0x20	; 32
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	11 82       	std	Z+1, r1	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, 0);
     310:	e8 e2       	ldi	r30, 0x28	; 40
     312:	f2 e0       	ldi	r31, 0x02	; 2
     314:	88 e0       	ldi	r24, 0x08	; 8
     316:	81 83       	std	Z+1, r24	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH2, ADC_CH_MUXPOS_PIN2_gc, 0);
     318:	e0 e3       	ldi	r30, 0x30	; 48
     31a:	f2 e0       	ldi	r31, 0x02	; 2
     31c:	80 e1       	ldi	r24, 0x10	; 16
     31e:	81 83       	std	Z+1, r24	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH3, ADC_CH_MUXPOS_PIN3_gc, 0);
     320:	e8 e3       	ldi	r30, 0x38	; 56
     322:	f2 e0       	ldi	r31, 0x02	; 2
     324:	88 e1       	ldi	r24, 0x18	; 24
     326:	81 83       	std	Z+1, r24	; 0x01

	/* Setup sweep of all four virtual channels.*/
	ADC_SweepChannels_Config(&ADCA, ADC_SWEEP_0123_gc);
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b2 e0       	ldi	r27, 0x02	; 2
     32c:	e0 e0       	ldi	r30, 0x00	; 0
     32e:	f2 e0       	ldi	r31, 0x02	; 2
     330:	83 81       	ldd	r24, Z+3	; 0x03
     332:	80 6c       	ori	r24, 0xC0	; 192
     334:	13 96       	adiw	r26, 0x03	; 3
     336:	8c 93       	st	X, r24

	/* Enable low level interrupts on ADCA channel 3, on conversion complete. */
	ADC_Ch_Interrupts_Config(&ADCA.CH3, ADC_CH_INTMODE_COMPLETE_gc, ADC_CH_INTLVL_MED_gc);
     338:	a8 e3       	ldi	r26, 0x38	; 56
     33a:	b2 e0       	ldi	r27, 0x02	; 2
     33c:	e8 e3       	ldi	r30, 0x38	; 56
     33e:	f2 e0       	ldi	r31, 0x02	; 2
     340:	82 81       	ldd	r24, Z+2	; 0x02
     342:	80 7f       	andi	r24, 0xF0	; 240
     344:	82 60       	ori	r24, 0x02	; 2
     346:	12 96       	adiw	r26, 0x02	; 2
     348:	8c 93       	st	X, r24
     34a:	12 97       	sbiw	r26, 0x02	; 2
//	/* Enable PMIC interrupt level low. */
//	PMIC.CTRL |= PMIC_LOLVLEX_bm;
//
//	/* Enable global interrupts. */
//	sei();
}
     34c:	cf 91       	pop	r28
     34e:	df 91       	pop	r29
     350:	08 95       	ret

00000352 <InitAdcB>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitAdcB(void)
{
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	/* Move stored calibration values to ADC B. */
	ADC_CalibrationValues_Load(&ADCB);
     35a:	80 e4       	ldi	r24, 0x40	; 64
     35c:	92 e0       	ldi	r25, 0x02	; 2
     35e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ADC_CalibrationValues_Load>

	/* Set up ADC A to have signed conversion mode and 12 bit resolution. */
  	ADC_ConvMode_and_Resolution_Config(&ADCB, ADC_ConvMode_Unsigned, ADC_RESOLUTION_12BIT_gc);
     362:	a0 e4       	ldi	r26, 0x40	; 64
     364:	b2 e0       	ldi	r27, 0x02	; 2
     366:	e0 e4       	ldi	r30, 0x40	; 64
     368:	f2 e0       	ldi	r31, 0x02	; 2
     36a:	81 81       	ldd	r24, Z+1	; 0x01
     36c:	89 7e       	andi	r24, 0xE9	; 233
     36e:	11 96       	adiw	r26, 0x01	; 1
     370:	8c 93       	st	X, r24

	/* Set sample rate */
	ADC_Prescaler_Config(&ADCB, ADC_PRESCALER_DIV512_gc);
     372:	a0 e4       	ldi	r26, 0x40	; 64
     374:	b2 e0       	ldi	r27, 0x02	; 2
     376:	e0 e4       	ldi	r30, 0x40	; 64
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	87 60       	ori	r24, 0x07	; 7
     37e:	14 96       	adiw	r26, 0x04	; 4
     380:	8c 93       	st	X, r24

	/* Set referance voltage on ADC A to be VCC/1.6 V.*/
	ADC_Reference_Config(&ADCB, ADC_REFSEL_VCC_gc);	//ADC_REFSEL_INT1V_gc
     382:	a0 e4       	ldi	r26, 0x40	; 64
     384:	b2 e0       	ldi	r27, 0x02	; 2
     386:	e0 e4       	ldi	r30, 0x40	; 64
     388:	f2 e0       	ldi	r31, 0x02	; 2
     38a:	82 81       	ldd	r24, Z+2	; 0x02
     38c:	8f 7c       	andi	r24, 0xCF	; 207
     38e:	80 61       	ori	r24, 0x10	; 16
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	8c 93       	st	X, r24

   	/* Get offset value for ADC A. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
     394:	a0 e6       	ldi	r26, 0x60	; 96
     396:	b2 e0       	ldi	r27, 0x02	; 2
     398:	e0 e6       	ldi	r30, 0x60	; 96
     39a:	f2 e0       	ldi	r31, 0x02	; 2
     39c:	80 81       	ld	r24, Z
     39e:	80 7e       	andi	r24, 0xE0	; 224
     3a0:	82 60       	ori	r24, 0x02	; 2
     3a2:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_DIFF_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

   	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_PIN1_gc);
     3a4:	e0 e6       	ldi	r30, 0x60	; 96
     3a6:	f2 e0       	ldi	r31, 0x02	; 2
     3a8:	89 e0       	ldi	r24, 0x09	; 9
     3aa:	81 83       	std	Z+1, r24	; 0x01

	ADC_Enable(&ADCB);
     3ac:	a0 e4       	ldi	r26, 0x40	; 64
     3ae:	b2 e0       	ldi	r27, 0x02	; 2
     3b0:	e0 e4       	ldi	r30, 0x40	; 64
     3b2:	f2 e0       	ldi	r31, 0x02	; 2
     3b4:	80 81       	ld	r24, Z
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	8c 93       	st	X, r24
	/* Wait until common mode voltage is stable. Default clk is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCB);
     3ba:	80 e4       	ldi	r24, 0x40	; 64
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <ADC_Wait_32MHz>
	adc_a_control.offset_b = ADC_Offset_Get_Signed(&ADCB, &ADCB.CH0, false);
     3c2:	80 e4       	ldi	r24, 0x40	; 64
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	60 e6       	ldi	r22, 0x60	; 96
     3c8:	72 e0       	ldi	r23, 0x02	; 2
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <ADC_Offset_Get_Signed>
     3d0:	80 93 09 20 	sts	0x2009, r24
    ADC_Disable(&ADCB);
     3d4:	a0 e4       	ldi	r26, 0x40	; 64
     3d6:	b2 e0       	ldi	r27, 0x02	; 2
     3d8:	e0 e4       	ldi	r30, 0x40	; 64
     3da:	f2 e0       	ldi	r31, 0x02	; 2
     3dc:	80 81       	ld	r24, Z
     3de:	8e 7f       	andi	r24, 0xFE	; 254
     3e0:	8c 93       	st	X, r24

	/* Setup channel 0, 1, 2 and 3 to have single ended input. */
	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
     3e2:	a0 e6       	ldi	r26, 0x60	; 96
     3e4:	b2 e0       	ldi	r27, 0x02	; 2
     3e6:	e0 e6       	ldi	r30, 0x60	; 96
     3e8:	f2 e0       	ldi	r31, 0x02	; 2
     3ea:	80 81       	ld	r24, Z
     3ec:	80 7e       	andi	r24, 0xE0	; 224
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH1,
     3f2:	a8 e6       	ldi	r26, 0x68	; 104
     3f4:	b2 e0       	ldi	r27, 0x02	; 2
     3f6:	e8 e6       	ldi	r30, 0x68	; 104
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	80 81       	ld	r24, Z
     3fc:	80 7e       	andi	r24, 0xE0	; 224
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH2,
     402:	a0 e7       	ldi	r26, 0x70	; 112
     404:	b2 e0       	ldi	r27, 0x02	; 2
     406:	e0 e7       	ldi	r30, 0x70	; 112
     408:	f2 e0       	ldi	r31, 0x02	; 2
     40a:	80 81       	ld	r24, Z
     40c:	80 7e       	andi	r24, 0xE0	; 224
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH3,
     412:	a8 e7       	ldi	r26, 0x78	; 120
     414:	b2 e0       	ldi	r27, 0x02	; 2
     416:	e8 e7       	ldi	r30, 0x78	; 120
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	80 81       	ld	r24, Z
     41c:	80 7e       	andi	r24, 0xE0	; 224
     41e:	81 60       	ori	r24, 0x01	; 1
     420:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	ADC_Ch_InputMode_and_Gain_Config(&ADCB.CH0,
     422:	a0 e6       	ldi	r26, 0x60	; 96
     424:	b2 e0       	ldi	r27, 0x02	; 2
     426:	e0 e6       	ldi	r30, 0x60	; 96
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	80 81       	ld	r24, Z
     42c:	80 7e       	andi	r24, 0xE0	; 224
     42e:	81 60       	ori	r24, 0x01	; 1
     430:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	/* Set input to the channels in ADC A to be PIN 4, 5, 6 and 7. */
	ADC_Ch_InputMux_Config(&ADCB.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     432:	e0 e6       	ldi	r30, 0x60	; 96
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	11 82       	std	Z+1, r1	; 0x01
	ADC_Ch_InputMux_Config(&ADCB.CH1, ADC_CH_MUXPOS_PIN1_gc, 0);
     438:	e8 e6       	ldi	r30, 0x68	; 104
     43a:	f2 e0       	ldi	r31, 0x02	; 2
     43c:	88 e0       	ldi	r24, 0x08	; 8
     43e:	81 83       	std	Z+1, r24	; 0x01
	ADC_Ch_InputMux_Config(&ADCB.CH2, ADC_CH_MUXPOS_PIN2_gc, 0);
     440:	e0 e7       	ldi	r30, 0x70	; 112
     442:	f2 e0       	ldi	r31, 0x02	; 2
     444:	80 e1       	ldi	r24, 0x10	; 16
     446:	81 83       	std	Z+1, r24	; 0x01
	ADC_Ch_InputMux_Config(&ADCB.CH3, ADC_CH_MUXPOS_PIN3_gc, 0);
     448:	e8 e7       	ldi	r30, 0x78	; 120
     44a:	f2 e0       	ldi	r31, 0x02	; 2
     44c:	88 e1       	ldi	r24, 0x18	; 24
     44e:	81 83       	std	Z+1, r24	; 0x01

	/* Setup sweep of all four virtual channels.*/
	ADC_SweepChannels_Config(&ADCB, ADC_SWEEP_0123_gc);
     450:	a0 e4       	ldi	r26, 0x40	; 64
     452:	b2 e0       	ldi	r27, 0x02	; 2
     454:	e0 e4       	ldi	r30, 0x40	; 64
     456:	f2 e0       	ldi	r31, 0x02	; 2
     458:	83 81       	ldd	r24, Z+3	; 0x03
     45a:	80 6c       	ori	r24, 0xC0	; 192
     45c:	13 96       	adiw	r26, 0x03	; 3
     45e:	8c 93       	st	X, r24

	/* Enable low level interrupts on ADCA channel 3, on conversion complete. */
	ADC_Ch_Interrupts_Config(&ADCB.CH3, ADC_CH_INTMODE_COMPLETE_gc, ADC_CH_INTLVL_MED_gc);
     460:	a8 e7       	ldi	r26, 0x78	; 120
     462:	b2 e0       	ldi	r27, 0x02	; 2
     464:	e8 e7       	ldi	r30, 0x78	; 120
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	82 81       	ldd	r24, Z+2	; 0x02
     46a:	80 7f       	andi	r24, 0xF0	; 240
     46c:	82 60       	ori	r24, 0x02	; 2
     46e:	12 96       	adiw	r26, 0x02	; 2
     470:	8c 93       	st	X, r24
     472:	12 97       	sbiw	r26, 0x02	; 2
//	/* Enable PMIC interrupt level low. */
//	PMIC.CTRL |= PMIC_LOLVLEX_bm;
//
//	/* Enable global interrupts. */
//	sei();
}
     474:	cf 91       	pop	r28
     476:	df 91       	pop	r29
     478:	08 95       	ret

0000047a <StartAdc>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
static void StartAdc(void)
{
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	/* Enable ADC A with free running mode, VCC reference and signed conversion.*/
	ADC_Enable(&ADCA);
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b2 e0       	ldi	r27, 0x02	; 2
     486:	e0 e0       	ldi	r30, 0x00	; 0
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	80 81       	ld	r24, Z
     48c:	81 60       	ori	r24, 0x01	; 1
     48e:	8c 93       	st	X, r24

	/* Wait until common mode voltage is stable. Default clock is 2MHz and
	 * therefore below the maximum frequency to use this function. */
	ADC_Wait_32MHz(&ADCA);
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <ADC_Wait_32MHz>

	/* Enable free running mode. */
	ADC_FreeRunning_Enable(&ADCA);
     498:	a0 e0       	ldi	r26, 0x00	; 0
     49a:	b2 e0       	ldi	r27, 0x02	; 2
     49c:	e0 e0       	ldi	r30, 0x00	; 0
     49e:	f2 e0       	ldi	r31, 0x02	; 2
     4a0:	81 81       	ldd	r24, Z+1	; 0x01
     4a2:	88 60       	ori	r24, 0x08	; 8
     4a4:	11 96       	adiw	r26, 0x01	; 1
     4a6:	8c 93       	st	X, r24
     4a8:	11 97       	sbiw	r26, 0x01	; 1
}
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <__vector_74>:
 *  channels is started. If not the interrupt on ADC A channel 3 is disabled.
 *
 */

ISR(ADCA_CH3_vect)
{
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	00 90 3b 00 	lds	r0, 0x003B
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	ef 93       	push	r30
     4d6:	ff 93       	push	r31
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	//PORTD.OUTTGL  = PIN5_bm;

	ADC_FreeRunning_Disable(&ADCA);
     4e0:	a0 e0       	ldi	r26, 0x00	; 0
     4e2:	b2 e0       	ldi	r27, 0x02	; 2
     4e4:	e0 e0       	ldi	r30, 0x00	; 0
     4e6:	f2 e0       	ldi	r31, 0x02	; 2
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	87 7f       	andi	r24, 0xF7	; 247
     4ec:	11 96       	adiw	r26, 0x01	; 1
     4ee:	8c 93       	st	X, r24

	ADC_Disable(&ADCA);
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b2 e0       	ldi	r27, 0x02	; 2
     4f4:	e0 e0       	ldi	r30, 0x00	; 0
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	80 81       	ld	r24, Z
     4fa:	8e 7f       	andi	r24, 0xFE	; 254
     4fc:	8c 93       	st	X, r24

	/*  Read samples and clear interrupt flags. */
	if (0 == adc_a_control.group)
     4fe:	80 91 0a 20 	lds	r24, 0x200A
     502:	88 23       	and	r24, r24
     504:	09 f0       	breq	.+2      	; 0x508 <__vector_74+0x58>
     506:	54 c0       	rjmp	.+168    	; 0x5b0 <__vector_74+0x100>
	{
		adc_a_control.ad0 = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, adc_a_control.offset);
     508:	20 91 08 20 	lds	r18, 0x2008
     50c:	80 e2       	ldi	r24, 0x20	; 32
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	62 2f       	mov	r22, r18
     512:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     516:	80 93 0b 20 	sts	0x200B, r24
     51a:	90 93 0c 20 	sts	0x200C, r25
		adc_a_control.ad1 = ADC_ResultCh_GetWord_Signed(&ADCA.CH1, adc_a_control.offset);
     51e:	20 91 08 20 	lds	r18, 0x2008
     522:	88 e2       	ldi	r24, 0x28	; 40
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	62 2f       	mov	r22, r18
     528:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     52c:	80 93 0d 20 	sts	0x200D, r24
     530:	90 93 0e 20 	sts	0x200E, r25
		adc_a_control.ad2 = ADC_ResultCh_GetWord_Signed(&ADCA.CH2, adc_a_control.offset);
     534:	20 91 08 20 	lds	r18, 0x2008
     538:	80 e3       	ldi	r24, 0x30	; 48
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	62 2f       	mov	r22, r18
     53e:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     542:	80 93 0f 20 	sts	0x200F, r24
     546:	90 93 10 20 	sts	0x2010, r25
		adc_a_control.ad3 = ADC_ResultCh_GetWord_Signed(&ADCA.CH3, adc_a_control.offset);
     54a:	20 91 08 20 	lds	r18, 0x2008
     54e:	88 e3       	ldi	r24, 0x38	; 56
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	62 2f       	mov	r22, r18
     554:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     558:	80 93 11 20 	sts	0x2011, r24
     55c:	90 93 12 20 	sts	0x2012, r25

		/* Set input to the channels in ADC A to be PIN 4, 5, 6 and 7. */
		ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN4_gc, 0);
     560:	e0 e2       	ldi	r30, 0x20	; 32
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	80 e2       	ldi	r24, 0x20	; 32
     566:	81 83       	std	Z+1, r24	; 0x01
		ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN5_gc, 0);
     568:	e8 e2       	ldi	r30, 0x28	; 40
     56a:	f2 e0       	ldi	r31, 0x02	; 2
     56c:	88 e2       	ldi	r24, 0x28	; 40
     56e:	81 83       	std	Z+1, r24	; 0x01
		ADC_Ch_InputMux_Config(&ADCA.CH2, ADC_CH_MUXPOS_PIN6_gc, 0);
     570:	e0 e3       	ldi	r30, 0x30	; 48
     572:	f2 e0       	ldi	r31, 0x02	; 2
     574:	80 e3       	ldi	r24, 0x30	; 48
     576:	81 83       	std	Z+1, r24	; 0x01
		ADC_Ch_InputMux_Config(&ADCA.CH3, ADC_CH_MUXPOS_PIN7_gc, 0);
     578:	e8 e3       	ldi	r30, 0x38	; 56
     57a:	f2 e0       	ldi	r31, 0x02	; 2
     57c:	88 e3       	ldi	r24, 0x38	; 56
     57e:	81 83       	std	Z+1, r24	; 0x01

		adc_a_control.group = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 0a 20 	sts	0x200A, r24

		ADC_Enable(&ADCA);
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b2 e0       	ldi	r27, 0x02	; 2
     58a:	e0 e0       	ldi	r30, 0x00	; 0
     58c:	f2 e0       	ldi	r31, 0x02	; 2
     58e:	80 81       	ld	r24, Z
     590:	81 60       	ori	r24, 0x01	; 1
     592:	8c 93       	st	X, r24

		ADC_Wait_32MHz(&ADCA);
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <ADC_Wait_32MHz>

		ADC_FreeRunning_Enable(&ADCA);
     59c:	a0 e0       	ldi	r26, 0x00	; 0
     59e:	b2 e0       	ldi	r27, 0x02	; 2
     5a0:	e0 e0       	ldi	r30, 0x00	; 0
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	81 81       	ldd	r24, Z+1	; 0x01
     5a6:	88 60       	ori	r24, 0x08	; 8
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	8c 93       	st	X, r24
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	55 c0       	rjmp	.+170    	; 0x65a <__vector_74+0x1aa>
	}
	else if(1 == adc_a_control.group)
     5b0:	80 91 0a 20 	lds	r24, 0x200A
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_74+0x10a>
     5b8:	50 c0       	rjmp	.+160    	; 0x65a <__vector_74+0x1aa>
	{
		adc_a_control.ad4 = ADC_ResultCh_GetWord_Signed(&ADCA.CH0, adc_a_control.offset);
     5ba:	20 91 08 20 	lds	r18, 0x2008
     5be:	80 e2       	ldi	r24, 0x20	; 32
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	62 2f       	mov	r22, r18
     5c4:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     5c8:	80 93 13 20 	sts	0x2013, r24
     5cc:	90 93 14 20 	sts	0x2014, r25
		adc_a_control.ad5 = ADC_ResultCh_GetWord_Signed(&ADCA.CH1, adc_a_control.offset);
     5d0:	20 91 08 20 	lds	r18, 0x2008
     5d4:	88 e2       	ldi	r24, 0x28	; 40
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	62 2f       	mov	r22, r18
     5da:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     5de:	80 93 15 20 	sts	0x2015, r24
     5e2:	90 93 16 20 	sts	0x2016, r25
		adc_a_control.ad6 = ADC_ResultCh_GetWord_Signed(&ADCA.CH2, adc_a_control.offset);
     5e6:	20 91 08 20 	lds	r18, 0x2008
     5ea:	80 e3       	ldi	r24, 0x30	; 48
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	62 2f       	mov	r22, r18
     5f0:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     5f4:	80 93 17 20 	sts	0x2017, r24
     5f8:	90 93 18 20 	sts	0x2018, r25
		adc_a_control.ad7 = ADC_ResultCh_GetWord_Signed(&ADCA.CH3, adc_a_control.offset);
     5fc:	20 91 08 20 	lds	r18, 0x2008
     600:	88 e3       	ldi	r24, 0x38	; 56
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	62 2f       	mov	r22, r18
     606:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     60a:	80 93 19 20 	sts	0x2019, r24
     60e:	90 93 1a 20 	sts	0x201A, r25

		/* Set input to the channels in ADC A to be PIN 4, 5, 6 and 7. */
		ADC_Ch_InputMux_Config(&ADCA.CH0, ADC_CH_MUXPOS_PIN0_gc, 0);
     612:	e0 e2       	ldi	r30, 0x20	; 32
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	11 82       	std	Z+1, r1	; 0x01
		ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXPOS_PIN1_gc, 0);
     618:	e8 e2       	ldi	r30, 0x28	; 40
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	88 e0       	ldi	r24, 0x08	; 8
     61e:	81 83       	std	Z+1, r24	; 0x01
		ADC_Ch_InputMux_Config(&ADCA.CH2, ADC_CH_MUXPOS_PIN2_gc, 0);
     620:	e0 e3       	ldi	r30, 0x30	; 48
     622:	f2 e0       	ldi	r31, 0x02	; 2
     624:	80 e1       	ldi	r24, 0x10	; 16
     626:	81 83       	std	Z+1, r24	; 0x01
		ADC_Ch_InputMux_Config(&ADCA.CH3, ADC_CH_MUXPOS_PIN3_gc, 0);
     628:	e8 e3       	ldi	r30, 0x38	; 56
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	88 e1       	ldi	r24, 0x18	; 24
     62e:	81 83       	std	Z+1, r24	; 0x01

		adc_a_control.group = 0;
     630:	10 92 0a 20 	sts	0x200A, r1

		/* Enable ADC A with free running mode, VCC reference and signed conversion.*/
		ADC_Enable(&ADCB);
     634:	a0 e4       	ldi	r26, 0x40	; 64
     636:	b2 e0       	ldi	r27, 0x02	; 2
     638:	e0 e4       	ldi	r30, 0x40	; 64
     63a:	f2 e0       	ldi	r31, 0x02	; 2
     63c:	80 81       	ld	r24, Z
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	8c 93       	st	X, r24

		/* Wait until common mode voltage is stable. Default clock is 2MHz and
		 * therefore below the maximum frequency to use this function. */
		ADC_Wait_32MHz(&ADCB);
     642:	80 e4       	ldi	r24, 0x40	; 64
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <ADC_Wait_32MHz>

		/* Enable free running mode. */
		ADC_FreeRunning_Enable(&ADCB);
     64a:	a0 e4       	ldi	r26, 0x40	; 64
     64c:	b2 e0       	ldi	r27, 0x02	; 2
     64e:	e0 e4       	ldi	r30, 0x40	; 64
     650:	f2 e0       	ldi	r31, 0x02	; 2
     652:	81 81       	ldd	r24, Z+1	; 0x01
     654:	88 60       	ori	r24, 0x08	; 8
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	8c 93       	st	X, r24
	}
}
     65a:	cf 91       	pop	r28
     65c:	df 91       	pop	r29
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	00 92 3b 00 	sts	0x003B, r0
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_42>:


ISR(ADCB_CH3_vect)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	00 90 3b 00 	lds	r0, 0x003B
     692:	0f 92       	push	r0
     694:	11 24       	eor	r1, r1
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	//PORTD.OUTTGL  = PIN5_bm;

	ADC_FreeRunning_Disable(&ADCB);
     6b6:	a0 e4       	ldi	r26, 0x40	; 64
     6b8:	b2 e0       	ldi	r27, 0x02	; 2
     6ba:	e0 e4       	ldi	r30, 0x40	; 64
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	81 81       	ldd	r24, Z+1	; 0x01
     6c0:	87 7f       	andi	r24, 0xF7	; 247
     6c2:	11 96       	adiw	r26, 0x01	; 1
     6c4:	8c 93       	st	X, r24

	ADC_Disable(&ADCB);
     6c6:	a0 e4       	ldi	r26, 0x40	; 64
     6c8:	b2 e0       	ldi	r27, 0x02	; 2
     6ca:	e0 e4       	ldi	r30, 0x40	; 64
     6cc:	f2 e0       	ldi	r31, 0x02	; 2
     6ce:	80 81       	ld	r24, Z
     6d0:	8e 7f       	andi	r24, 0xFE	; 254
     6d2:	8c 93       	st	X, r24

	/*  Read samples and clear interrupt flags. */
	adc_a_control.adb0 = ADC_ResultCh_GetWord_Signed(&ADCB.CH0, adc_a_control.offset_b);
     6d4:	20 91 09 20 	lds	r18, 0x2009
     6d8:	80 e6       	ldi	r24, 0x60	; 96
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	62 2f       	mov	r22, r18
     6de:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     6e2:	80 93 1b 20 	sts	0x201B, r24
     6e6:	90 93 1c 20 	sts	0x201C, r25
	adc_a_control.adb1 = ADC_ResultCh_GetWord_Signed(&ADCB.CH1, adc_a_control.offset_b);
     6ea:	20 91 09 20 	lds	r18, 0x2009
     6ee:	88 e6       	ldi	r24, 0x68	; 104
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	62 2f       	mov	r22, r18
     6f4:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     6f8:	80 93 1d 20 	sts	0x201D, r24
     6fc:	90 93 1e 20 	sts	0x201E, r25
	adc_a_control.adb2 = ADC_ResultCh_GetWord_Signed(&ADCB.CH2, adc_a_control.offset_b);
     700:	20 91 09 20 	lds	r18, 0x2009
     704:	80 e7       	ldi	r24, 0x70	; 112
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	62 2f       	mov	r22, r18
     70a:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     70e:	80 93 1f 20 	sts	0x201F, r24
     712:	90 93 20 20 	sts	0x2020, r25
	adc_a_control.adb3 = ADC_ResultCh_GetWord_Signed(&ADCB.CH3, adc_a_control.offset_b);
     716:	20 91 09 20 	lds	r18, 0x2009
     71a:	88 e7       	ldi	r24, 0x78	; 120
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	62 2f       	mov	r22, r18
     720:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
     724:	80 93 21 20 	sts	0x2021, r24
     728:	90 93 22 20 	sts	0x2022, r25

	/* Set input to the channels in ADC A to be PIN 4, 5, 6 and 7. */
}
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	0f 90       	pop	r0
     74a:	00 92 3b 00 	sts	0x003B, r0
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti

00000758 <main>:


void TestIC(void);

int main(void)
{
     758:	df 93       	push	r29
     75a:	cf 93       	push	r28
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	2e 97       	sbiw	r28, 0x0e	; 14
     762:	cd bf       	out	0x3d, r28	; 61
     764:	de bf       	out	0x3e, r29	; 62

	CbCtrl.p_InitDev();
     766:	e0 91 45 20 	lds	r30, 0x2045
     76a:	f0 91 46 20 	lds	r31, 0x2046
     76e:	09 95       	icall
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	a8 e4       	ldi	r26, 0x48	; 72
     776:	b3 e4       	ldi	r27, 0x43	; 67
     778:	8b 87       	std	Y+11, r24	; 0x0b
     77a:	9c 87       	std	Y+12, r25	; 0x0c
     77c:	ad 87       	std	Y+13, r26	; 0x0d
     77e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     780:	6b 85       	ldd	r22, Y+11	; 0x0b
     782:	7c 85       	ldd	r23, Y+12	; 0x0c
     784:	8d 85       	ldd	r24, Y+13	; 0x0d
     786:	9e 85       	ldd	r25, Y+14	; 0x0e
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	4a ef       	ldi	r20, 0xFA	; 250
     78e:	53 e4       	ldi	r21, 0x43	; 67
     790:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
     794:	dc 01       	movw	r26, r24
     796:	cb 01       	movw	r24, r22
     798:	8f 83       	std	Y+7, r24	; 0x07
     79a:	98 87       	std	Y+8, r25	; 0x08
     79c:	a9 87       	std	Y+9, r26	; 0x09
     79e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7a0:	6f 81       	ldd	r22, Y+7	; 0x07
     7a2:	78 85       	ldd	r23, Y+8	; 0x08
     7a4:	89 85       	ldd	r24, Y+9	; 0x09
     7a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e8       	ldi	r20, 0x80	; 128
     7ae:	5f e3       	ldi	r21, 0x3F	; 63
     7b0:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__ltsf2>
     7b4:	88 23       	and	r24, r24
     7b6:	2c f4       	brge	.+10     	; 0x7c2 <main+0x6a>
		__ticks = 1;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	8d 83       	std	Y+5, r24	; 0x05
     7be:	9e 83       	std	Y+6, r25	; 0x06
     7c0:	3f c0       	rjmp	.+126    	; 0x840 <main+0xe8>
	else if (__tmp > 65535)
     7c2:	6f 81       	ldd	r22, Y+7	; 0x07
     7c4:	78 85       	ldd	r23, Y+8	; 0x08
     7c6:	89 85       	ldd	r24, Y+9	; 0x09
     7c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	3f ef       	ldi	r19, 0xFF	; 255
     7ce:	4f e7       	ldi	r20, 0x7F	; 127
     7d0:	57 e4       	ldi	r21, 0x47	; 71
     7d2:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__gtsf2>
     7d6:	18 16       	cp	r1, r24
     7d8:	4c f5       	brge	.+82     	; 0x82c <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7da:	6b 85       	ldd	r22, Y+11	; 0x0b
     7dc:	7c 85       	ldd	r23, Y+12	; 0x0c
     7de:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e2       	ldi	r20, 0x20	; 32
     7e8:	51 e4       	ldi	r21, 0x41	; 65
     7ea:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	8d 83       	std	Y+5, r24	; 0x05
     800:	9e 83       	std	Y+6, r25	; 0x06
     802:	0f c0       	rjmp	.+30     	; 0x822 <main+0xca>
     804:	82 e3       	ldi	r24, 0x32	; 50
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	8b 83       	std	Y+3, r24	; 0x03
     80a:	9c 83       	std	Y+4, r25	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <main+0xb8>
     814:	8b 83       	std	Y+3, r24	; 0x03
     816:	9c 83       	std	Y+4, r25	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     818:	8d 81       	ldd	r24, Y+5	; 0x05
     81a:	9e 81       	ldd	r25, Y+6	; 0x06
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	8d 83       	std	Y+5, r24	; 0x05
     820:	9e 83       	std	Y+6, r25	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     822:	8d 81       	ldd	r24, Y+5	; 0x05
     824:	9e 81       	ldd	r25, Y+6	; 0x06
     826:	00 97       	sbiw	r24, 0x00	; 0
     828:	69 f7       	brne	.-38     	; 0x804 <main+0xac>
     82a:	a2 cf       	rjmp	.-188    	; 0x770 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82c:	6f 81       	ldd	r22, Y+7	; 0x07
     82e:	78 85       	ldd	r23, Y+8	; 0x08
     830:	89 85       	ldd	r24, Y+9	; 0x09
     832:	9a 85       	ldd	r25, Y+10	; 0x0a
     834:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	8d 83       	std	Y+5, r24	; 0x05
     83e:	9e 83       	std	Y+6, r25	; 0x06
     840:	8d 81       	ldd	r24, Y+5	; 0x05
     842:	9e 81       	ldd	r25, Y+6	; 0x06
     844:	89 83       	std	Y+1, r24	; 0x01
     846:	9a 83       	std	Y+2, r25	; 0x02
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <main+0xf4>
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	9a 83       	std	Y+2, r25	; 0x02
     854:	8d cf       	rjmp	.-230    	; 0x770 <main+0x18>

00000856 <__vector_77>:



/*	¶¨Ê±Æ÷D0ÖÐ¶Ï£¬ÖÜÆÚÎª1ms ÓÃÓÚ´®¿Ú´¦Àí*/
ISR(TCD0_OVF_vect)
{
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	00 90 3b 00 	lds	r0, 0x003B
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
     87e:	df 93       	push	r29
     880:	cf 93       	push	r28
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62


	static uint8_t MMM;

	/* Toggle PD0 output after 5 switch presses. */
	TC0_ConfigClockSource( &TCD0, TC_CLKSEL_OFF_gc );
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	99 e0       	ldi	r25, 0x09	; 9
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	0e 94 b8 13 	call	0x2770	; 0x2770 <TC0_ConfigClockSource>

	CbDisCtrl.pDealRcData(&USART_data_C1,&CbDisCtrlData);
     890:	e0 91 53 20 	lds	r30, 0x2053
     894:	f0 91 54 20 	lds	r31, 0x2054
     898:	85 e2       	ldi	r24, 0x25	; 37
     89a:	91 e2       	ldi	r25, 0x21	; 33
     89c:	2e eb       	ldi	r18, 0xBE	; 190
     89e:	30 e2       	ldi	r19, 0x20	; 32
     8a0:	b9 01       	movw	r22, r18
     8a2:	09 95       	icall

	MMM = CbCtrlData.ComSwState;
     8a4:	80 91 aa 20 	lds	r24, 0x20AA
     8a8:	80 93 5e 20 	sts	0x205E, r24

	if(CbCtrlData.ComSwState == COM_WIRELESS_EN)
     8ac:	80 91 aa 20 	lds	r24, 0x20AA
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	59 f4       	brne	.+22     	; 0x8ca <__vector_77+0x74>
		CbCtrl.pDearRcData(&USART_data_C0,&CbCtrlData);
     8b4:	e0 91 4f 20 	lds	r30, 0x204F
     8b8:	f0 91 50 20 	lds	r31, 0x2050
     8bc:	83 eb       	ldi	r24, 0xB3	; 179
     8be:	91 e2       	ldi	r25, 0x21	; 33
     8c0:	20 e8       	ldi	r18, 0x80	; 128
     8c2:	30 e2       	ldi	r19, 0x20	; 32
     8c4:	b9 01       	movw	r22, r18
     8c6:	09 95       	icall
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__vector_77+0x90>
	else if(CbCtrlData.ComSwState == COM_WIRE_EN)
     8ca:	80 91 aa 20 	lds	r24, 0x20AA
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	51 f4       	brne	.+20     	; 0x8e6 <__vector_77+0x90>
		CbCtrl.pDearRcData(&USART_data_D0,&CbCtrlData);
     8d2:	e0 91 4f 20 	lds	r30, 0x204F
     8d6:	f0 91 50 20 	lds	r31, 0x2050
     8da:	88 e8       	ldi	r24, 0x88	; 136
     8dc:	92 e2       	ldi	r25, 0x22	; 34
     8de:	20 e8       	ldi	r18, 0x80	; 128
     8e0:	30 e2       	ldi	r19, 0x20	; 32
     8e2:	b9 01       	movw	r22, r18
     8e4:	09 95       	icall


	TC0_ConfigClockSource( &TCD0, TC_CLKSEL_DIV64_gc );
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	99 e0       	ldi	r25, 0x09	; 9
     8ea:	65 e0       	ldi	r22, 0x05	; 5
     8ec:	0e 94 b8 13 	call	0x2770	; 0x2770 <TC0_ConfigClockSource>
}
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	0f 90       	pop	r0
     90e:	00 92 3b 00 	sts	0x003B, r0
     912:	0f 90       	pop	r0
     914:	0f be       	out	0x3f, r0	; 63
     916:	0f 90       	pop	r0
     918:	1f 90       	pop	r1
     91a:	18 95       	reti

0000091c <__vector_83>:


/*	¶¨Ê±Æ÷D1ÖÐ¶Ï£¬ÖÜÆÚÎª4ms	*/
ISR(TCD1_OVF_vect)
{
     91c:	1f 92       	push	r1
     91e:	0f 92       	push	r0
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	0f 92       	push	r0
     924:	00 90 3b 00 	lds	r0, 0x003B
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62


	/* Toggle PD0 output after 5 switch presses. */
	TC1_ConfigClockSource( &TCD1, TC_CLKSEL_OFF_gc );
     94c:	80 e4       	ldi	r24, 0x40	; 64
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <TC1_ConfigClockSource>

		CbCtrl.p_DealCtrl();
     956:	e0 91 47 20 	lds	r30, 0x2047
     95a:	f0 91 48 20 	lds	r31, 0x2048
     95e:	09 95       	icall

	TC1_ConfigClockSource( &TCD1, TC_CLKSEL_DIV64_gc );
     960:	80 e4       	ldi	r24, 0x40	; 64
     962:	99 e0       	ldi	r25, 0x09	; 9
     964:	65 e0       	ldi	r22, 0x05	; 5
     966:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <TC1_ConfigClockSource>
}
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	ff 91       	pop	r31
     970:	ef 91       	pop	r30
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	0f 90       	pop	r0
     988:	00 92 3b 00 	sts	0x003B, r0
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <InitClkSys>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitClkSys(void)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
	/* Enable for external 2-9 MHz crystal with quick startup time
	 * (256CLK). Check if it's stable and set the external
	 * oscillator as the main clock source.
	 */
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,
     99e:	80 e4       	ldi	r24, 0x40	; 64
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <CLKSYS_XOSC_Config>
						false,
						OSC_XOSCSEL_EXTCLK_gc );
	CLKSYS_Enable( OSC_XOSCEN_bm );
     9a8:	a0 e5       	ldi	r26, 0x50	; 80
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	e0 e5       	ldi	r30, 0x50	; 80
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	88 60       	ori	r24, 0x08	; 8
     9b4:	8c 93       	st	X, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     9b6:	e0 e5       	ldi	r30, 0x50	; 80
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	88 70       	andi	r24, 0x08	; 8
     9c2:	90 70       	andi	r25, 0x00	; 0
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	b9 f3       	breq	.-18     	; 0x9b6 <InitClkSys+0x20>
	/*  Configure PLL with the external 2-9 MHz crystal as source and
	 *  multiply by 8 to get 64 MHz PLL clock and enable it. Wait
	 *  for it to be stable and set prescaler C to divide by two
	 *  to set the CPU clock to 32 MHz. Disable unused clock.
	 */
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 8 );
     9c8:	80 ec       	ldi	r24, 0xC0	; 192
     9ca:	68 e0       	ldi	r22, 0x08	; 8
     9cc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     9d0:	a0 e5       	ldi	r26, 0x50	; 80
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e0 e5       	ldi	r30, 0x50	; 80
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	80 61       	ori	r24, 0x10	; 16
     9dc:	8c 93       	st	X, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_2_gc );
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	0e 94 23 10 	call	0x2046	; 0x2046 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     9e6:	e0 e5       	ldi	r30, 0x50	; 80
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	81 81       	ldd	r24, Z+1	; 0x01
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	80 71       	andi	r24, 0x10	; 16
     9f2:	90 70       	andi	r25, 0x00	; 0
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	b9 f3       	breq	.-18     	; 0x9e6 <InitClkSys+0x50>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	0e 94 3a 10 	call	0x2074	; 0x2074 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_XOSCEN_bm );
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	0e 94 07 10 	call	0x200e	; 0x200e <CLKSYS_Disable>
}
     a04:	cf 91       	pop	r28
     a06:	df 91       	pop	r29
     a08:	08 95       	ret

00000a0a <InitDevices>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitDevices(void)
{
     a0a:	df 93       	push	r29
     a0c:	cf 93       	push	r28
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
	cli();
     a12:	f8 94       	cli

	InitClkSys();
     a14:	0e 94 cb 04 	call	0x996	; 0x996 <InitClkSys>

	/* ÓÃÓÚËÄ·ÖÆÁÆ÷¿ØÖÆ£¬MCU_Image */
	InitUsartC0(19200);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	7b e4       	ldi	r23, 0x4B	; 75
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 00 06 	call	0xc00	; 0xc00 <InitUsartC0>

	/* ÓÃÓÚÉè±¸×ÜÏß¿ØÖÆ£¬MCU_ARM */
	InitUsartC1(4800);
     a24:	60 ec       	ldi	r22, 0xC0	; 192
     a26:	72 e1       	ldi	r23, 0x12	; 18
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 70 06 	call	0xce0	; 0xce0 <InitUsartC1>

	/* ÓÃÓÚ×óµç»úÇý¶¯¿ØÖÆ£¬MCU_ML */
	InitUsartD0(19200);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	7b e4       	ldi	r23, 0x4B	; 75
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <InitUsartD0>

	/* ÓÃÓÚÓÒµç»úÇý¶¯¿ØÖÆ£¬MCU_MR */
	InitUsartD1(19200);
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	7b e4       	ldi	r23, 0x4B	; 75
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <InitUsartD1>

	/* ÓÃÓÚÎÞÏß¿ØÖÆ£¬MCU_RC  */
	InitUsartE0(19200);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	7b e4       	ldi	r23, 0x4B	; 75
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 cc 07 	call	0xf98	; 0xf98 <InitUsartE0>

	/* ÓÃÓÚÓÐÏß¿ØÖÆ, MCU_RC1 */
	InitUsartE1(19200);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	7b e4       	ldi	r23, 0x4B	; 75
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 3c 08 	call	0x1078	; 0x1078 <InitUsartE1>

	/* ÓÃÓÚÍâ½Ó´®ÐÐ¿ØÖÆ£¬ MCU_EX */
	InitUsartF0(19200);
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	7b e4       	ldi	r23, 0x4B	; 75
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 b4 08 	call	0x1168	; 0x1168 <InitUsartF0>

	/* ÓÃÓÚ´®ÐÐÊý¾Ý½ÓÊÕ¿ØÖÆ */
	InitTCD0();
     a6c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <InitTCD0>

	/* ÓÃÓÚÎÞÏß´«Êä£¬·¢ËÍÑÓÊ±¿ØÖÆ */
	InitTCD1();
     a70:	0e 94 8b 05 	call	0xb16	; 0xb16 <InitTCD1>


	/* Enable all interrupt levels. */
	PMIC_SetVectorLocationToApplication();
     a74:	0e 94 cb 12 	call	0x2596	; 0x2596 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();
     a78:	a0 ea       	ldi	r26, 0xA0	; 160
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	e0 ea       	ldi	r30, 0xA0	; 160
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	12 96       	adiw	r26, 0x02	; 2
     a86:	8c 93       	st	X, r24
	PMIC_EnableMediumLevel();
     a88:	a0 ea       	ldi	r26, 0xA0	; 160
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e0 ea       	ldi	r30, 0xA0	; 160
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	82 60       	ori	r24, 0x02	; 2
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	8c 93       	st	X, r24
	PMIC_EnableHighLevel();
     a98:	a0 ea       	ldi	r26, 0xA0	; 160
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	e0 ea       	ldi	r30, 0xA0	; 160
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	82 81       	ldd	r24, Z+2	; 0x02
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	8c 93       	st	X, r24
     aa8:	12 97       	sbiw	r26, 0x02	; 2

	/**********Ö¸Ê¾µÆ²Ù×÷**************/
	PORTE.DIRSET  = PIN4_bm;
     aaa:	e0 e8       	ldi	r30, 0x80	; 128
     aac:	f6 e0       	ldi	r31, 0x06	; 6
     aae:	80 e1       	ldi	r24, 0x10	; 16
     ab0:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR  = PIN4_bm;
     ab2:	e0 e8       	ldi	r30, 0x80	; 128
     ab4:	f6 e0       	ldi	r31, 0x06	; 6
     ab6:	80 e1       	ldi	r24, 0x10	; 16
     ab8:	86 83       	std	Z+6, r24	; 0x06

	PORTE.DIRSET  = PIN5_bm;
     aba:	e0 e8       	ldi	r30, 0x80	; 128
     abc:	f6 e0       	ldi	r31, 0x06	; 6
     abe:	80 e2       	ldi	r24, 0x20	; 32
     ac0:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR  = PIN5_bm;
     ac2:	e0 e8       	ldi	r30, 0x80	; 128
     ac4:	f6 e0       	ldi	r31, 0x06	; 6
     ac6:	80 e2       	ldi	r24, 0x20	; 32
     ac8:	86 83       	std	Z+6, r24	; 0x06

	/* Éè±¸×ÜÏßµÄRS485·¢ËÍ¶Ë¿ØÖÆ£¬ÉèÖÃÊä³ö£¬²¢Ê¹ÄÜÎÞÐ§ */
	PORTC.DIRSET  = PIN1_bm;
     aca:	e0 e4       	ldi	r30, 0x40	; 64
     acc:	f6 e0       	ldi	r31, 0x06	; 6
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTCLR  = PIN1_bm;
     ad2:	e0 e4       	ldi	r30, 0x40	; 64
     ad4:	f6 e0       	ldi	r31, 0x06	; 6
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	86 83       	std	Z+6, r24	; 0x06

	/* ÓÐÏß¿ØÖÆµÄRS485·¢ËÍ¶Ë¿ØÖÆ£¬ÉèÖÃÊä³ö£¬²¢Ê¹ÄÜÎÞÐ§ */
	PORTE.DIRSET  = PIN1_bm;
     ada:	e0 e8       	ldi	r30, 0x80	; 128
     adc:	f6 e0       	ldi	r31, 0x06	; 6
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR  = PIN1_bm;
     ae2:	e0 e8       	ldi	r30, 0x80	; 128
     ae4:	f6 e0       	ldi	r31, 0x06	; 6
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	86 83       	std	Z+6, r24	; 0x06

	/* Enable global interrupts. */
	sei();
     aea:	78 94       	sei
}
     aec:	cf 91       	pop	r28
     aee:	df 91       	pop	r29
     af0:	08 95       	ret

00000af2 <InitTCD0>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitTCD0(void)
{
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
	/* Set period ( TOP value ). */
	TC_SetPeriod( &TCD0, (0x01F4 - 1) );
     afa:	e0 e0       	ldi	r30, 0x00	; 0
     afc:	f9 e0       	ldi	r31, 0x09	; 9
     afe:	83 ef       	ldi	r24, 0xF3	; 243
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	86 a3       	std	Z+38, r24	; 0x26
     b04:	97 a3       	std	Z+39, r25	; 0x27

	/* Enable overflow interrupt at low level */
	TC0_SetOverflowIntLevel( &TCD0, TC_OVFINTLVL_LO_gc );
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	99 e0       	ldi	r25, 0x09	; 9
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	0e 94 bc 14 	call	0x2978	; 0x2978 <TC0_SetOverflowIntLevel>
	/* Enable CCA interrupt. */
//	TC0_SetCCAIntLevel( &TCD0, TC_CCAINTLVL_LO_gc );

	/* Start Timer/Counter. */
//	TC0_ConfigClockSource( &TCD0, TC_CLKSEL_DIV64_gc );
}
     b10:	cf 91       	pop	r28
     b12:	df 91       	pop	r29
     b14:	08 95       	ret

00000b16 <InitTCD1>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitTCD1(void)
{
     b16:	df 93       	push	r29
     b18:	cf 93       	push	r28
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
	/* Set period ( TOP value ). */
	TC_SetPeriod( &TCD1, (0x07D0 - 1) );
     b1e:	e0 e4       	ldi	r30, 0x40	; 64
     b20:	f9 e0       	ldi	r31, 0x09	; 9
     b22:	8f ec       	ldi	r24, 0xCF	; 207
     b24:	97 e0       	ldi	r25, 0x07	; 7
     b26:	86 a3       	std	Z+38, r24	; 0x26
     b28:	97 a3       	std	Z+39, r25	; 0x27

	/* Enable overflow interrupt at low level */
	TC1_SetOverflowIntLevel( &TCD1, TC_OVFINTLVL_LO_gc );
     b2a:	80 e4       	ldi	r24, 0x40	; 64
     b2c:	99 e0       	ldi	r25, 0x09	; 9
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	0e 94 d5 14 	call	0x29aa	; 0x29aa <TC1_SetOverflowIntLevel>

	/* Start Timer/Counter. */
	//
}
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	08 95       	ret

00000b3a <SetBaudRate>:
#include "Apps/UsartInit.h"

static int16 BaudRate_A,BaudRate_B;

static void SetBaudRate(uint32 BaudRate)
{
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	28 97       	sbiw	r28, 0x08	; 8
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	69 83       	std	Y+1, r22	; 0x01
     b4a:	7a 83       	std	Y+2, r23	; 0x02
     b4c:	8b 83       	std	Y+3, r24	; 0x03
     b4e:	9c 83       	std	Y+4, r25	; 0x04
	switch(BaudRate)
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	ab 81       	ldd	r26, Y+3	; 0x03
     b56:	bc 81       	ldd	r27, Y+4	; 0x04
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
     b5c:	af 83       	std	Y+7, r26	; 0x07
     b5e:	b8 87       	std	Y+8, r27	; 0x08
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	af 81       	ldd	r26, Y+7	; 0x07
     b66:	b8 85       	ldd	r27, Y+8	; 0x08
     b68:	80 38       	cpi	r24, 0x80	; 128
     b6a:	25 e2       	ldi	r18, 0x25	; 37
     b6c:	92 07       	cpc	r25, r18
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	a2 07       	cpc	r26, r18
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	b2 07       	cpc	r27, r18
     b76:	29 f1       	breq	.+74     	; 0xbc2 <SetBaudRate+0x88>
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	af 81       	ldd	r26, Y+7	; 0x07
     b7e:	b8 85       	ldd	r27, Y+8	; 0x08
     b80:	80 30       	cpi	r24, 0x00	; 0
     b82:	2b e4       	ldi	r18, 0x4B	; 75
     b84:	92 07       	cpc	r25, r18
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	a2 07       	cpc	r26, r18
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	b2 07       	cpc	r27, r18
     b8e:	31 f1       	breq	.+76     	; 0xbdc <SetBaudRate+0xa2>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	af 81       	ldd	r26, Y+7	; 0x07
     b96:	b8 85       	ldd	r27, Y+8	; 0x08
     b98:	80 3c       	cpi	r24, 0xC0	; 192
     b9a:	22 e1       	ldi	r18, 0x12	; 18
     b9c:	92 07       	cpc	r25, r18
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	a2 07       	cpc	r26, r18
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	b2 07       	cpc	r27, r18
     ba6:	31 f5       	brne	.+76     	; 0xbf4 <SetBaudRate+0xba>
	{
	case 4800:
		BaudRate_A = 3325;
     ba8:	8d ef       	ldi	r24, 0xFD	; 253
     baa:	9c e0       	ldi	r25, 0x0C	; 12
     bac:	80 93 5f 20 	sts	0x205F, r24
     bb0:	90 93 60 20 	sts	0x2060, r25
		BaudRate_B = -3;
     bb4:	8d ef       	ldi	r24, 0xFD	; 253
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	80 93 61 20 	sts	0x2061, r24
     bbc:	90 93 62 20 	sts	0x2062, r25
     bc0:	19 c0       	rjmp	.+50     	; 0xbf4 <SetBaudRate+0xba>

		break;

	case 9600:
		BaudRate_A = 3317;
     bc2:	85 ef       	ldi	r24, 0xF5	; 245
     bc4:	9c e0       	ldi	r25, 0x0C	; 12
     bc6:	80 93 5f 20 	sts	0x205F, r24
     bca:	90 93 60 20 	sts	0x2060, r25
		BaudRate_B = -4;
     bce:	8c ef       	ldi	r24, 0xFC	; 252
     bd0:	9f ef       	ldi	r25, 0xFF	; 255
     bd2:	80 93 61 20 	sts	0x2061, r24
     bd6:	90 93 62 20 	sts	0x2062, r25
     bda:	0c c0       	rjmp	.+24     	; 0xbf4 <SetBaudRate+0xba>
		break;
	case 19200:
		BaudRate_A = 3301;
     bdc:	85 ee       	ldi	r24, 0xE5	; 229
     bde:	9c e0       	ldi	r25, 0x0C	; 12
     be0:	80 93 5f 20 	sts	0x205F, r24
     be4:	90 93 60 20 	sts	0x2060, r25
		BaudRate_B = -5;
     be8:	8b ef       	ldi	r24, 0xFB	; 251
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	80 93 61 20 	sts	0x2061, r24
     bf0:	90 93 62 20 	sts	0x2062, r25
		break;
	case 115200:

		break;
	}
}
     bf4:	28 96       	adiw	r28, 0x08	; 8
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <InitUsartC0>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartC0(uint32 Baudrate)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	00 d0       	rcall	.+0      	; 0xc06 <InitUsartC0+0x6>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <InitUsartC0+0x8>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	69 83       	std	Y+1, r22	; 0x01
     c0e:	7a 83       	std	Y+2, r23	; 0x02
     c10:	8b 83       	std	Y+3, r24	; 0x03
     c12:	9c 83       	std	Y+4, r25	; 0x04
	/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PC3 (TXD0) as output. */
	PORTC.DIRSET   = PIN3_bm;
     c14:	e0 e4       	ldi	r30, 0x40	; 64
     c16:	f6 e0       	ldi	r31, 0x06	; 6
     c18:	88 e0       	ldi	r24, 0x08	; 8
     c1a:	81 83       	std	Z+1, r24	; 0x01
	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR   = PIN2_bm;
     c1c:	e0 e4       	ldi	r30, 0x40	; 64
     c1e:	f6 e0       	ldi	r31, 0x06	; 6
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_C0, &USARTC0, USART_DREINTLVL_MED_gc);
     c24:	83 eb       	ldi	r24, 0xB3	; 179
     c26:	91 e2       	ldi	r25, 0x21	; 33
     c28:	60 ea       	ldi	r22, 0xA0	; 160
     c2a:	78 e0       	ldi	r23, 0x08	; 8
     c2c:	42 e0       	ldi	r20, 0x02	; 2
     c2e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_C0.usart, USART_CHSIZE_8BIT_gc,
     c32:	e0 91 b3 21 	lds	r30, 0x21B3
     c36:	f0 91 b4 21 	lds	r31, 0x21B4
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_C0.usart, USART_RXCINTLVL_MED_gc);
     c3e:	a0 91 b3 21 	lds	r26, 0x21B3
     c42:	b0 91 b4 21 	lds	r27, 0x21B4
     c46:	e0 91 b3 21 	lds	r30, 0x21B3
     c4a:	f0 91 b4 21 	lds	r31, 0x21B4
     c4e:	83 81       	ldd	r24, Z+3	; 0x03
     c50:	8f 7c       	andi	r24, 0xCF	; 207
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	ab 81       	ldd	r26, Y+3	; 0x03
     c5e:	bc 81       	ldd	r27, Y+4	; 0x04
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTC0, BaudRate_A , BaudRate_B);
     c68:	e0 ea       	ldi	r30, 0xA0	; 160
     c6a:	f8 e0       	ldi	r31, 0x08	; 8
     c6c:	80 91 5f 20 	lds	r24, 0x205F
     c70:	90 91 60 20 	lds	r25, 0x2060
     c74:	86 83       	std	Z+6, r24	; 0x06
     c76:	e0 ea       	ldi	r30, 0xA0	; 160
     c78:	f8 e0       	ldi	r31, 0x08	; 8
     c7a:	80 91 61 20 	lds	r24, 0x2061
     c7e:	90 91 62 20 	lds	r25, 0x2062
     c82:	82 95       	swap	r24
     c84:	92 95       	swap	r25
     c86:	90 7f       	andi	r25, 0xF0	; 240
     c88:	98 27       	eor	r25, r24
     c8a:	80 7f       	andi	r24, 0xF0	; 240
     c8c:	98 27       	eor	r25, r24
     c8e:	28 2f       	mov	r18, r24
     c90:	80 91 5f 20 	lds	r24, 0x205F
     c94:	90 91 60 20 	lds	r25, 0x2060
     c98:	89 2f       	mov	r24, r25
     c9a:	99 0f       	add	r25, r25
     c9c:	99 0b       	sbc	r25, r25
     c9e:	82 2b       	or	r24, r18
     ca0:	87 83       	std	Z+7, r24	; 0x07


	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_C0.usart);
     ca2:	a0 91 b3 21 	lds	r26, 0x21B3
     ca6:	b0 91 b4 21 	lds	r27, 0x21B4
     caa:	e0 91 b3 21 	lds	r30, 0x21B3
     cae:	f0 91 b4 21 	lds	r31, 0x21B4
     cb2:	84 81       	ldd	r24, Z+4	; 0x04
     cb4:	80 61       	ori	r24, 0x10	; 16
     cb6:	14 96       	adiw	r26, 0x04	; 4
     cb8:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_C0.usart);
     cba:	a0 91 b3 21 	lds	r26, 0x21B3
     cbe:	b0 91 b4 21 	lds	r27, 0x21B4
     cc2:	e0 91 b3 21 	lds	r30, 0x21B3
     cc6:	f0 91 b4 21 	lds	r31, 0x21B4
     cca:	84 81       	ldd	r24, Z+4	; 0x04
     ccc:	88 60       	ori	r24, 0x08	; 8
     cce:	14 96       	adiw	r26, 0x04	; 4
     cd0:	8c 93       	st	X, r24
     cd2:	14 97       	sbiw	r26, 0x04	; 4
}
     cd4:	24 96       	adiw	r28, 0x04	; 4
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <InitUsartC1>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartC1(uint32 Baudrate)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <InitUsartC1+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <InitUsartC1+0x8>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	69 83       	std	Y+1, r22	; 0x01
     cee:	7a 83       	std	Y+2, r23	; 0x02
     cf0:	8b 83       	std	Y+3, r24	; 0x03
     cf2:	9c 83       	std	Y+4, r25	; 0x04
	/* This PORT setting is only valid to USARTC1 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PC7 (TXD1) as output. */
	PORTC.DIRSET   = PIN7_bm;
     cf4:	e0 e4       	ldi	r30, 0x40	; 64
     cf6:	f6 e0       	ldi	r31, 0x06	; 6
     cf8:	80 e8       	ldi	r24, 0x80	; 128
     cfa:	81 83       	std	Z+1, r24	; 0x01
	/* PC6 (RXD1) as input. */
	PORTC.DIRCLR   = PIN6_bm;
     cfc:	e0 e4       	ldi	r30, 0x40	; 64
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	80 e4       	ldi	r24, 0x40	; 64
     d02:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTC1 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_C1, &USARTC1, USART_DREINTLVL_MED_gc);
     d04:	85 e2       	ldi	r24, 0x25	; 37
     d06:	91 e2       	ldi	r25, 0x21	; 33
     d08:	60 eb       	ldi	r22, 0xB0	; 176
     d0a:	78 e0       	ldi	r23, 0x08	; 8
     d0c:	42 e0       	ldi	r20, 0x02	; 2
     d0e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTC1, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_C1.usart, USART_CHSIZE_8BIT_gc,
     d12:	e0 91 25 21 	lds	r30, 0x2125
     d16:	f0 91 26 21 	lds	r31, 0x2126
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_C1.usart, USART_RXCINTLVL_MED_gc);
     d1e:	a0 91 25 21 	lds	r26, 0x2125
     d22:	b0 91 26 21 	lds	r27, 0x2126
     d26:	e0 91 25 21 	lds	r30, 0x2125
     d2a:	f0 91 26 21 	lds	r31, 0x2126
     d2e:	83 81       	ldd	r24, Z+3	; 0x03
     d30:	8f 7c       	andi	r24, 0xCF	; 207
     d32:	80 62       	ori	r24, 0x20	; 32
     d34:	13 96       	adiw	r26, 0x03	; 3
     d36:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	ab 81       	ldd	r26, Y+3	; 0x03
     d3e:	bc 81       	ldd	r27, Y+4	; 0x04
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTC1, BaudRate_A , BaudRate_B);
     d48:	e0 eb       	ldi	r30, 0xB0	; 176
     d4a:	f8 e0       	ldi	r31, 0x08	; 8
     d4c:	80 91 5f 20 	lds	r24, 0x205F
     d50:	90 91 60 20 	lds	r25, 0x2060
     d54:	86 83       	std	Z+6, r24	; 0x06
     d56:	e0 eb       	ldi	r30, 0xB0	; 176
     d58:	f8 e0       	ldi	r31, 0x08	; 8
     d5a:	80 91 61 20 	lds	r24, 0x2061
     d5e:	90 91 62 20 	lds	r25, 0x2062
     d62:	82 95       	swap	r24
     d64:	92 95       	swap	r25
     d66:	90 7f       	andi	r25, 0xF0	; 240
     d68:	98 27       	eor	r25, r24
     d6a:	80 7f       	andi	r24, 0xF0	; 240
     d6c:	98 27       	eor	r25, r24
     d6e:	28 2f       	mov	r18, r24
     d70:	80 91 5f 20 	lds	r24, 0x205F
     d74:	90 91 60 20 	lds	r25, 0x2060
     d78:	89 2f       	mov	r24, r25
     d7a:	99 0f       	add	r25, r25
     d7c:	99 0b       	sbc	r25, r25
     d7e:	82 2b       	or	r24, r18
     d80:	87 83       	std	Z+7, r24	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_C1.usart);
     d82:	a0 91 25 21 	lds	r26, 0x2125
     d86:	b0 91 26 21 	lds	r27, 0x2126
     d8a:	e0 91 25 21 	lds	r30, 0x2125
     d8e:	f0 91 26 21 	lds	r31, 0x2126
     d92:	84 81       	ldd	r24, Z+4	; 0x04
     d94:	80 61       	ori	r24, 0x10	; 16
     d96:	14 96       	adiw	r26, 0x04	; 4
     d98:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_C1.usart);
     d9a:	a0 91 25 21 	lds	r26, 0x2125
     d9e:	b0 91 26 21 	lds	r27, 0x2126
     da2:	e0 91 25 21 	lds	r30, 0x2125
     da6:	f0 91 26 21 	lds	r31, 0x2126
     daa:	84 81       	ldd	r24, Z+4	; 0x04
     dac:	88 60       	ori	r24, 0x08	; 8
     dae:	14 96       	adiw	r26, 0x04	; 4
     db0:	8c 93       	st	X, r24
     db2:	14 97       	sbiw	r26, 0x04	; 4
}
     db4:	24 96       	adiw	r28, 0x04	; 4
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <InitUsartD0>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartD0(uint32 Baudrate)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <InitUsartD0+0x6>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <InitUsartD0+0x8>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	69 83       	std	Y+1, r22	; 0x01
     dce:	7a 83       	std	Y+2, r23	; 0x02
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	9c 83       	std	Y+4, r25	; 0x04
	/* This PORT setting is only valid to USARTD0 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PD3 (TXD0) as output. */
	PORTD.DIRSET   = PIN3_bm;
     dd4:	e0 e6       	ldi	r30, 0x60	; 96
     dd6:	f6 e0       	ldi	r31, 0x06	; 6
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	81 83       	std	Z+1, r24	; 0x01
	/* PD2 (RXD0) as input. */
	PORTD.DIRCLR   = PIN2_bm;
     ddc:	e0 e6       	ldi	r30, 0x60	; 96
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTD0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_D0, &USARTD0, USART_DREINTLVL_MED_gc);
     de4:	88 e8       	ldi	r24, 0x88	; 136
     de6:	92 e2       	ldi	r25, 0x22	; 34
     de8:	60 ea       	ldi	r22, 0xA0	; 160
     dea:	79 e0       	ldi	r23, 0x09	; 9
     dec:	42 e0       	ldi	r20, 0x02	; 2
     dee:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTD0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_D0.usart, USART_CHSIZE_8BIT_gc,
     df2:	e0 91 88 22 	lds	r30, 0x2288
     df6:	f0 91 89 22 	lds	r31, 0x2289
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_D0.usart, USART_RXCINTLVL_MED_gc);
     dfe:	a0 91 88 22 	lds	r26, 0x2288
     e02:	b0 91 89 22 	lds	r27, 0x2289
     e06:	e0 91 88 22 	lds	r30, 0x2288
     e0a:	f0 91 89 22 	lds	r31, 0x2289
     e0e:	83 81       	ldd	r24, Z+3	; 0x03
     e10:	8f 7c       	andi	r24, 0xCF	; 207
     e12:	80 62       	ori	r24, 0x20	; 32
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	8c 93       	st	X, r24

	/* Enable TX Complete interrupt. */
	USART_TxdInterruptLevel_Set(USART_data_D0.usart, USART_TXCINTLVL_HI_gc);
     e18:	a0 91 88 22 	lds	r26, 0x2288
     e1c:	b0 91 89 22 	lds	r27, 0x2289
     e20:	e0 91 88 22 	lds	r30, 0x2288
     e24:	f0 91 89 22 	lds	r31, 0x2289
     e28:	83 81       	ldd	r24, Z+3	; 0x03
     e2a:	8c 60       	ori	r24, 0x0C	; 12
     e2c:	13 96       	adiw	r26, 0x03	; 3
     e2e:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	ab 81       	ldd	r26, Y+3	; 0x03
     e36:	bc 81       	ldd	r27, Y+4	; 0x04
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTD0, BaudRate_A , BaudRate_B);
     e40:	e0 ea       	ldi	r30, 0xA0	; 160
     e42:	f9 e0       	ldi	r31, 0x09	; 9
     e44:	80 91 5f 20 	lds	r24, 0x205F
     e48:	90 91 60 20 	lds	r25, 0x2060
     e4c:	86 83       	std	Z+6, r24	; 0x06
     e4e:	e0 ea       	ldi	r30, 0xA0	; 160
     e50:	f9 e0       	ldi	r31, 0x09	; 9
     e52:	80 91 61 20 	lds	r24, 0x2061
     e56:	90 91 62 20 	lds	r25, 0x2062
     e5a:	82 95       	swap	r24
     e5c:	92 95       	swap	r25
     e5e:	90 7f       	andi	r25, 0xF0	; 240
     e60:	98 27       	eor	r25, r24
     e62:	80 7f       	andi	r24, 0xF0	; 240
     e64:	98 27       	eor	r25, r24
     e66:	28 2f       	mov	r18, r24
     e68:	80 91 5f 20 	lds	r24, 0x205F
     e6c:	90 91 60 20 	lds	r25, 0x2060
     e70:	89 2f       	mov	r24, r25
     e72:	99 0f       	add	r25, r25
     e74:	99 0b       	sbc	r25, r25
     e76:	82 2b       	or	r24, r18
     e78:	87 83       	std	Z+7, r24	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_D0.usart);
     e7a:	a0 91 88 22 	lds	r26, 0x2288
     e7e:	b0 91 89 22 	lds	r27, 0x2289
     e82:	e0 91 88 22 	lds	r30, 0x2288
     e86:	f0 91 89 22 	lds	r31, 0x2289
     e8a:	84 81       	ldd	r24, Z+4	; 0x04
     e8c:	80 61       	ori	r24, 0x10	; 16
     e8e:	14 96       	adiw	r26, 0x04	; 4
     e90:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_D0.usart);
     e92:	a0 91 88 22 	lds	r26, 0x2288
     e96:	b0 91 89 22 	lds	r27, 0x2289
     e9a:	e0 91 88 22 	lds	r30, 0x2288
     e9e:	f0 91 89 22 	lds	r31, 0x2289
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	14 96       	adiw	r26, 0x04	; 4
     ea8:	8c 93       	st	X, r24
     eaa:	14 97       	sbiw	r26, 0x04	; 4
}
     eac:	24 96       	adiw	r28, 0x04	; 4
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <InitUsartD1>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartD1(uint32 Baudrate)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <InitUsartD1+0x6>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <InitUsartD1+0x8>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	69 83       	std	Y+1, r22	; 0x01
     ec6:	7a 83       	std	Y+2, r23	; 0x02
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	9c 83       	std	Y+4, r25	; 0x04
	/* This PORT setting is only valid to USARTD1 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET   = PIN7_bm;
     ecc:	e0 e6       	ldi	r30, 0x60	; 96
     ece:	f6 e0       	ldi	r31, 0x06	; 6
     ed0:	80 e8       	ldi	r24, 0x80	; 128
     ed2:	81 83       	std	Z+1, r24	; 0x01
	/* PD6 (RXD1) as input. */
	PORTD.DIRCLR   = PIN6_bm;
     ed4:	e0 e6       	ldi	r30, 0x60	; 96
     ed6:	f6 e0       	ldi	r31, 0x06	; 6
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTD1 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_D1, &USARTD1, USART_DREINTLVL_MED_gc);
     edc:	8c e6       	ldi	r24, 0x6C	; 108
     ede:	91 e2       	ldi	r25, 0x21	; 33
     ee0:	60 eb       	ldi	r22, 0xB0	; 176
     ee2:	79 e0       	ldi	r23, 0x09	; 9
     ee4:	42 e0       	ldi	r20, 0x02	; 2
     ee6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTD1, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_D1.usart, USART_CHSIZE_8BIT_gc,
     eea:	e0 91 6c 21 	lds	r30, 0x216C
     eee:	f0 91 6d 21 	lds	r31, 0x216D
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_D1.usart, USART_RXCINTLVL_MED_gc);
     ef6:	a0 91 6c 21 	lds	r26, 0x216C
     efa:	b0 91 6d 21 	lds	r27, 0x216D
     efe:	e0 91 6c 21 	lds	r30, 0x216C
     f02:	f0 91 6d 21 	lds	r31, 0x216D
     f06:	83 81       	ldd	r24, Z+3	; 0x03
     f08:	8f 7c       	andi	r24, 0xCF	; 207
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	ab 81       	ldd	r26, Y+3	; 0x03
     f16:	bc 81       	ldd	r27, Y+4	; 0x04
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTD1, BaudRate_A , BaudRate_B);
     f20:	e0 eb       	ldi	r30, 0xB0	; 176
     f22:	f9 e0       	ldi	r31, 0x09	; 9
     f24:	80 91 5f 20 	lds	r24, 0x205F
     f28:	90 91 60 20 	lds	r25, 0x2060
     f2c:	86 83       	std	Z+6, r24	; 0x06
     f2e:	e0 eb       	ldi	r30, 0xB0	; 176
     f30:	f9 e0       	ldi	r31, 0x09	; 9
     f32:	80 91 61 20 	lds	r24, 0x2061
     f36:	90 91 62 20 	lds	r25, 0x2062
     f3a:	82 95       	swap	r24
     f3c:	92 95       	swap	r25
     f3e:	90 7f       	andi	r25, 0xF0	; 240
     f40:	98 27       	eor	r25, r24
     f42:	80 7f       	andi	r24, 0xF0	; 240
     f44:	98 27       	eor	r25, r24
     f46:	28 2f       	mov	r18, r24
     f48:	80 91 5f 20 	lds	r24, 0x205F
     f4c:	90 91 60 20 	lds	r25, 0x2060
     f50:	89 2f       	mov	r24, r25
     f52:	99 0f       	add	r25, r25
     f54:	99 0b       	sbc	r25, r25
     f56:	82 2b       	or	r24, r18
     f58:	87 83       	std	Z+7, r24	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_D1.usart);
     f5a:	a0 91 6c 21 	lds	r26, 0x216C
     f5e:	b0 91 6d 21 	lds	r27, 0x216D
     f62:	e0 91 6c 21 	lds	r30, 0x216C
     f66:	f0 91 6d 21 	lds	r31, 0x216D
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	80 61       	ori	r24, 0x10	; 16
     f6e:	14 96       	adiw	r26, 0x04	; 4
     f70:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_D1.usart);
     f72:	a0 91 6c 21 	lds	r26, 0x216C
     f76:	b0 91 6d 21 	lds	r27, 0x216D
     f7a:	e0 91 6c 21 	lds	r30, 0x216C
     f7e:	f0 91 6d 21 	lds	r31, 0x216D
     f82:	84 81       	ldd	r24, Z+4	; 0x04
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	14 96       	adiw	r26, 0x04	; 4
     f88:	8c 93       	st	X, r24
     f8a:	14 97       	sbiw	r26, 0x04	; 4
}
     f8c:	24 96       	adiw	r28, 0x04	; 4
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <InitUsartE0>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartE0(uint32 Baudrate)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <InitUsartE0+0x6>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <InitUsartE0+0x8>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	69 83       	std	Y+1, r22	; 0x01
     fa6:	7a 83       	std	Y+2, r23	; 0x02
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	9c 83       	std	Y+4, r25	; 0x04
	/* This PORT setting is only valid to USARTE0 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PD3 (TXD0) as output. */
	PORTE.DIRSET   = PIN3_bm;
     fac:	e0 e8       	ldi	r30, 0x80	; 128
     fae:	f6 e0       	ldi	r31, 0x06	; 6
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	81 83       	std	Z+1, r24	; 0x01
	/* PD2 (RXD0) as input. */
	PORTE.DIRCLR   = PIN2_bm;
     fb4:	e0 e8       	ldi	r30, 0x80	; 128
     fb6:	f6 e0       	ldi	r31, 0x06	; 6
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTE0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_E0, &USARTE0, USART_DREINTLVL_MED_gc);
     fbc:	8e ed       	ldi	r24, 0xDE	; 222
     fbe:	90 e2       	ldi	r25, 0x20	; 32
     fc0:	60 ea       	ldi	r22, 0xA0	; 160
     fc2:	7a e0       	ldi	r23, 0x0A	; 10
     fc4:	42 e0       	ldi	r20, 0x02	; 2
     fc6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTE0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_E0.usart, USART_CHSIZE_8BIT_gc,
     fca:	e0 91 de 20 	lds	r30, 0x20DE
     fce:	f0 91 df 20 	lds	r31, 0x20DF
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_E0.usart, USART_RXCINTLVL_MED_gc);
     fd6:	a0 91 de 20 	lds	r26, 0x20DE
     fda:	b0 91 df 20 	lds	r27, 0x20DF
     fde:	e0 91 de 20 	lds	r30, 0x20DE
     fe2:	f0 91 df 20 	lds	r31, 0x20DF
     fe6:	83 81       	ldd	r24, Z+3	; 0x03
     fe8:	8f 7c       	andi	r24, 0xCF	; 207
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	13 96       	adiw	r26, 0x03	; 3
     fee:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	ab 81       	ldd	r26, Y+3	; 0x03
     ff6:	bc 81       	ldd	r27, Y+4	; 0x04
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTE0, BaudRate_A , BaudRate_B);
    1000:	e0 ea       	ldi	r30, 0xA0	; 160
    1002:	fa e0       	ldi	r31, 0x0A	; 10
    1004:	80 91 5f 20 	lds	r24, 0x205F
    1008:	90 91 60 20 	lds	r25, 0x2060
    100c:	86 83       	std	Z+6, r24	; 0x06
    100e:	e0 ea       	ldi	r30, 0xA0	; 160
    1010:	fa e0       	ldi	r31, 0x0A	; 10
    1012:	80 91 61 20 	lds	r24, 0x2061
    1016:	90 91 62 20 	lds	r25, 0x2062
    101a:	82 95       	swap	r24
    101c:	92 95       	swap	r25
    101e:	90 7f       	andi	r25, 0xF0	; 240
    1020:	98 27       	eor	r25, r24
    1022:	80 7f       	andi	r24, 0xF0	; 240
    1024:	98 27       	eor	r25, r24
    1026:	28 2f       	mov	r18, r24
    1028:	80 91 5f 20 	lds	r24, 0x205F
    102c:	90 91 60 20 	lds	r25, 0x2060
    1030:	89 2f       	mov	r24, r25
    1032:	99 0f       	add	r25, r25
    1034:	99 0b       	sbc	r25, r25
    1036:	82 2b       	or	r24, r18
    1038:	87 83       	std	Z+7, r24	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_E0.usart);
    103a:	a0 91 de 20 	lds	r26, 0x20DE
    103e:	b0 91 df 20 	lds	r27, 0x20DF
    1042:	e0 91 de 20 	lds	r30, 0x20DE
    1046:	f0 91 df 20 	lds	r31, 0x20DF
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	80 61       	ori	r24, 0x10	; 16
    104e:	14 96       	adiw	r26, 0x04	; 4
    1050:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_E0.usart);
    1052:	a0 91 de 20 	lds	r26, 0x20DE
    1056:	b0 91 df 20 	lds	r27, 0x20DF
    105a:	e0 91 de 20 	lds	r30, 0x20DE
    105e:	f0 91 df 20 	lds	r31, 0x20DF
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	88 60       	ori	r24, 0x08	; 8
    1066:	14 96       	adiw	r26, 0x04	; 4
    1068:	8c 93       	st	X, r24
    106a:	14 97       	sbiw	r26, 0x04	; 4
}
    106c:	24 96       	adiw	r28, 0x04	; 4
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <InitUsartE1>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartE1(uint32 Baudrate)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <InitUsartE1+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <InitUsartE1+0x8>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	69 83       	std	Y+1, r22	; 0x01
    1086:	7a 83       	std	Y+2, r23	; 0x02
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	9c 83       	std	Y+4, r25	; 0x04
	/* PE1 (TXEN) as output */
	PORTE.DIRSET   = PIN1_bm;
    108c:	e0 e8       	ldi	r30, 0x80	; 128
    108e:	f6 e0       	ldi	r31, 0x06	; 6
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	81 83       	std	Z+1, r24	; 0x01

	/* TXEN set */
	PORTE.OUTSET   = PIN1_bm;
    1094:	e0 e8       	ldi	r30, 0x80	; 128
    1096:	f6 e0       	ldi	r31, 0x06	; 6
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	85 83       	std	Z+5, r24	; 0x05

	/* This PORT setting is only valid to USARTE1 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PE7 (TXD1) as output. */
	PORTE.DIRSET   = PIN7_bm;
    109c:	e0 e8       	ldi	r30, 0x80	; 128
    109e:	f6 e0       	ldi	r31, 0x06	; 6
    10a0:	80 e8       	ldi	r24, 0x80	; 128
    10a2:	81 83       	std	Z+1, r24	; 0x01
	/* PE6 (RXD1) as input. */
	PORTE.DIRCLR   = PIN6_bm;
    10a4:	e0 e8       	ldi	r30, 0x80	; 128
    10a6:	f6 e0       	ldi	r31, 0x06	; 6
    10a8:	80 e4       	ldi	r24, 0x40	; 64
    10aa:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTE1 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_E1, &USARTE1, USART_DREINTLVL_MED_gc);
    10ac:	8a ef       	ldi	r24, 0xFA	; 250
    10ae:	91 e2       	ldi	r25, 0x21	; 33
    10b0:	60 eb       	ldi	r22, 0xB0	; 176
    10b2:	7a e0       	ldi	r23, 0x0A	; 10
    10b4:	42 e0       	ldi	r20, 0x02	; 2
    10b6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTE1, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_E1.usart, USART_CHSIZE_8BIT_gc,
    10ba:	e0 91 fa 21 	lds	r30, 0x21FA
    10be:	f0 91 fb 21 	lds	r31, 0x21FB
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_E1.usart, USART_RXCINTLVL_MED_gc);
    10c6:	a0 91 fa 21 	lds	r26, 0x21FA
    10ca:	b0 91 fb 21 	lds	r27, 0x21FB
    10ce:	e0 91 fa 21 	lds	r30, 0x21FA
    10d2:	f0 91 fb 21 	lds	r31, 0x21FB
    10d6:	83 81       	ldd	r24, Z+3	; 0x03
    10d8:	8f 7c       	andi	r24, 0xCF	; 207
    10da:	80 62       	ori	r24, 0x20	; 32
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	ab 81       	ldd	r26, Y+3	; 0x03
    10e6:	bc 81       	ldd	r27, Y+4	; 0x04
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTE1, BaudRate_A , BaudRate_B);
    10f0:	e0 eb       	ldi	r30, 0xB0	; 176
    10f2:	fa e0       	ldi	r31, 0x0A	; 10
    10f4:	80 91 5f 20 	lds	r24, 0x205F
    10f8:	90 91 60 20 	lds	r25, 0x2060
    10fc:	86 83       	std	Z+6, r24	; 0x06
    10fe:	e0 eb       	ldi	r30, 0xB0	; 176
    1100:	fa e0       	ldi	r31, 0x0A	; 10
    1102:	80 91 61 20 	lds	r24, 0x2061
    1106:	90 91 62 20 	lds	r25, 0x2062
    110a:	82 95       	swap	r24
    110c:	92 95       	swap	r25
    110e:	90 7f       	andi	r25, 0xF0	; 240
    1110:	98 27       	eor	r25, r24
    1112:	80 7f       	andi	r24, 0xF0	; 240
    1114:	98 27       	eor	r25, r24
    1116:	28 2f       	mov	r18, r24
    1118:	80 91 5f 20 	lds	r24, 0x205F
    111c:	90 91 60 20 	lds	r25, 0x2060
    1120:	89 2f       	mov	r24, r25
    1122:	99 0f       	add	r25, r25
    1124:	99 0b       	sbc	r25, r25
    1126:	82 2b       	or	r24, r18
    1128:	87 83       	std	Z+7, r24	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_E1.usart);
    112a:	a0 91 fa 21 	lds	r26, 0x21FA
    112e:	b0 91 fb 21 	lds	r27, 0x21FB
    1132:	e0 91 fa 21 	lds	r30, 0x21FA
    1136:	f0 91 fb 21 	lds	r31, 0x21FB
    113a:	84 81       	ldd	r24, Z+4	; 0x04
    113c:	80 61       	ori	r24, 0x10	; 16
    113e:	14 96       	adiw	r26, 0x04	; 4
    1140:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_E1.usart);
    1142:	a0 91 fa 21 	lds	r26, 0x21FA
    1146:	b0 91 fb 21 	lds	r27, 0x21FB
    114a:	e0 91 fa 21 	lds	r30, 0x21FA
    114e:	f0 91 fb 21 	lds	r31, 0x21FB
    1152:	84 81       	ldd	r24, Z+4	; 0x04
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	14 96       	adiw	r26, 0x04	; 4
    1158:	8c 93       	st	X, r24
    115a:	14 97       	sbiw	r26, 0x04	; 4
}
    115c:	24 96       	adiw	r28, 0x04	; 4
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <InitUsartF0>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
void InitUsartF0(uint32 Baudrate)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <InitUsartF0+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <InitUsartF0+0x8>
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	69 83       	std	Y+1, r22	; 0x01
    1176:	7a 83       	std	Y+2, r23	; 0x02
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	9c 83       	std	Y+4, r25	; 0x04
	/* This PORT setting is only valid to USARTF0 if other USARTs is used a
	 * different PORT and/or pins are used. */
	/* PF3 (TXD0) as output. */
	PORTF.DIRSET   = PIN3_bm;
    117c:	e0 ea       	ldi	r30, 0xA0	; 160
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	88 e0       	ldi	r24, 0x08	; 8
    1182:	81 83       	std	Z+1, r24	; 0x01
	/* PF2 (RXD0) as input. */
	PORTF.DIRCLR   = PIN2_bm;
    1184:	e0 ea       	ldi	r30, 0xA0	; 160
    1186:	f6 e0       	ldi	r31, 0x06	; 6
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	82 83       	std	Z+2, r24	; 0x02

	/* Use USARTF0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USART_data_F0, &USARTF0, USART_DREINTLVL_MED_gc);
    118c:	81 e4       	ldi	r24, 0x41	; 65
    118e:	92 e2       	ldi	r25, 0x22	; 34
    1190:	60 ea       	ldi	r22, 0xA0	; 160
    1192:	7b e0       	ldi	r23, 0x0B	; 11
    1194:	42 e0       	ldi	r20, 0x02	; 2
    1196:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <USART_InterruptDriver_Initialize>

	/* USARTF0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(USART_data_F0.usart, USART_CHSIZE_8BIT_gc,
    119a:	e0 91 41 22 	lds	r30, 0x2241
    119e:	f0 91 42 22 	lds	r31, 0x2242
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_DISABLED_gc, false);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USART_data_F0.usart, USART_RXCINTLVL_MED_gc);
    11a6:	a0 91 41 22 	lds	r26, 0x2241
    11aa:	b0 91 42 22 	lds	r27, 0x2242
    11ae:	e0 91 41 22 	lds	r30, 0x2241
    11b2:	f0 91 42 22 	lds	r31, 0x2242
    11b6:	83 81       	ldd	r24, Z+3	; 0x03
    11b8:	8f 7c       	andi	r24, 0xCF	; 207
    11ba:	80 62       	ori	r24, 0x20	; 32
    11bc:	13 96       	adiw	r26, 0x03	; 3
    11be:	8c 93       	st	X, r24
	 * Do not use the baudrate scale factor
	 *
	 * Baudrate select = (I/O clock frequency)/(16 * Baudrate)-1
	 *                 = 0
	 */
	SetBaudRate(Baudrate);
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	ab 81       	ldd	r26, Y+3	; 0x03
    11c6:	bc 81       	ldd	r27, Y+4	; 0x04
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SetBaudRate>
	USART_Baudrate_Set(&USARTF0, BaudRate_A , BaudRate_B);
    11d0:	e0 ea       	ldi	r30, 0xA0	; 160
    11d2:	fb e0       	ldi	r31, 0x0B	; 11
    11d4:	80 91 5f 20 	lds	r24, 0x205F
    11d8:	90 91 60 20 	lds	r25, 0x2060
    11dc:	86 83       	std	Z+6, r24	; 0x06
    11de:	e0 ea       	ldi	r30, 0xA0	; 160
    11e0:	fb e0       	ldi	r31, 0x0B	; 11
    11e2:	80 91 61 20 	lds	r24, 0x2061
    11e6:	90 91 62 20 	lds	r25, 0x2062
    11ea:	82 95       	swap	r24
    11ec:	92 95       	swap	r25
    11ee:	90 7f       	andi	r25, 0xF0	; 240
    11f0:	98 27       	eor	r25, r24
    11f2:	80 7f       	andi	r24, 0xF0	; 240
    11f4:	98 27       	eor	r25, r24
    11f6:	28 2f       	mov	r18, r24
    11f8:	80 91 5f 20 	lds	r24, 0x205F
    11fc:	90 91 60 20 	lds	r25, 0x2060
    1200:	89 2f       	mov	r24, r25
    1202:	99 0f       	add	r25, r25
    1204:	99 0b       	sbc	r25, r25
    1206:	82 2b       	or	r24, r18
    1208:	87 83       	std	Z+7, r24	; 0x07

	/* Enable both RX and TX. */
	USART_Rx_Enable(USART_data_F0.usart);
    120a:	a0 91 41 22 	lds	r26, 0x2241
    120e:	b0 91 42 22 	lds	r27, 0x2242
    1212:	e0 91 41 22 	lds	r30, 0x2241
    1216:	f0 91 42 22 	lds	r31, 0x2242
    121a:	84 81       	ldd	r24, Z+4	; 0x04
    121c:	80 61       	ori	r24, 0x10	; 16
    121e:	14 96       	adiw	r26, 0x04	; 4
    1220:	8c 93       	st	X, r24
	USART_Tx_Enable(USART_data_F0.usart);
    1222:	a0 91 41 22 	lds	r26, 0x2241
    1226:	b0 91 42 22 	lds	r27, 0x2242
    122a:	e0 91 41 22 	lds	r30, 0x2241
    122e:	f0 91 42 22 	lds	r31, 0x2242
    1232:	84 81       	ldd	r24, Z+4	; 0x04
    1234:	88 60       	ori	r24, 0x08	; 8
    1236:	14 96       	adiw	r26, 0x04	; 4
    1238:	8c 93       	st	X, r24
    123a:	14 97       	sbiw	r26, 0x04	; 4
}
    123c:	24 96       	adiw	r28, 0x04	; 4
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <__vector_119>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTF0_RXC_vect)
{
    1248:	1f 92       	push	r1
    124a:	0f 92       	push	r0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	0f 92       	push	r0
    1250:	00 90 3b 00 	lds	r0, 0x003B
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_F0);
    1278:	81 e4       	ldi	r24, 0x41	; 65
    127a:	92 e2       	ldi	r25, 0x22	; 34
    127c:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	bf 91       	pop	r27
    128a:	af 91       	pop	r26
    128c:	9f 91       	pop	r25
    128e:	8f 91       	pop	r24
    1290:	7f 91       	pop	r23
    1292:	6f 91       	pop	r22
    1294:	5f 91       	pop	r21
    1296:	4f 91       	pop	r20
    1298:	3f 91       	pop	r19
    129a:	2f 91       	pop	r18
    129c:	0f 90       	pop	r0
    129e:	00 92 3b 00 	sts	0x003B, r0
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_120>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTF0_DRE_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	00 90 3b 00 	lds	r0, 0x003B
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty(&USART_data_F0);
    12dc:	81 e4       	ldi	r24, 0x41	; 65
    12de:	92 e2       	ldi	r25, 0x22	; 34
    12e0:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <USART_DataRegEmpty>
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	ff 91       	pop	r31
    12ea:	ef 91       	pop	r30
    12ec:	bf 91       	pop	r27
    12ee:	af 91       	pop	r26
    12f0:	9f 91       	pop	r25
    12f2:	8f 91       	pop	r24
    12f4:	7f 91       	pop	r23
    12f6:	6f 91       	pop	r22
    12f8:	5f 91       	pop	r21
    12fa:	4f 91       	pop	r20
    12fc:	3f 91       	pop	r19
    12fe:	2f 91       	pop	r18
    1300:	0f 90       	pop	r0
    1302:	00 92 3b 00 	sts	0x003B, r0
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	00 90 3b 00 	lds	r0, 0x003B
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_C0);
    1340:	83 eb       	ldi	r24, 0xB3	; 179
    1342:	91 e2       	ldi	r25, 0x21	; 33
    1344:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	00 92 3b 00 	sts	0x003B, r0
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_26>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC0_DRE_vect)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	00 90 3b 00 	lds	r0, 0x003B
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty(&USART_data_C0);
    13a4:	83 eb       	ldi	r24, 0xB3	; 179
    13a6:	91 e2       	ldi	r25, 0x21	; 33
    13a8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <USART_DataRegEmpty>
}
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	ff 91       	pop	r31
    13b2:	ef 91       	pop	r30
    13b4:	bf 91       	pop	r27
    13b6:	af 91       	pop	r26
    13b8:	9f 91       	pop	r25
    13ba:	8f 91       	pop	r24
    13bc:	7f 91       	pop	r23
    13be:	6f 91       	pop	r22
    13c0:	5f 91       	pop	r21
    13c2:	4f 91       	pop	r20
    13c4:	3f 91       	pop	r19
    13c6:	2f 91       	pop	r18
    13c8:	0f 90       	pop	r0
    13ca:	00 92 3b 00 	sts	0x003B, r0
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <__vector_28>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC1_RXC_vect)
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	00 90 3b 00 	lds	r0, 0x003B
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_C1);
    1408:	85 e2       	ldi	r24, 0x25	; 37
    140a:	91 e2       	ldi	r25, 0x21	; 33
    140c:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	7f 91       	pop	r23
    1422:	6f 91       	pop	r22
    1424:	5f 91       	pop	r21
    1426:	4f 91       	pop	r20
    1428:	3f 91       	pop	r19
    142a:	2f 91       	pop	r18
    142c:	0f 90       	pop	r0
    142e:	00 92 3b 00 	sts	0x003B, r0
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <__vector_29>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTC1_DRE_vect)
{
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	00 90 3b 00 	lds	r0, 0x003B
    1448:	0f 92       	push	r0
    144a:	11 24       	eor	r1, r1
    144c:	2f 93       	push	r18
    144e:	3f 93       	push	r19
    1450:	4f 93       	push	r20
    1452:	5f 93       	push	r21
    1454:	6f 93       	push	r22
    1456:	7f 93       	push	r23
    1458:	8f 93       	push	r24
    145a:	9f 93       	push	r25
    145c:	af 93       	push	r26
    145e:	bf 93       	push	r27
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty(&USART_data_C1);
    146c:	85 e2       	ldi	r24, 0x25	; 37
    146e:	91 e2       	ldi	r25, 0x21	; 33
    1470:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <USART_DataRegEmpty>
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	00 92 3b 00 	sts	0x003B, r0
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <USART_DataRegEmpty_D0>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty_D0(USART_data_t * usart_data)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	27 97       	sbiw	r28, 0x07	; 7
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	8e 83       	std	Y+6, r24	; 0x06
    14b0:	9f 83       	std	Y+7, r25	; 0x07
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	03 96       	adiw	r24, 0x03	; 3
    14b8:	8c 83       	std	Y+4, r24	; 0x04
    14ba:	9d 83       	std	Y+5, r25	; 0x05

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    14bc:	8e 81       	ldd	r24, Y+6	; 0x06
    14be:	9f 81       	ldd	r25, Y+7	; 0x07
    14c0:	fc 01       	movw	r30, r24
    14c2:	ea 5b       	subi	r30, 0xBA	; 186
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	80 81       	ld	r24, Z
    14c8:	8b 83       	std	Y+3, r24	; 0x03
	if (bufPtr->TX_Head == tempTX_Tail){
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	fc 01       	movw	r30, r24
    14d0:	ee 5b       	subi	r30, 0xBE	; 190
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	90 81       	ld	r25, Z
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	98 17       	cp	r25, r24
    14da:	91 f4       	brne	.+36     	; 0x1500 <USART_DataRegEmpty_D0+0x60>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    14dc:	ee 81       	ldd	r30, Y+6	; 0x06
    14de:	ff 81       	ldd	r31, Y+7	; 0x07
    14e0:	01 90       	ld	r0, Z+
    14e2:	f0 81       	ld	r31, Z
    14e4:	e0 2d       	mov	r30, r0
    14e6:	83 81       	ldd	r24, Z+3	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	8c 7f       	andi	r24, 0xFC	; 252
    14ee:	8a 83       	std	Y+2, r24	; 0x02
		usart_data->usart->CTRLA = tempCTRLA;
    14f0:	ee 81       	ldd	r30, Y+6	; 0x06
    14f2:	ff 81       	ldd	r31, Y+7	; 0x07
    14f4:	01 90       	ld	r0, Z+
    14f6:	f0 81       	ld	r31, Z
    14f8:	e0 2d       	mov	r30, r0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	83 83       	std	Z+3, r24	; 0x03
    14fe:	2a c0       	rjmp	.+84     	; 0x1554 <USART_DataRegEmpty_D0+0xb4>

	}else{
		/* Start transmitting. */
		USARTD0_RS485_TX_EN;
    1500:	e0 e6       	ldi	r30, 0x60	; 96
    1502:	f6 e0       	ldi	r31, 0x06	; 6
    1504:	82 e0       	ldi	r24, 0x02	; 2
    1506:	85 83       	std	Z+5, r24	; 0x05
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	9f 81       	ldd	r25, Y+7	; 0x07
    150c:	fc 01       	movw	r30, r24
    150e:	ea 5b       	subi	r30, 0xBA	; 186
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	fc 01       	movw	r30, r24
    1522:	b0 96       	adiw	r30, 0x20	; 32
    1524:	80 81       	ld	r24, Z
    1526:	89 83       	std	Y+1, r24	; 0x01
		usart_data->usart->DATA = data;
    1528:	ee 81       	ldd	r30, Y+6	; 0x06
    152a:	ff 81       	ldd	r31, Y+7	; 0x07
    152c:	01 90       	ld	r0, Z+
    152e:	f0 81       	ld	r31, Z
    1530:	e0 2d       	mov	r30, r0
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	80 83       	st	Z, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	9d 81       	ldd	r25, Y+5	; 0x05
    153a:	fc 01       	movw	r30, r24
    153c:	ed 5b       	subi	r30, 0xBD	; 189
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	28 2f       	mov	r18, r24
    1546:	2f 71       	andi	r18, 0x1F	; 31
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	fc 01       	movw	r30, r24
    154e:	ed 5b       	subi	r30, 0xBD	; 189
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	20 83       	st	Z, r18
	}
}
    1554:	27 96       	adiw	r28, 0x07	; 7
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <__vector_88>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD0_RXC_vect)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	00 90 3b 00 	lds	r0, 0x003B
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	2f 93       	push	r18
    1572:	3f 93       	push	r19
    1574:	4f 93       	push	r20
    1576:	5f 93       	push	r21
    1578:	6f 93       	push	r22
    157a:	7f 93       	push	r23
    157c:	8f 93       	push	r24
    157e:	9f 93       	push	r25
    1580:	af 93       	push	r26
    1582:	bf 93       	push	r27
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_D0);
    1590:	88 e8       	ldi	r24, 0x88	; 136
    1592:	92 e2       	ldi	r25, 0x22	; 34
    1594:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	00 92 3b 00 	sts	0x003B, r0
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <__vector_89>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTD0_DRE_vect)
{
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	00 90 3b 00 	lds	r0, 0x003B
    15d0:	0f 92       	push	r0
    15d2:	11 24       	eor	r1, r1
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	6f 93       	push	r22
    15de:	7f 93       	push	r23
    15e0:	8f 93       	push	r24
    15e2:	9f 93       	push	r25
    15e4:	af 93       	push	r26
    15e6:	bf 93       	push	r27
    15e8:	ef 93       	push	r30
    15ea:	ff 93       	push	r31
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty_D0(&USART_data_D0);
    15f4:	88 e8       	ldi	r24, 0x88	; 136
    15f6:	92 e2       	ldi	r25, 0x22	; 34
    15f8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <USART_DataRegEmpty_D0>
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	00 92 3b 00 	sts	0x003B, r0
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	0f 90       	pop	r0
    1624:	1f 90       	pop	r1
    1626:	18 95       	reti

00001628 <__vector_90>:
/*! \brief Transmission Complete Interrupt service routine.
 *	2011-06-15  ÓÉÎâÁÕ¸ÄÐ´£¬Ôö¼ÓRS485¿ØÖÆ£¬·¢ËÍÍêºó¹Ø¶Ï·¢ËÍÊ¹ÄÜ
 *
 */
ISR(USARTD0_TXC_vect)
{
    1628:	1f 92       	push	r1
    162a:	0f 92       	push	r0
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	0f 92       	push	r0
    1630:	00 90 3b 00 	lds	r0, 0x003B
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	8f 93       	push	r24
    163a:	ef 93       	push	r30
    163c:	ff 93       	push	r31
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	USARTD0_RS485_TX_DIS;
    1646:	e0 e6       	ldi	r30, 0x60	; 96
    1648:	f6 e0       	ldi	r31, 0x06	; 6
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	86 83       	std	Z+6, r24	; 0x06
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	8f 91       	pop	r24
    1658:	0f 90       	pop	r0
    165a:	00 92 3b 00 	sts	0x003B, r0
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <__vector_91>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	00 90 3b 00 	lds	r0, 0x003B
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	2f 93       	push	r18
    167a:	3f 93       	push	r19
    167c:	4f 93       	push	r20
    167e:	5f 93       	push	r21
    1680:	6f 93       	push	r22
    1682:	7f 93       	push	r23
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
    168c:	ef 93       	push	r30
    168e:	ff 93       	push	r31
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_D1);
    1698:	8c e6       	ldi	r24, 0x6C	; 108
    169a:	91 e2       	ldi	r25, 0x21	; 33
    169c:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	0f 90       	pop	r0
    16be:	00 92 3b 00 	sts	0x003B, r0
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti

000016cc <__vector_92>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTD1_DRE_vect)
{
    16cc:	1f 92       	push	r1
    16ce:	0f 92       	push	r0
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	0f 92       	push	r0
    16d4:	00 90 3b 00 	lds	r0, 0x003B
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty(&USART_data_D1);
    16fc:	8c e6       	ldi	r24, 0x6C	; 108
    16fe:	91 e2       	ldi	r25, 0x21	; 33
    1700:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <USART_DataRegEmpty>
}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	ff 91       	pop	r31
    170a:	ef 91       	pop	r30
    170c:	bf 91       	pop	r27
    170e:	af 91       	pop	r26
    1710:	9f 91       	pop	r25
    1712:	8f 91       	pop	r24
    1714:	7f 91       	pop	r23
    1716:	6f 91       	pop	r22
    1718:	5f 91       	pop	r21
    171a:	4f 91       	pop	r20
    171c:	3f 91       	pop	r19
    171e:	2f 91       	pop	r18
    1720:	0f 90       	pop	r0
    1722:	00 92 3b 00 	sts	0x003B, r0
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <__vector_58>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTE0_RXC_vect)
{
    1730:	1f 92       	push	r1
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	0f 92       	push	r0
    1738:	00 90 3b 00 	lds	r0, 0x003B
    173c:	0f 92       	push	r0
    173e:	11 24       	eor	r1, r1
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_E0);
    1760:	8e ed       	ldi	r24, 0xDE	; 222
    1762:	90 e2       	ldi	r25, 0x20	; 32
    1764:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	7f 91       	pop	r23
    177a:	6f 91       	pop	r22
    177c:	5f 91       	pop	r21
    177e:	4f 91       	pop	r20
    1780:	3f 91       	pop	r19
    1782:	2f 91       	pop	r18
    1784:	0f 90       	pop	r0
    1786:	00 92 3b 00 	sts	0x003B, r0
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <__vector_59>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTE0_DRE_vect)
{
    1794:	1f 92       	push	r1
    1796:	0f 92       	push	r0
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	0f 92       	push	r0
    179c:	00 90 3b 00 	lds	r0, 0x003B
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty(&USART_data_E0);
    17c4:	8e ed       	ldi	r24, 0xDE	; 222
    17c6:	90 e2       	ldi	r25, 0x20	; 32
    17c8:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <USART_DataRegEmpty>
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	00 92 3b 00 	sts	0x003B, r0
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <__vector_61>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTE1_RXC_vect)
{
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	00 90 3b 00 	lds	r0, 0x003B
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	USART_RXComplete(&USART_data_E1);
    1828:	8a ef       	ldi	r24, 0xFA	; 250
    182a:	91 e2       	ldi	r25, 0x21	; 33
    182c:	0e 94 21 17 	call	0x2e42	; 0x2e42 <USART_RXComplete>
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	00 92 3b 00 	sts	0x003B, r0
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_62>:
 *  Data register empty  interrupt service routine.
 *  Calls the common data register empty complete handler with pointer to the
 *  correct USART as argument.
 */
ISR(USARTE1_DRE_vect)
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	00 90 3b 00 	lds	r0, 0x003B
    1868:	0f 92       	push	r0
    186a:	11 24       	eor	r1, r1
    186c:	2f 93       	push	r18
    186e:	3f 93       	push	r19
    1870:	4f 93       	push	r20
    1872:	5f 93       	push	r21
    1874:	6f 93       	push	r22
    1876:	7f 93       	push	r23
    1878:	8f 93       	push	r24
    187a:	9f 93       	push	r25
    187c:	af 93       	push	r26
    187e:	bf 93       	push	r27
    1880:	ef 93       	push	r30
    1882:	ff 93       	push	r31
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	USART_DataRegEmpty(&USART_data_E1);
    188c:	8a ef       	ldi	r24, 0xFA	; 250
    188e:	91 e2       	ldi	r25, 0x21	; 33
    1890:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <USART_DataRegEmpty>
}
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	ff 91       	pop	r31
    189a:	ef 91       	pop	r30
    189c:	bf 91       	pop	r27
    189e:	af 91       	pop	r26
    18a0:	9f 91       	pop	r25
    18a2:	8f 91       	pop	r24
    18a4:	7f 91       	pop	r23
    18a6:	6f 91       	pop	r22
    18a8:	5f 91       	pop	r21
    18aa:	4f 91       	pop	r20
    18ac:	3f 91       	pop	r19
    18ae:	2f 91       	pop	r18
    18b0:	0f 90       	pop	r0
    18b2:	00 92 3b 00 	sts	0x003B, r0
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <ADC_CalibrationValues_Load>:
 *  register. The calibration data reduces the non-linearity error in the adc.
 *
 *  \param  adc          Pointer to ADC module register section.
 */
void ADC_CalibrationValues_Load(ADC_t * adc)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <ADC_CalibrationValues_Load+0x6>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	9a 83       	std	Y+2, r25	; 0x02
	if(&ADCA == adc){
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	22 e0       	ldi	r18, 0x02	; 2
    18d4:	80 30       	cpi	r24, 0x00	; 0
    18d6:	92 07       	cpc	r25, r18
    18d8:	69 f4       	brne	.+26     	; 0x18f4 <ADC_CalibrationValues_Load+0x34>
		 /* Get ADCACAL0 from production signature . */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL0_offset );
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <SP_ReadCalibrationByte>
    18e0:	e9 81       	ldd	r30, Y+1	; 0x01
    18e2:	fa 81       	ldd	r31, Y+2	; 0x02
    18e4:	84 87       	std	Z+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCACAL1_offset );
    18e6:	81 e2       	ldi	r24, 0x21	; 33
    18e8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <SP_ReadCalibrationByte>
    18ec:	e9 81       	ldd	r30, Y+1	; 0x01
    18ee:	fa 81       	ldd	r31, Y+2	; 0x02
    18f0:	85 87       	std	Z+13, r24	; 0x0d
    18f2:	0c c0       	rjmp	.+24     	; 0x190c <ADC_CalibrationValues_Load+0x4c>
	}else {
		/* Get ADCBCAL0 from production signature  */
		adc->CALL = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL0_offset );
    18f4:	84 e2       	ldi	r24, 0x24	; 36
    18f6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <SP_ReadCalibrationByte>
    18fa:	e9 81       	ldd	r30, Y+1	; 0x01
    18fc:	fa 81       	ldd	r31, Y+2	; 0x02
    18fe:	84 87       	std	Z+12, r24	; 0x0c
		adc->CALH = SP_ReadCalibrationByte( PROD_SIGNATURES_START + ADCBCAL1_offset );
    1900:	85 e2       	ldi	r24, 0x25	; 37
    1902:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <SP_ReadCalibrationByte>
    1906:	e9 81       	ldd	r30, Y+1	; 0x01
    1908:	fa 81       	ldd	r31, Y+2	; 0x02
    190a:	85 87       	std	Z+13, r24	; 0x0d
	}
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <ADC_ResultCh_GetWord_Unsigned>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  offset  Unsigned offset value to subtract.
 *  \return  The unsigned Conversion result with the offset substracted.
 */
uint16_t ADC_ResultCh_GetWord_Unsigned(ADC_CH_t * adc_ch, uint8_t offset)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	25 97       	sbiw	r28, 0x05	; 5
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	8b 83       	std	Y+3, r24	; 0x03
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	6d 83       	std	Y+5, r22	; 0x05
  	uint16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    192a:	eb 81       	ldd	r30, Y+3	; 0x03
    192c:	fc 81       	ldd	r31, Y+4	; 0x04
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - offset;
    1932:	eb 81       	ldd	r30, Y+3	; 0x03
    1934:	fc 81       	ldd	r31, Y+4	; 0x04
    1936:	24 81       	ldd	r18, Z+4	; 0x04
    1938:	35 81       	ldd	r19, Z+5	; 0x05
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a9 01       	movw	r20, r18
    1942:	48 1b       	sub	r20, r24
    1944:	59 0b       	sbc	r21, r25
    1946:	ca 01       	movw	r24, r20
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	9a 83       	std	Y+2, r25	; 0x02

	return answer;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1950:	25 96       	adiw	r28, 0x05	; 5
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <ADC_ResultCh_GetWord_Signed>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \param  signedOffset  Offset value to subtract.
 *  \return  The signed Conversion result with the offset substracted.
 */
int16_t ADC_ResultCh_GetWord_Signed(ADC_CH_t * adc_ch, int8_t signedOffset)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	25 97       	sbiw	r28, 0x05	; 5
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	6d 83       	std	Y+5, r22	; 0x05
  	int16_t answer;

	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1970:	eb 81       	ldd	r30, Y+3	; 0x03
    1972:	fc 81       	ldd	r31, Y+4	; 0x04
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	answer = adc_ch->RES - signedOffset;
    1978:	eb 81       	ldd	r30, Y+3	; 0x03
    197a:	fc 81       	ldd	r31, Y+4	; 0x04
    197c:	24 81       	ldd	r18, Z+4	; 0x04
    197e:	35 81       	ldd	r19, Z+5	; 0x05
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	99 27       	eor	r25, r25
    1984:	87 fd       	sbrc	r24, 7
    1986:	90 95       	com	r25
    1988:	a9 01       	movw	r20, r18
    198a:	48 1b       	sub	r20, r24
    198c:	59 0b       	sbc	r21, r25
    198e:	ca 01       	movw	r24, r20
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	9a 83       	std	Y+2, r25	; 0x02

	return answer;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1998:	25 96       	adiw	r28, 0x05	; 5
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <ADC_ResultCh_GetWord>:
 *
 *  \param  adc_ch  Pointer to ADC channel register section.
 *  \return  Signed conversion result.
 */
uint16_t ADC_ResultCh_GetWord(ADC_CH_t * adc_ch)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <ADC_ResultCh_GetWord+0x6>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	9a 83       	std	Y+2, r25	; 0x02
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    19b2:	e9 81       	ldd	r30, Y+1	; 0x01
    19b4:	fa 81       	ldd	r31, Y+2	; 0x02
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	83 83       	std	Z+3, r24	; 0x03

	/* Return result register contents*/
	return adc_ch->RES;;
    19ba:	e9 81       	ldd	r30, Y+1	; 0x01
    19bc:	fa 81       	ldd	r31, Y+2	; 0x02
    19be:	84 81       	ldd	r24, Z+4	; 0x04
    19c0:	95 81       	ldd	r25, Z+5	; 0x05
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <ADC_ResultCh_GetLowByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  Low byte of conversion result.
 */
uint8_t ADC_ResultCh_GetLowByte(ADC_CH_t * adc_ch)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <ADC_ResultCh_GetLowByte+0x6>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	9a 83       	std	Y+2, r25	; 0x02
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    19da:	e9 81       	ldd	r30, Y+1	; 0x01
    19dc:	fa 81       	ldd	r31, Y+2	; 0x02
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	83 83       	std	Z+3, r24	; 0x03
	/* Return result register contents*/
	return adc_ch->RESL;
    19e2:	e9 81       	ldd	r30, Y+1	; 0x01
    19e4:	fa 81       	ldd	r31, Y+2	; 0x02
    19e6:	84 81       	ldd	r24, Z+4	; 0x04
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <ADC_ResultCh_GetHighByte>:
 *  \param  adc_ch  Pointer to ADC channel register section.
 *
 *  \return  High byte of conversion result.
 */
uint8_t ADC_ResultCh_GetHighByte(ADC_CH_t * adc_ch)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <ADC_ResultCh_GetHighByte+0x6>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	9a 83       	std	Y+2, r25	; 0x02
	/* Clear interrupt flag.*/
	adc_ch->INTFLAGS = ADC_CH_CHIF_bm;
    1a00:	e9 81       	ldd	r30, Y+1	; 0x01
    1a02:	fa 81       	ldd	r31, Y+2	; 0x02
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	83 83       	std	Z+3, r24	; 0x03

	/* Return low byte result register contents.*/
	return adc_ch->RESH;
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	85 81       	ldd	r24, Z+5	; 0x05
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <ADC_Wait_8MHz>:
 *        than 8 MHz use the ADC_wait_32MHz function.
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_8MHz(ADC_t * adc)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	6b 97       	sbiw	r28, 0x1b	; 27
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	8a 8f       	std	Y+26, r24	; 0x1a
    1a28:	9b 8f       	std	Y+27, r25	; 0x1b
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    1a2a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a2c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1a2e:	84 81       	ldd	r24, Z+4	; 0x04
    1a30:	89 8f       	std	Y+25, r24	; 0x19

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV4_gc;
    1a32:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a34:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1a36:	14 82       	std	Z+4, r1	; 0x04
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e8       	ldi	r26, 0x80	; 128
    1a3e:	b2 e4       	ldi	r27, 0x42	; 66
    1a40:	8d 8b       	std	Y+21, r24	; 0x15
    1a42:	9e 8b       	std	Y+22, r25	; 0x16
    1a44:	af 8b       	std	Y+23, r26	; 0x17
    1a46:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a50:	2b ea       	ldi	r18, 0xAB	; 171
    1a52:	3a ea       	ldi	r19, 0xAA	; 170
    1a54:	4a e2       	ldi	r20, 0x2A	; 42
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	89 8b       	std	Y+17, r24	; 0x11
    1a62:	9a 8b       	std	Y+18, r25	; 0x12
    1a64:	ab 8b       	std	Y+19, r26	; 0x13
    1a66:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a68:	69 89       	ldd	r22, Y+17	; 0x11
    1a6a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	1c f4       	brge	.+6      	; 0x1a86 <ADC_Wait_8MHz+0x6e>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	88 8b       	std	Y+16, r24	; 0x10
    1a84:	91 c0       	rjmp	.+290    	; 0x1ba8 <ADC_Wait_8MHz+0x190>
	else if (__tmp > 255)
    1a86:	69 89       	ldd	r22, Y+17	; 0x11
    1a88:	7a 89       	ldd	r23, Y+18	; 0x12
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	53 e4       	ldi	r21, 0x43	; 67
    1a96:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	0c f0       	brlt	.+2      	; 0x1aa0 <ADC_Wait_8MHz+0x88>
    1a9e:	7b c0       	rjmp	.+246    	; 0x1b96 <ADC_Wait_8MHz+0x17e>
	{
		_delay_ms(__us / 1000.0);
    1aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	54 e4       	ldi	r21, 0x44	; 68
    1ab0:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <__divsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8c 87       	std	Y+12, r24	; 0x0c
    1aba:	9d 87       	std	Y+13, r25	; 0x0d
    1abc:	ae 87       	std	Y+14, r26	; 0x0e
    1abe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ac2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a ef       	ldi	r20, 0xFA	; 250
    1ace:	53 e4       	ldi	r21, 0x43	; 67
    1ad0:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	88 87       	std	Y+8, r24	; 0x08
    1ada:	99 87       	std	Y+9, r25	; 0x09
    1adc:	aa 87       	std	Y+10, r26	; 0x0a
    1ade:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ae0:	68 85       	ldd	r22, Y+8	; 0x08
    1ae2:	79 85       	ldd	r23, Y+9	; 0x09
    1ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <ADC_Wait_8MHz+0xea>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	8e 83       	std	Y+6, r24	; 0x06
    1afe:	9f 83       	std	Y+7, r25	; 0x07
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <ADC_Wait_8MHz+0x168>
	else if (__tmp > 65535)
    1b02:	68 85       	ldd	r22, Y+8	; 0x08
    1b04:	79 85       	ldd	r23, Y+9	; 0x09
    1b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <ADC_Wait_8MHz+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b20:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	51 e4       	ldi	r21, 0x41	; 65
    1b2a:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8e 83       	std	Y+6, r24	; 0x06
    1b40:	9f 83       	std	Y+7, r25	; 0x07
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <ADC_Wait_8MHz+0x14a>
    1b44:	82 e3       	ldi	r24, 0x32	; 50
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	8c 83       	std	Y+4, r24	; 0x04
    1b4a:	9d 83       	std	Y+5, r25	; 0x05
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <ADC_Wait_8MHz+0x138>
    1b54:	8c 83       	std	Y+4, r24	; 0x04
    1b56:	9d 83       	std	Y+5, r25	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	8e 83       	std	Y+6, r24	; 0x06
    1b60:	9f 83       	std	Y+7, r25	; 0x07
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	8e 81       	ldd	r24, Y+6	; 0x06
    1b64:	9f 81       	ldd	r25, Y+7	; 0x07
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <ADC_Wait_8MHz+0x12c>
    1b6a:	24 c0       	rjmp	.+72     	; 0x1bb4 <ADC_Wait_8MHz+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	68 85       	ldd	r22, Y+8	; 0x08
    1b6e:	79 85       	ldd	r23, Y+9	; 0x09
    1b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b74:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8e 83       	std	Y+6, r24	; 0x06
    1b7e:	9f 83       	std	Y+7, r25	; 0x07
    1b80:	8e 81       	ldd	r24, Y+6	; 0x06
    1b82:	9f 81       	ldd	r25, Y+7	; 0x07
    1b84:	8a 83       	std	Y+2, r24	; 0x02
    1b86:	9b 83       	std	Y+3, r25	; 0x03
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <ADC_Wait_8MHz+0x174>
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	9b 83       	std	Y+3, r25	; 0x03
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <ADC_Wait_8MHz+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b96:	69 89       	ldd	r22, Y+17	; 0x11
    1b98:	7a 89       	ldd	r23, Y+18	; 0x12
    1b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	88 8b       	std	Y+16, r24	; 0x10
    1ba8:	88 89       	ldd	r24, Y+16	; 0x10
    1baa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	8a 95       	dec	r24
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <ADC_Wait_8MHz+0x196>
    1bb2:	89 83       	std	Y+1, r24	; 0x01

	/* Wait 4*COMMON_MODE_CYCLES for common mode to settle. */
	delay_us(4*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    1bb4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bb6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bb8:	89 8d       	ldd	r24, Y+25	; 0x19
    1bba:	84 83       	std	Z+4, r24	; 0x04
}
    1bbc:	6b 96       	adiw	r28, 0x1b	; 27
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <ADC_Wait_32MHz>:
 *        device goes into sleep (not Idle sleep mode).
 *
 *  \param  adc Pointer to ADC module register section.
 */
void ADC_Wait_32MHz(ADC_t * adc)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	6b 97       	sbiw	r28, 0x1b	; 27
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	8a 8f       	std	Y+26, r24	; 0x1a
    1bd8:	9b 8f       	std	Y+27, r25	; 0x1b
  	/* Store old prescaler value. */
  	uint8_t prescaler_val = adc->PRESCALER;
    1bda:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bdc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1bde:	84 81       	ldd	r24, Z+4	; 0x04
    1be0:	89 8f       	std	Y+25, r24	; 0x19

	/* Set prescaler value to minimum value. */
	adc->PRESCALER = ADC_PRESCALER_DIV8_gc;
    1be2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1be4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	84 83       	std	Z+4, r24	; 0x04
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b3 e4       	ldi	r27, 0x43	; 67
    1bf2:	8d 8b       	std	Y+21, r24	; 0x15
    1bf4:	9e 8b       	std	Y+22, r25	; 0x16
    1bf6:	af 8b       	std	Y+23, r26	; 0x17
    1bf8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	2b ea       	ldi	r18, 0xAB	; 171
    1c04:	3a ea       	ldi	r19, 0xAA	; 170
    1c06:	4a e2       	ldi	r20, 0x2A	; 42
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	89 8b       	std	Y+17, r24	; 0x11
    1c14:	9a 8b       	std	Y+18, r25	; 0x12
    1c16:	ab 8b       	std	Y+19, r26	; 0x13
    1c18:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c1a:	69 89       	ldd	r22, Y+17	; 0x11
    1c1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	1c f4       	brge	.+6      	; 0x1c38 <ADC_Wait_32MHz+0x70>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	88 8b       	std	Y+16, r24	; 0x10
    1c36:	91 c0       	rjmp	.+290    	; 0x1d5a <ADC_Wait_32MHz+0x192>
	else if (__tmp > 255)
    1c38:	69 89       	ldd	r22, Y+17	; 0x11
    1c3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	53 e4       	ldi	r21, 0x43	; 67
    1c48:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <ADC_Wait_32MHz+0x8a>
    1c50:	7b c0       	rjmp	.+246    	; 0x1d48 <ADC_Wait_32MHz+0x180>
	{
		_delay_ms(__us / 1000.0);
    1c52:	6d 89       	ldd	r22, Y+21	; 0x15
    1c54:	7e 89       	ldd	r23, Y+22	; 0x16
    1c56:	8f 89       	ldd	r24, Y+23	; 0x17
    1c58:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <__divsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8c 87       	std	Y+12, r24	; 0x0c
    1c6c:	9d 87       	std	Y+13, r25	; 0x0d
    1c6e:	ae 87       	std	Y+14, r26	; 0x0e
    1c70:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a ef       	ldi	r20, 0xFA	; 250
    1c80:	53 e4       	ldi	r21, 0x43	; 67
    1c82:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	88 87       	std	Y+8, r24	; 0x08
    1c8c:	99 87       	std	Y+9, r25	; 0x09
    1c8e:	aa 87       	std	Y+10, r26	; 0x0a
    1c90:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c92:	68 85       	ldd	r22, Y+8	; 0x08
    1c94:	79 85       	ldd	r23, Y+9	; 0x09
    1c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__ltsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <ADC_Wait_32MHz+0xec>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	8e 83       	std	Y+6, r24	; 0x06
    1cb0:	9f 83       	std	Y+7, r25	; 0x07
    1cb2:	3f c0       	rjmp	.+126    	; 0x1d32 <ADC_Wait_32MHz+0x16a>
	else if (__tmp > 65535)
    1cb4:	68 85       	ldd	r22, Y+8	; 0x08
    1cb6:	79 85       	ldd	r23, Y+9	; 0x09
    1cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__gtsf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	4c f5       	brge	.+82     	; 0x1d1e <ADC_Wait_32MHz+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ccc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e2       	ldi	r20, 0x20	; 32
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8e 83       	std	Y+6, r24	; 0x06
    1cf2:	9f 83       	std	Y+7, r25	; 0x07
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <ADC_Wait_32MHz+0x14c>
    1cf6:	82 e3       	ldi	r24, 0x32	; 50
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	8c 83       	std	Y+4, r24	; 0x04
    1cfc:	9d 83       	std	Y+5, r25	; 0x05
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	9d 81       	ldd	r25, Y+5	; 0x05
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <ADC_Wait_32MHz+0x13a>
    1d06:	8c 83       	std	Y+4, r24	; 0x04
    1d08:	9d 83       	std	Y+5, r25	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	8e 83       	std	Y+6, r24	; 0x06
    1d12:	9f 83       	std	Y+7, r25	; 0x07
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	69 f7       	brne	.-38     	; 0x1cf6 <ADC_Wait_32MHz+0x12e>
    1d1c:	24 c0       	rjmp	.+72     	; 0x1d66 <ADC_Wait_32MHz+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	68 85       	ldd	r22, Y+8	; 0x08
    1d20:	79 85       	ldd	r23, Y+9	; 0x09
    1d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d26:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8e 83       	std	Y+6, r24	; 0x06
    1d30:	9f 83       	std	Y+7, r25	; 0x07
    1d32:	8e 81       	ldd	r24, Y+6	; 0x06
    1d34:	9f 81       	ldd	r25, Y+7	; 0x07
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <ADC_Wait_32MHz+0x176>
    1d42:	8a 83       	std	Y+2, r24	; 0x02
    1d44:	9b 83       	std	Y+3, r25	; 0x03
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <ADC_Wait_32MHz+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d48:	69 89       	ldd	r22, Y+17	; 0x11
    1d4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	88 8b       	std	Y+16, r24	; 0x10
    1d5a:	88 89       	ldd	r24, Y+16	; 0x10
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	8a 95       	dec	r24
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <ADC_Wait_32MHz+0x198>
    1d64:	89 83       	std	Y+1, r24	; 0x01

	/* wait 8*COMMON_MODE_CYCLES for common mode to settle*/
	delay_us(8*COMMON_MODE_CYCLES);

	/* Set prescaler to old value*/
	adc->PRESCALER = prescaler_val;
    1d66:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1d68:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1d6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d6c:	84 83       	std	Z+4, r24	; 0x04
}
    1d6e:	6b 96       	adiw	r28, 0x1b	; 27
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <ADC_Offset_Get_Unsigned>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
uint8_t ADC_Offset_Get_Unsigned(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	2a 97       	sbiw	r28, 0x0a	; 10
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	6f 83       	std	Y+7, r22	; 0x07
    1d8e:	78 87       	std	Y+8, r23	; 0x08
    1d90:	49 87       	std	Y+9, r20	; 0x09
    if (oversampling)
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	88 23       	and	r24, r24
    1d96:	79 f1       	breq	.+94     	; 0x1df6 <ADC_Offset_Get_Unsigned+0x7c>
    {
      uint16_t offset=0;
    1d98:	1b 82       	std	Y+3, r1	; 0x03
    1d9a:	1c 82       	std	Y+4, r1	; 0x04
      uint8_t i = 0;
    1d9c:	1a 82       	std	Y+2, r1	; 0x02
      for (i=0; i<4; i++)
    1d9e:	1a 82       	std	Y+2, r1	; 0x02
    1da0:	1f c0       	rjmp	.+62     	; 0x1de0 <ADC_Offset_Get_Unsigned+0x66>
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    1da2:	ef 81       	ldd	r30, Y+7	; 0x07
    1da4:	f8 85       	ldd	r31, Y+8	; 0x08
    1da6:	80 81       	ld	r24, Z
    1da8:	80 68       	ori	r24, 0x80	; 128
    1daa:	ef 81       	ldd	r30, Y+7	; 0x07
    1dac:	f8 85       	ldd	r31, Y+8	; 0x08
    1dae:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    1db0:	ef 81       	ldd	r30, Y+7	; 0x07
    1db2:	f8 85       	ldd	r31, Y+8	; 0x08
    1db4:	83 81       	ldd	r24, Z+3	; 0x03
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	b9 f3       	breq	.-18     	; 0x1db0 <ADC_Offset_Get_Unsigned+0x36>
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
    1dc2:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc4:	98 85       	ldd	r25, Y+8	; 0x08
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ADC_ResultCh_GetWord_Unsigned>
    1dcc:	9c 01       	movw	r18, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
{
    if (oversampling)
    {
      uint16_t offset=0;
      uint8_t i = 0;
      for (i=0; i<4; i++)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	8a 83       	std	Y+2, r24	; 0x02
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	f0 f2       	brcs	.-68     	; 0x1da2 <ADC_Offset_Get_Unsigned+0x28>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Unsigned(ch, 0x00);
      }
      return ((uint8_t)(offset>>2));
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	96 95       	lsr	r25
    1dec:	87 95       	ror	r24
    1dee:	96 95       	lsr	r25
    1df0:	87 95       	ror	r24
    1df2:	8a 87       	std	Y+10, r24	; 0x0a
    1df4:	18 c0       	rjmp	.+48     	; 0x1e26 <ADC_Offset_Get_Unsigned+0xac>
    }
    else
    {        
      uint8_t offset=0;
    1df6:	19 82       	std	Y+1, r1	; 0x01
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    1df8:	ef 81       	ldd	r30, Y+7	; 0x07
    1dfa:	f8 85       	ldd	r31, Y+8	; 0x08
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 68       	ori	r24, 0x80	; 128
    1e00:	ef 81       	ldd	r30, Y+7	; 0x07
    1e02:	f8 85       	ldd	r31, Y+8	; 0x08
    1e04:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    1e06:	ef 81       	ldd	r30, Y+7	; 0x07
    1e08:	f8 85       	ldd	r31, Y+8	; 0x08
    1e0a:	83 81       	ldd	r24, Z+3	; 0x03
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	81 70       	andi	r24, 0x01	; 1
    1e12:	90 70       	andi	r25, 0x00	; 0
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	b9 f3       	breq	.-18     	; 0x1e06 <ADC_Offset_Get_Unsigned+0x8c>
      offset = (uint8_t)ADC_ResultCh_GetWord(ch);
    1e18:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1a:	98 85       	ldd	r25, Y+8	; 0x08
    1e1c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <ADC_ResultCh_GetWord>
    1e20:	89 83       	std	Y+1, r24	; 0x01
      
      return offset;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	8a 87       	std	Y+10, r24	; 0x0a
    1e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    }
}
    1e28:	2a 96       	adiw	r28, 0x0a	; 10
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <ADC_Offset_Get_Signed>:
 *  \param oversampling false for one measurement. true for averaging several measurements.
 *
 *  \return Offset on the selected ADC
 */
int8_t ADC_Offset_Get_Signed(ADC_t * adc, ADC_CH_t *ch, bool oversampling)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	6f 83       	std	Y+7, r22	; 0x07
    1e48:	78 87       	std	Y+8, r23	; 0x08
    1e4a:	49 87       	std	Y+9, r20	; 0x09
    if (oversampling)
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	88 23       	and	r24, r24
    1e50:	e1 f1       	breq	.+120    	; 0x1eca <ADC_Offset_Get_Signed+0x96>
    {
      int16_t offset=0;
    1e52:	1b 82       	std	Y+3, r1	; 0x03
    1e54:	1c 82       	std	Y+4, r1	; 0x04
      uint8_t i = 0;
    1e56:	1a 82       	std	Y+2, r1	; 0x02
      for (i=0; i<4; i++)
    1e58:	1a 82       	std	Y+2, r1	; 0x02
    1e5a:	1f c0       	rjmp	.+62     	; 0x1e9a <ADC_Offset_Get_Signed+0x66>
      {
        /* Do one conversion to find offset. */
        ADC_Ch_Conversion_Start(ch);
    1e5c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e5e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e60:	80 81       	ld	r24, Z
    1e62:	80 68       	ori	r24, 0x80	; 128
    1e64:	ef 81       	ldd	r30, Y+7	; 0x07
    1e66:	f8 85       	ldd	r31, Y+8	; 0x08
    1e68:	80 83       	st	Z, r24
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
    1e6a:	ef 81       	ldd	r30, Y+7	; 0x07
    1e6c:	f8 85       	ldd	r31, Y+8	; 0x08
    1e6e:	83 81       	ldd	r24, Z+3	; 0x03
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	81 70       	andi	r24, 0x01	; 1
    1e76:	90 70       	andi	r25, 0x00	; 0
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	b9 f3       	breq	.-18     	; 0x1e6a <ADC_Offset_Get_Signed+0x36>
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
    1e7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e7e:	98 85       	ldd	r25, Y+8	; 0x08
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
    1e86:	9c 01       	movw	r18, r24
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	82 0f       	add	r24, r18
    1e8e:	93 1f       	adc	r25, r19
    1e90:	8b 83       	std	Y+3, r24	; 0x03
    1e92:	9c 83       	std	Y+4, r25	; 0x04
{
    if (oversampling)
    {
      int16_t offset=0;
      uint8_t i = 0;
      for (i=0; i<4; i++)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	f0 f2       	brcs	.-68     	; 0x1e5c <ADC_Offset_Get_Signed+0x28>
    
        do{
        }while(!ADC_Ch_Conversion_Complete(ch));
        offset += ADC_ResultCh_GetWord_Signed(ch, 0x00);
      }
      return ((int8_t)(offset/4));
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	8b 87       	std	Y+11, r24	; 0x0b
    1ea6:	9c 87       	std	Y+12, r25	; 0x0c
    1ea8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eaa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eac:	99 23       	and	r25, r25
    1eae:	2c f4       	brge	.+10     	; 0x1eba <ADC_Offset_Get_Signed+0x86>
    1eb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1eb2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eb4:	03 96       	adiw	r24, 0x03	; 3
    1eb6:	8b 87       	std	Y+11, r24	; 0x0b
    1eb8:	9c 87       	std	Y+12, r25	; 0x0c
    1eba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ebc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ebe:	95 95       	asr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	95 95       	asr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	8a 87       	std	Y+10, r24	; 0x0a
    1ec8:	19 c0       	rjmp	.+50     	; 0x1efc <ADC_Offset_Get_Signed+0xc8>
    }
    else
    {        
      int8_t offset=0;
    1eca:	19 82       	std	Y+1, r1	; 0x01
      
      /* Do one conversion to find offset. */
      ADC_Ch_Conversion_Start(ch);
    1ecc:	ef 81       	ldd	r30, Y+7	; 0x07
    1ece:	f8 85       	ldd	r31, Y+8	; 0x08
    1ed0:	80 81       	ld	r24, Z
    1ed2:	80 68       	ori	r24, 0x80	; 128
    1ed4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ed6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ed8:	80 83       	st	Z, r24
  
      do{
      }while(!ADC_Ch_Conversion_Complete(ch));
    1eda:	ef 81       	ldd	r30, Y+7	; 0x07
    1edc:	f8 85       	ldd	r31, Y+8	; 0x08
    1ede:	83 81       	ldd	r24, Z+3	; 0x03
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	81 70       	andi	r24, 0x01	; 1
    1ee6:	90 70       	andi	r25, 0x00	; 0
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	b9 f3       	breq	.-18     	; 0x1eda <ADC_Offset_Get_Signed+0xa6>
      offset = (uint8_t)ADC_ResultCh_GetWord_Signed(ch, 0x00);
    1eec:	8f 81       	ldd	r24, Y+7	; 0x07
    1eee:	98 85       	ldd	r25, Y+8	; 0x08
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	0e 94 ae 0c 	call	0x195c	; 0x195c <ADC_ResultCh_GetWord_Signed>
    1ef6:	89 83       	std	Y+1, r24	; 0x01
      
      return offset;
    1ef8:	99 81       	ldd	r25, Y+1	; 0x01
    1efa:	9a 87       	std	Y+10, r25	; 0x0a
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    }
}
    1efe:	2c 96       	adiw	r28, 0x0c	; 12
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <SP_ReadCalibrationByte>:
 *  \param index The index to the calibration byte.
 *
 *  \return Calibration byte.
 */
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	25 97       	sbiw	r28, 0x05	; 5
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t result;

	/* Load the NVM Command register to read the calibration row. */
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1f1a:	ea ec       	ldi	r30, 0xCA	; 202
    1f1c:	f1 e0       	ldi	r31, 0x01	; 1
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	80 83       	st	Z, r24
 	result = pgm_read_byte(index);
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f30:	84 91       	lpm	r24, Z+
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	8c 83       	std	Y+4, r24	; 0x04

	/* Clean up NVM Command register. */
 	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1f38:	ea ec       	ldi	r30, 0xCA	; 202
    1f3a:	f1 e0       	ldi	r31, 0x01	; 1
    1f3c:	10 82       	st	Z, r1

	return result;
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f40:	25 96       	adiw	r28, 0x05	; 5
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    1f4c:	0f 93       	push	r16
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	26 97       	sbiw	r28, 0x06	; 6
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	8c 83       	std	Y+4, r24	; 0x04
    1f5e:	9d 83       	std	Y+5, r25	; 0x05
    1f60:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    1f62:	ef e3       	ldi	r30, 0x3F	; 63
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8b 83       	std	Y+3, r24	; 0x03
    1f6a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
    1f74:	eb e3       	ldi	r30, 0x3B	; 59
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	10 82       	st	Z, r1
#endif
	asm volatile(
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f80:	fc 01       	movw	r30, r24
    1f82:	08 ed       	ldi	r16, 0xD8	; 216
    1f84:	04 bf       	out	0x34, r16	; 52
    1f86:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    1f88:	ef e3       	ldi	r30, 0x3F	; 63
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	80 83       	st	Z, r24
#endif
}
    1f90:	26 96       	adiw	r28, 0x06	; 6
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	0f 91       	pop	r16
    1f9c:	08 95       	ret

00001f9e <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	26 97       	sbiw	r28, 0x06	; 6
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	6a 83       	std	Y+2, r22	; 0x02
    1fb0:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
    1fb2:	80 e5       	ldi	r24, 0x50	; 80
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	88 23       	and	r24, r24
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <CLKSYS_XOSC_Config+0x28>
    1fc0:	90 e2       	ldi	r25, 0x20	; 32
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <CLKSYS_XOSC_Config+0x2a>
    1fc6:	1c 82       	std	Y+4, r1	; 0x04
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	98 2b       	or	r25, r24
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	89 2b       	or	r24, r25
    1fd2:	ed 81       	ldd	r30, Y+5	; 0x05
    1fd4:	fe 81       	ldd	r31, Y+6	; 0x06
    1fd6:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    1fd8:	26 96       	adiw	r28, 0x06	; 6
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <CLKSYS_PLL_Config+0x6>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	8f 71       	andi	r24, 0x1F	; 31
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    1ff8:	e0 e5       	ldi	r30, 0x50	; 80
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	99 81       	ldd	r25, Y+1	; 0x01
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	89 2b       	or	r24, r25
    2002:	85 83       	std	Z+5, r24	; 0x05
}
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <CLKSYS_Disable+0x6>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
    201a:	a0 e5       	ldi	r26, 0x50	; 80
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e0 e5       	ldi	r30, 0x50	; 80
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	98 2f       	mov	r25, r24
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	80 95       	com	r24
    202a:	89 23       	and	r24, r25
    202c:	8c 93       	st	X, r24
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    202e:	e0 e5       	ldi	r30, 0x50	; 80
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	90 81       	ld	r25, Z
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	89 23       	and	r24, r25
    2038:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
    203a:	89 81       	ldd	r24, Y+1	; 0x01
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <CLKSYS_Prescalers_Config+0x6>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	89 2b       	or	r24, r25
    205c:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
    205e:	81 e4       	ldi	r24, 0x41	; 65
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	69 81       	ldd	r22, Y+1	; 0x01
    2064:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <CCPWrite>
}
    2068:	23 96       	adiw	r28, 0x03	; 3
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <CLKSYS_Main_ClockSource_Select+0x6>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    2080:	e0 e4       	ldi	r30, 0x40	; 64
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	98 2f       	mov	r25, r24
    2088:	98 7f       	andi	r25, 0xF8	; 248
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	89 2b       	or	r24, r25
    208e:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
    2090:	80 e4       	ldi	r24, 0x40	; 64
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	69 81       	ldd	r22, Y+1	; 0x01
    2096:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    209a:	e0 e4       	ldi	r30, 0x40	; 64
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	90 81       	ld	r25, Z
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	89 23       	and	r24, r25
    20a4:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <CLKSYS_RTC_ClockSource_Enable>:
 *  and enables clock signal routing to the RTC module.
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	89 83       	std	Y+1, r24	; 0x01
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    20be:	a0 e4       	ldi	r26, 0x40	; 64
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e0 e4       	ldi	r30, 0x40	; 64
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	83 81       	ldd	r24, Z+3	; 0x03
    20c8:	98 2f       	mov	r25, r24
    20ca:	91 7f       	andi	r25, 0xF1	; 241
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	89 2b       	or	r24, r25
    20d0:	81 60       	ori	r24, 0x01	; 1
    20d2:	13 96       	adiw	r26, 0x03	; 3
    20d4:	8c 93       	st	X, r24
    20d6:	13 97       	sbiw	r26, 0x03	; 3
	              clockSource |
	              CLK_RTCEN_bm;
}
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <CLKSYS_AutoCalibration_Enable>:
 *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	26 97       	sbiw	r28, 0x06	; 6
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	6a 83       	std	Y+2, r22	; 0x02
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    20f2:	80 e5       	ldi	r24, 0x50	; 80
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	e0 e5       	ldi	r30, 0x50	; 80
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	86 81       	ldd	r24, Z+6	; 0x06
    2100:	98 2f       	mov	r25, r24
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	80 95       	com	r24
    2106:	e9 2f       	mov	r30, r25
    2108:	e8 23       	and	r30, r24
    210a:	ec 83       	std	Y+4, r30	; 0x04
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	88 23       	and	r24, r24
    2110:	19 f0       	breq	.+6      	; 0x2118 <CLKSYS_AutoCalibration_Enable+0x38>
    2112:	f9 81       	ldd	r31, Y+1	; 0x01
    2114:	fb 83       	std	Y+3, r31	; 0x03
    2116:	01 c0       	rjmp	.+2      	; 0x211a <CLKSYS_AutoCalibration_Enable+0x3a>
    2118:	1b 82       	std	Y+3, r1	; 0x03
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	2b 81       	ldd	r18, Y+3	; 0x03
    211e:	82 2b       	or	r24, r18
    2120:	ed 81       	ldd	r30, Y+5	; 0x05
    2122:	fe 81       	ldd	r31, Y+6	; 0x06
    2124:	86 83       	std	Z+6, r24	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	41 f4       	brne	.+16     	; 0x213c <CLKSYS_AutoCalibration_Enable+0x5c>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    212c:	a8 e6       	ldi	r26, 0x68	; 104
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e8 e6       	ldi	r30, 0x68	; 104
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	81 60       	ori	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
    213a:	0a c0       	rjmp	.+20     	; 0x2150 <CLKSYS_AutoCalibration_Enable+0x70>
	} else if (clkSource == OSC_RC32MCREF_bm) {
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	39 f4       	brne	.+14     	; 0x2150 <CLKSYS_AutoCalibration_Enable+0x70>
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    2142:	a0 e6       	ldi	r26, 0x60	; 96
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e0 e6       	ldi	r30, 0x60	; 96
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	81 60       	ori	r24, 0x01	; 1
    214e:	8c 93       	st	X, r24
	}
}
    2150:	26 96       	adiw	r28, 0x06	; 6
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
    2164:	83 e5       	ldi	r24, 0x53	; 83
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	63 e0       	ldi	r22, 0x03	; 3
    216a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <CCPWrite>
}
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
    217c:	82 e4       	ldi	r24, 0x42	; 66
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <CCPWrite>
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	25 97       	sbiw	r28, 0x05	; 5
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	8b 83       	std	Y+3, r24	; 0x03
    219c:	6c 83       	std	Y+4, r22	; 0x04
    219e:	4d 83       	std	Y+5, r20	; 0x05
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    21a0:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    21a4:	e0 ec       	ldi	r30, 0xC0	; 192
    21a6:	f1 e0       	ldi	r31, 0x01	; 1
    21a8:	83 e3       	ldi	r24, 0x33	; 51
    21aa:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	82 95       	swap	r24
    21b8:	92 95       	swap	r25
    21ba:	90 7f       	andi	r25, 0xF0	; 240
    21bc:	98 27       	eor	r25, r24
    21be:	80 7f       	andi	r24, 0xF0	; 240
    21c0:	98 27       	eor	r25, r24
    21c2:	9c 01       	movw	r18, r24
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	8f 71       	andi	r24, 0x1F	; 31
    21cc:	90 70       	andi	r25, 0x00	; 0
    21ce:	82 2b       	or	r24, r18
    21d0:	93 2b       	or	r25, r19
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    21d6:	e0 ec       	ldi	r30, 0xC0	; 192
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    21de:	e0 ec       	ldi	r30, 0xC0	; 192
    21e0:	f1 e0       	ldi	r31, 0x01	; 1
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	89 2f       	mov	r24, r25
    21e8:	99 27       	eor	r25, r25
    21ea:	8f 71       	andi	r24, 0x1F	; 31
    21ec:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    21ee:	e0 ec       	ldi	r30, 0xC0	; 192
    21f0:	f1 e0       	ldi	r31, 0x01	; 1
    21f2:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    21f4:	e0 ec       	ldi	r30, 0xC0	; 192
    21f6:	f1 e0       	ldi	r31, 0x01	; 1
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	84 83       	std	Z+4, r24	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    21fc:	e0 ec       	ldi	r30, 0xC0	; 192
    21fe:	f1 e0       	ldi	r31, 0x01	; 1
    2200:	85 e3       	ldi	r24, 0x35	; 53
    2202:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2204:	ef 93       	push	r30
    2206:	ff 93       	push	r31
    2208:	0f 93       	push	r16
    220a:	2f 93       	push	r18
    220c:	eb ec       	ldi	r30, 0xCB	; 203
    220e:	f1 e0       	ldi	r31, 0x01	; 1
    2210:	08 ed       	ldi	r16, 0xD8	; 216
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	04 bf       	out	0x34, r16	; 52
    2216:	20 83       	st	Z, r18
    2218:	2f 91       	pop	r18
    221a:	0f 91       	pop	r16
    221c:	ff 91       	pop	r31
    221e:	ef 91       	pop	r30
}
    2220:	25 96       	adiw	r28, 0x05	; 5
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <EEPROM_ReadByte+0x6>
    2232:	00 d0       	rcall	.+0      	; 0x2234 <EEPROM_ReadByte+0x8>
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	8b 83       	std	Y+3, r24	; 0x03
    223a:	6c 83       	std	Y+4, r22	; 0x04
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    223c:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	82 95       	swap	r24
    224c:	92 95       	swap	r25
    224e:	90 7f       	andi	r25, 0xF0	; 240
    2250:	98 27       	eor	r25, r24
    2252:	80 7f       	andi	r24, 0xF0	; 240
    2254:	98 27       	eor	r25, r24
    2256:	9c 01       	movw	r18, r24
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	8f 71       	andi	r24, 0x1F	; 31
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	82 2b       	or	r24, r18
    2264:	93 2b       	or	r25, r19
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    226a:	e0 ec       	ldi	r30, 0xC0	; 192
    226c:	f1 e0       	ldi	r31, 0x01	; 1
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2272:	e0 ec       	ldi	r30, 0xC0	; 192
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	89 2f       	mov	r24, r25
    227c:	99 27       	eor	r25, r25
    227e:	8f 71       	andi	r24, 0x1F	; 31
    2280:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    2282:	e0 ec       	ldi	r30, 0xC0	; 192
    2284:	f1 e0       	ldi	r31, 0x01	; 1
    2286:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    2288:	e0 ec       	ldi	r30, 0xC0	; 192
    228a:	f1 e0       	ldi	r31, 0x01	; 1
    228c:	86 e0       	ldi	r24, 0x06	; 6
    228e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2290:	ef 93       	push	r30
    2292:	ff 93       	push	r31
    2294:	0f 93       	push	r16
    2296:	2f 93       	push	r18
    2298:	eb ec       	ldi	r30, 0xCB	; 203
    229a:	f1 e0       	ldi	r31, 0x01	; 1
    229c:	08 ed       	ldi	r16, 0xD8	; 216
    229e:	21 e0       	ldi	r18, 0x01	; 1
    22a0:	04 bf       	out	0x34, r16	; 52
    22a2:	20 83       	st	Z, r18
    22a4:	2f 91       	pop	r18
    22a6:	0f 91       	pop	r16
    22a8:	ff 91       	pop	r31
    22aa:	ef 91       	pop	r30

	return NVM.DATA0;
    22ac:	e0 ec       	ldi	r30, 0xC0	; 192
    22ae:	f1 e0       	ldi	r31, 0x01	; 1
    22b0:	84 81       	ldd	r24, Z+4	; 0x04
}
    22b2:	24 96       	adiw	r28, 0x04	; 4
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <EEPROM_WaitForNVM>:
 *  including EEPROM. Use this function before any EEPROM accesses,
 *  if you are not certain that any previous operations are finished yet,
 *  like an EEPROM write.
 */
void EEPROM_WaitForNVM( void )
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    22c6:	e0 ec       	ldi	r30, 0xC0	; 192
    22c8:	f1 e0       	ldi	r31, 0x01	; 1
    22ca:	87 85       	ldd	r24, Z+15	; 0x0f
    22cc:	88 23       	and	r24, r24
    22ce:	dc f3       	brlt	.-10     	; 0x22c6 <EEPROM_WaitForNVM+0x8>
}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <EEPROM_FlushBuffer>:
 *  This function also works for memory mapped EEPROM access.
 *
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    22de:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    22e2:	e0 ec       	ldi	r30, 0xC0	; 192
    22e4:	f1 e0       	ldi	r31, 0x01	; 1
    22e6:	87 85       	ldd	r24, Z+15	; 0x0f
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	82 70       	andi	r24, 0x02	; 2
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	91 f0       	breq	.+36     	; 0x2318 <EEPROM_FlushBuffer+0x42>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    22f4:	e0 ec       	ldi	r30, 0xC0	; 192
    22f6:	f1 e0       	ldi	r31, 0x01	; 1
    22f8:	86 e3       	ldi	r24, 0x36	; 54
    22fa:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    22fc:	ef 93       	push	r30
    22fe:	ff 93       	push	r31
    2300:	0f 93       	push	r16
    2302:	2f 93       	push	r18
    2304:	eb ec       	ldi	r30, 0xCB	; 203
    2306:	f1 e0       	ldi	r31, 0x01	; 1
    2308:	08 ed       	ldi	r16, 0xD8	; 216
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	04 bf       	out	0x34, r16	; 52
    230e:	20 83       	st	Z, r18
    2310:	2f 91       	pop	r18
    2312:	0f 91       	pop	r16
    2314:	ff 91       	pop	r31
    2316:	ef 91       	pop	r30
	}
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <EEPROM_LoadByte+0x6>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	6a 83       	std	Y+2, r22	; 0x02
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    232c:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2330:	e0 ec       	ldi	r30, 0xC0	; 192
    2332:	f1 e0       	ldi	r31, 0x01	; 1
    2334:	83 e3       	ldi	r24, 0x33	; 51
    2336:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    2338:	e0 ec       	ldi	r30, 0xC0	; 192
    233a:	f1 e0       	ldi	r31, 0x01	; 1
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    2340:	e0 ec       	ldi	r30, 0xC0	; 192
    2342:	f1 e0       	ldi	r31, 0x01	; 1
    2344:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    2346:	e0 ec       	ldi	r30, 0xC0	; 192
    2348:	f1 e0       	ldi	r31, 0x01	; 1
    234a:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    234c:	e0 ec       	ldi	r30, 0xC0	; 192
    234e:	f1 e0       	ldi	r31, 0x01	; 1
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	84 83       	std	Z+4, r24	; 0x04
}
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	00 d0       	rcall	.+0      	; 0x2364 <EEPROM_LoadPage+0x6>
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t i = 0;
    236e:	19 82       	std	Y+1, r1	; 0x01

	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2370:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2374:	e0 ec       	ldi	r30, 0xC0	; 192
    2376:	f1 e0       	ldi	r31, 0x01	; 1
    2378:	83 e3       	ldi	r24, 0x33	; 51
    237a:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    237c:	e0 ec       	ldi	r30, 0xC0	; 192
    237e:	f1 e0       	ldi	r31, 0x01	; 1
    2380:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    2382:	e0 ec       	ldi	r30, 0xC0	; 192
    2384:	f1 e0       	ldi	r31, 0x01	; 1
    2386:	12 82       	std	Z+2, r1	; 0x02

	/* Load multible bytes into page buffer. */
	for (i = 0; i < EEPROM_PAGESIZE; ++i) {
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	14 c0       	rjmp	.+40     	; 0x23b4 <EEPROM_LoadPage+0x56>
		NVM.ADDR0 = i;
    238c:	e0 ec       	ldi	r30, 0xC0	; 192
    238e:	f1 e0       	ldi	r31, 0x01	; 1
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	80 83       	st	Z, r24
		NVM.DATA0 = *values;
    2394:	a0 ec       	ldi	r26, 0xC0	; 192
    2396:	b1 e0       	ldi	r27, 0x01	; 1
    2398:	ea 81       	ldd	r30, Y+2	; 0x02
    239a:	fb 81       	ldd	r31, Y+3	; 0x03
    239c:	80 81       	ld	r24, Z
    239e:	14 96       	adiw	r26, 0x04	; 4
    23a0:	8c 93       	st	X, r24
    23a2:	14 97       	sbiw	r26, 0x04	; 4
		++values;
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	8a 83       	std	Y+2, r24	; 0x02
    23ac:	9b 83       	std	Y+3, r25	; 0x03
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (i = 0; i < EEPROM_PAGESIZE; ++i) {
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	8f 5f       	subi	r24, 0xFF	; 255
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	80 32       	cpi	r24, 0x20	; 32
    23b8:	48 f3       	brcs	.-46     	; 0x238c <EEPROM_LoadPage+0x2e>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    23ba:	23 96       	adiw	r28, 0x03	; 3
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <EEPROM_AtomicWritePage+0x6>
    23cc:	0f 92       	push	r0
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    23d4:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	82 95       	swap	r24
    23e4:	92 95       	swap	r25
    23e6:	90 7f       	andi	r25, 0xF0	; 240
    23e8:	98 27       	eor	r25, r24
    23ea:	80 7f       	andi	r24, 0xF0	; 240
    23ec:	98 27       	eor	r25, r24
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    23f2:	e0 ec       	ldi	r30, 0xC0	; 192
    23f4:	f1 e0       	ldi	r31, 0x01	; 1
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    23fa:	e0 ec       	ldi	r30, 0xC0	; 192
    23fc:	f1 e0       	ldi	r31, 0x01	; 1
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	89 2f       	mov	r24, r25
    2404:	99 27       	eor	r25, r25
    2406:	8f 71       	andi	r24, 0x1F	; 31
    2408:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    240a:	e0 ec       	ldi	r30, 0xC0	; 192
    240c:	f1 e0       	ldi	r31, 0x01	; 1
    240e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2410:	e0 ec       	ldi	r30, 0xC0	; 192
    2412:	f1 e0       	ldi	r31, 0x01	; 1
    2414:	85 e3       	ldi	r24, 0x35	; 53
    2416:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2418:	ef 93       	push	r30
    241a:	ff 93       	push	r31
    241c:	0f 93       	push	r16
    241e:	2f 93       	push	r18
    2420:	eb ec       	ldi	r30, 0xCB	; 203
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	08 ed       	ldi	r16, 0xD8	; 216
    2426:	21 e0       	ldi	r18, 0x01	; 1
    2428:	04 bf       	out	0x34, r16	; 52
    242a:	20 83       	st	Z, r18
    242c:	2f 91       	pop	r18
    242e:	0f 91       	pop	r16
    2430:	ff 91       	pop	r31
    2432:	ef 91       	pop	r30
}
    2434:	23 96       	adiw	r28, 0x03	; 3
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	00 d0       	rcall	.+0      	; 0x2446 <EEPROM_ErasePage+0x6>
    2446:	0f 92       	push	r0
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    244e:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	88 0f       	add	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	82 95       	swap	r24
    245e:	92 95       	swap	r25
    2460:	90 7f       	andi	r25, 0xF0	; 240
    2462:	98 27       	eor	r25, r24
    2464:	80 7f       	andi	r24, 0xF0	; 240
    2466:	98 27       	eor	r25, r24
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    246c:	e0 ec       	ldi	r30, 0xC0	; 192
    246e:	f1 e0       	ldi	r31, 0x01	; 1
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2474:	e0 ec       	ldi	r30, 0xC0	; 192
    2476:	f1 e0       	ldi	r31, 0x01	; 1
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	89 2f       	mov	r24, r25
    247e:	99 27       	eor	r25, r25
    2480:	8f 71       	andi	r24, 0x1F	; 31
    2482:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    2484:	e0 ec       	ldi	r30, 0xC0	; 192
    2486:	f1 e0       	ldi	r31, 0x01	; 1
    2488:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    248a:	e0 ec       	ldi	r30, 0xC0	; 192
    248c:	f1 e0       	ldi	r31, 0x01	; 1
    248e:	82 e3       	ldi	r24, 0x32	; 50
    2490:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
    2496:	0f 93       	push	r16
    2498:	2f 93       	push	r18
    249a:	eb ec       	ldi	r30, 0xCB	; 203
    249c:	f1 e0       	ldi	r31, 0x01	; 1
    249e:	08 ed       	ldi	r16, 0xD8	; 216
    24a0:	21 e0       	ldi	r18, 0x01	; 1
    24a2:	04 bf       	out	0x34, r16	; 52
    24a4:	20 83       	st	Z, r18
    24a6:	2f 91       	pop	r18
    24a8:	0f 91       	pop	r16
    24aa:	ff 91       	pop	r31
    24ac:	ef 91       	pop	r30
}
    24ae:	23 96       	adiw	r28, 0x03	; 3
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <EEPROM_SplitWritePage+0x6>
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    24c8:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	82 95       	swap	r24
    24d8:	92 95       	swap	r25
    24da:	90 7f       	andi	r25, 0xF0	; 240
    24dc:	98 27       	eor	r25, r24
    24de:	80 7f       	andi	r24, 0xF0	; 240
    24e0:	98 27       	eor	r25, r24
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    24e6:	e0 ec       	ldi	r30, 0xC0	; 192
    24e8:	f1 e0       	ldi	r31, 0x01	; 1
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    24ee:	e0 ec       	ldi	r30, 0xC0	; 192
    24f0:	f1 e0       	ldi	r31, 0x01	; 1
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	89 2f       	mov	r24, r25
    24f8:	99 27       	eor	r25, r25
    24fa:	8f 71       	andi	r24, 0x1F	; 31
    24fc:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    24fe:	e0 ec       	ldi	r30, 0xC0	; 192
    2500:	f1 e0       	ldi	r31, 0x01	; 1
    2502:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    2504:	e0 ec       	ldi	r30, 0xC0	; 192
    2506:	f1 e0       	ldi	r31, 0x01	; 1
    2508:	84 e3       	ldi	r24, 0x34	; 52
    250a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    250c:	ef 93       	push	r30
    250e:	ff 93       	push	r31
    2510:	0f 93       	push	r16
    2512:	2f 93       	push	r18
    2514:	eb ec       	ldi	r30, 0xCB	; 203
    2516:	f1 e0       	ldi	r31, 0x01	; 1
    2518:	08 ed       	ldi	r16, 0xD8	; 216
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	04 bf       	out	0x34, r16	; 52
    251e:	20 83       	st	Z, r18
    2520:	2f 91       	pop	r18
    2522:	0f 91       	pop	r16
    2524:	ff 91       	pop	r31
    2526:	ef 91       	pop	r30
}
    2528:	23 96       	adiw	r28, 0x03	; 3
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <EEPROM_EraseAll>:
/*! \brief Erase entire EEPROM memory.
 *
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    253c:	0e 94 5f 11 	call	0x22be	; 0x22be <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    2540:	e0 ec       	ldi	r30, 0xC0	; 192
    2542:	f1 e0       	ldi	r31, 0x01	; 1
    2544:	80 e3       	ldi	r24, 0x30	; 48
    2546:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2548:	ef 93       	push	r30
    254a:	ff 93       	push	r31
    254c:	0f 93       	push	r16
    254e:	2f 93       	push	r18
    2550:	eb ec       	ldi	r30, 0xCB	; 203
    2552:	f1 e0       	ldi	r31, 0x01	; 1
    2554:	08 ed       	ldi	r16, 0xD8	; 216
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	04 bf       	out	0x34, r16	; 52
    255a:	20 83       	st	Z, r18
    255c:	2f 91       	pop	r18
    255e:	0f 91       	pop	r16
    2560:	ff 91       	pop	r31
    2562:	ef 91       	pop	r30
}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <PMIC_SetVectorLocationToBoot>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    2574:	e0 ea       	ldi	r30, 0xA0	; 160
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	80 64       	ori	r24, 0x40	; 64
    257c:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    257e:	e4 e3       	ldi	r30, 0x34	; 52
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	88 ed       	ldi	r24, 0xD8	; 216
    2584:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    2586:	e0 ea       	ldi	r30, 0xA0	; 160
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	82 83       	std	Z+2, r24	; 0x02
}
    258e:	0f 90       	pop	r0
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <PMIC_SetVectorLocationToApplication>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	0f 92       	push	r0
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    25a0:	e0 ea       	ldi	r30, 0xA0	; 160
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	8f 7b       	andi	r24, 0xBF	; 191
    25a8:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    25aa:	e4 e3       	ldi	r30, 0x34	; 52
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	88 ed       	ldi	r24, 0xD8	; 216
    25b0:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    25b2:	e0 ea       	ldi	r30, 0xA0	; 160
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	82 83       	std	Z+2, r24	; 0x02
}
    25ba:	0f 90       	pop	r0
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <PORT_ConfigureInterrupt0>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 0.
 */
void PORT_ConfigureInterrupt0( PORT_t * port,
                               PORT_INT0LVL_t intLevel,
                               uint8_t pinMask )
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <PORT_ConfigureInterrupt0+0x6>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <PORT_ConfigureInterrupt0+0x8>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	6b 83       	std	Y+3, r22	; 0x03
    25d4:	4c 83       	std	Y+4, r20	; 0x04
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    25d6:	e9 81       	ldd	r30, Y+1	; 0x01
    25d8:	fa 81       	ldd	r31, Y+2	; 0x02
    25da:	81 85       	ldd	r24, Z+9	; 0x09
    25dc:	98 2f       	mov	r25, r24
    25de:	9c 7f       	andi	r25, 0xFC	; 252
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	89 2b       	or	r24, r25
    25e4:	e9 81       	ldd	r30, Y+1	; 0x01
    25e6:	fa 81       	ldd	r31, Y+2	; 0x02
    25e8:	81 87       	std	Z+9, r24	; 0x09
	port->INT0MASK = pinMask;
    25ea:	e9 81       	ldd	r30, Y+1	; 0x01
    25ec:	fa 81       	ldd	r31, Y+2	; 0x02
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	82 87       	std	Z+10, r24	; 0x0a
}
    25f2:	24 96       	adiw	r28, 0x04	; 4
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <PORT_ConfigureInterrupt1>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 1.
 */
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <PORT_ConfigureInterrupt1+0x6>
    2604:	00 d0       	rcall	.+0      	; 0x2606 <PORT_ConfigureInterrupt1+0x8>
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	6b 83       	std	Y+3, r22	; 0x03
    2610:	4c 83       	std	Y+4, r20	; 0x04
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
    2612:	e9 81       	ldd	r30, Y+1	; 0x01
    2614:	fa 81       	ldd	r31, Y+2	; 0x02
    2616:	81 85       	ldd	r24, Z+9	; 0x09
    2618:	98 2f       	mov	r25, r24
    261a:	93 7f       	andi	r25, 0xF3	; 243
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	89 2b       	or	r24, r25
    2620:	e9 81       	ldd	r30, Y+1	; 0x01
    2622:	fa 81       	ldd	r31, Y+2	; 0x02
    2624:	81 87       	std	Z+9, r24	; 0x09
	port->INT1MASK = pinMask;
    2626:	e9 81       	ldd	r30, Y+1	; 0x01
    2628:	fa 81       	ldd	r31, Y+2	; 0x02
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	83 87       	std	Z+11, r24	; 0x0b
}
    262e:	24 96       	adiw	r28, 0x04	; 4
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    263a:	ef 92       	push	r14
    263c:	0f 93       	push	r16
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	2d 97       	sbiw	r28, 0x0d	; 13
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	8b 83       	std	Y+3, r24	; 0x03
    264e:	9c 83       	std	Y+4, r25	; 0x04
    2650:	6d 83       	std	Y+5, r22	; 0x05
    2652:	4e 83       	std	Y+6, r20	; 0x06
    2654:	2f 83       	std	Y+7, r18	; 0x07
    2656:	08 87       	std	Y+8, r16	; 0x08
    2658:	e9 86       	std	Y+9, r14	; 0x09
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
	               isc |
	               (slewRateEnable ? PORT_SRLEN_bm : 0) |
	               (invertEnable ? PORT_INVEN_bm : 0);
    265a:	98 85       	ldd	r25, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	89 2b       	or	r24, r25
    2660:	8d 87       	std	Y+13, r24	; 0x0d
    2662:	8e 81       	ldd	r24, Y+6	; 0x06
    2664:	88 23       	and	r24, r24
    2666:	19 f0       	breq	.+6      	; 0x266e <PORT_ConfigurePins+0x34>
    2668:	80 e8       	ldi	r24, 0x80	; 128
    266a:	8c 87       	std	Y+12, r24	; 0x0c
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <PORT_ConfigurePins+0x36>
    266e:	1c 86       	std	Y+12, r1	; 0x0c
    2670:	9d 85       	ldd	r25, Y+13	; 0x0d
    2672:	8c 85       	ldd	r24, Y+12	; 0x0c
    2674:	98 2b       	or	r25, r24
    2676:	9b 87       	std	Y+11, r25	; 0x0b
    2678:	8f 81       	ldd	r24, Y+7	; 0x07
    267a:	88 23       	and	r24, r24
    267c:	19 f0       	breq	.+6      	; 0x2684 <PORT_ConfigurePins+0x4a>
    267e:	90 e4       	ldi	r25, 0x40	; 64
    2680:	9a 87       	std	Y+10, r25	; 0x0a
    2682:	01 c0       	rjmp	.+2      	; 0x2686 <PORT_ConfigurePins+0x4c>
    2684:	1a 86       	std	Y+10, r1	; 0x0a
    2686:	8b 85       	ldd	r24, Y+11	; 0x0b
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	89 2b       	or	r24, r25
    268c:	8a 83       	std	Y+2, r24	; 0x02

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
    268e:	ef e3       	ldi	r30, 0x3F	; 63
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	89 83       	std	Y+1, r24	; 0x01

	cli();
    2696:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    2698:	e0 eb       	ldi	r30, 0xB0	; 176
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	80 83       	st	Z, r24
	port->PIN0CTRL = temp;
    26a0:	eb 81       	ldd	r30, Y+3	; 0x03
    26a2:	fc 81       	ldd	r31, Y+4	; 0x04
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	80 8b       	std	Z+16, r24	; 0x10

	/* Restore status register. */
	SREG = sreg;
    26a8:	ef e3       	ldi	r30, 0x3F	; 63
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	80 83       	st	Z, r24
}
    26b0:	2d 96       	adiw	r28, 0x0d	; 13
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	0f 91       	pop	r16
    26bc:	ef 90       	pop	r14
    26be:	08 95       	ret

000026c0 <PORT_MapVirtualPort0>:
 *  registers available in I/O space.
 *
 *  \param realPort Selects the real port to map to virtual port 0.
 */
void PORT_MapVirtualPort0(PORTCFG_VP0MAP_t realPort)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	89 83       	std	Y+1, r24	; 0x01
	PORTCFG.VPCTRLA = ( PORTCFG.VPCTRLA & ~PORTCFG_VP0MAP_gm ) | realPort;
    26cc:	a0 eb       	ldi	r26, 0xB0	; 176
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e0 eb       	ldi	r30, 0xB0	; 176
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	98 2f       	mov	r25, r24
    26d8:	90 7f       	andi	r25, 0xF0	; 240
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	89 2b       	or	r24, r25
    26de:	12 96       	adiw	r26, 0x02	; 2
    26e0:	8c 93       	st	X, r24
    26e2:	12 97       	sbiw	r26, 0x02	; 2
}
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <PORT_MapVirtualPort1>:
 *  registers available in I/O space.
 *
 *  \param realPort Selects the real port to map to virtual port 1.
 */
void PORT_MapVirtualPort1(PORTCFG_VP1MAP_t realPort)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	89 83       	std	Y+1, r24	; 0x01
	PORTCFG.VPCTRLA = ( PORTCFG.VPCTRLA & ~PORTCFG_VP1MAP_gm ) | realPort;
    26f8:	a0 eb       	ldi	r26, 0xB0	; 176
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e0 eb       	ldi	r30, 0xB0	; 176
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	98 2f       	mov	r25, r24
    2704:	9f 70       	andi	r25, 0x0F	; 15
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	89 2b       	or	r24, r25
    270a:	12 96       	adiw	r26, 0x02	; 2
    270c:	8c 93       	st	X, r24
    270e:	12 97       	sbiw	r26, 0x02	; 2
}
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <PORT_MapVirtualPort2>:
 *  registers available in I/O space.
 *
 *  \param realPort Selects the real port to map to virtual port 2.
 */
void PORT_MapVirtualPort2(PORTCFG_VP2MAP_t realPort)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	0f 92       	push	r0
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	89 83       	std	Y+1, r24	; 0x01
	PORTCFG.VPCTRLB = ( PORTCFG.VPCTRLB & ~PORTCFG_VP2MAP_gm ) | realPort;
    2724:	a0 eb       	ldi	r26, 0xB0	; 176
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e0 eb       	ldi	r30, 0xB0	; 176
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	83 81       	ldd	r24, Z+3	; 0x03
    272e:	98 2f       	mov	r25, r24
    2730:	90 7f       	andi	r25, 0xF0	; 240
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	89 2b       	or	r24, r25
    2736:	13 96       	adiw	r26, 0x03	; 3
    2738:	8c 93       	st	X, r24
    273a:	13 97       	sbiw	r26, 0x03	; 3
}
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <PORT_MapVirtualPort3>:
 *  registers available in I/O space.
 *
 *  \param realPort Selects the real port to map to virtual port 3.
 */
void PORT_MapVirtualPort3(PORTCFG_VP3MAP_t realPort)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	89 83       	std	Y+1, r24	; 0x01
	PORTCFG.VPCTRLB = ( PORTCFG.VPCTRLB & ~PORTCFG_VP3MAP_gm ) | realPort;
    2750:	a0 eb       	ldi	r26, 0xB0	; 176
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e0 eb       	ldi	r30, 0xB0	; 176
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	83 81       	ldd	r24, Z+3	; 0x03
    275a:	98 2f       	mov	r25, r24
    275c:	9f 70       	andi	r25, 0x0F	; 15
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	89 2b       	or	r24, r25
    2762:	13 96       	adiw	r26, 0x03	; 3
    2764:	8c 93       	st	X, r24
    2766:	13 97       	sbiw	r26, 0x03	; 3
}
    2768:	0f 90       	pop	r0
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <TC0_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	00 d0       	rcall	.+0      	; 0x2776 <TC0_ConfigClockSource+0x6>
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	6b 83       	std	Y+3, r22	; 0x03
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	80 81       	ld	r24, Z
    2788:	98 2f       	mov	r25, r24
    278a:	90 7f       	andi	r25, 0xF0	; 240
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	89 2b       	or	r24, r25
    2790:	e9 81       	ldd	r30, Y+1	; 0x01
    2792:	fa 81       	ldd	r31, Y+2	; 0x02
    2794:	80 83       	st	Z, r24
}
    2796:	23 96       	adiw	r28, 0x03	; 3
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <TC1_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC1_ConfigClockSource( volatile TC1_t * tc, TC_CLKSEL_t clockSelection )
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <TC1_ConfigClockSource+0x6>
    27a8:	0f 92       	push	r0
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	9a 83       	std	Y+2, r25	; 0x02
    27b2:	6b 83       	std	Y+3, r22	; 0x03
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | clockSelection;
    27b4:	e9 81       	ldd	r30, Y+1	; 0x01
    27b6:	fa 81       	ldd	r31, Y+2	; 0x02
    27b8:	80 81       	ld	r24, Z
    27ba:	98 2f       	mov	r25, r24
    27bc:	90 7f       	andi	r25, 0xF0	; 240
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	89 2b       	or	r24, r25
    27c2:	e9 81       	ldd	r30, Y+1	; 0x01
    27c4:	fa 81       	ldd	r31, Y+2	; 0x02
    27c6:	80 83       	st	Z, r24
}
    27c8:	23 96       	adiw	r28, 0x03	; 3
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <TC0_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <TC0_ConfigWGM+0x6>
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	6b 83       	std	Y+3, r22	; 0x03
	tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
    27e6:	e9 81       	ldd	r30, Y+1	; 0x01
    27e8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	98 2f       	mov	r25, r24
    27ee:	98 7f       	andi	r25, 0xF8	; 248
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	89 2b       	or	r24, r25
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	81 83       	std	Z+1, r24	; 0x01
}
    27fa:	23 96       	adiw	r28, 0x03	; 3
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <TC1_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC1_ConfigWGM( volatile TC1_t * tc, TC_WGMODE_t wgm )
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	00 d0       	rcall	.+0      	; 0x280c <TC1_ConfigWGM+0x6>
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	6b 83       	std	Y+3, r22	; 0x03
	tc->CTRLB = ( tc->CTRLB & ~TC1_WGMODE_gm ) | wgm;
    2818:	e9 81       	ldd	r30, Y+1	; 0x01
    281a:	fa 81       	ldd	r31, Y+2	; 0x02
    281c:	81 81       	ldd	r24, Z+1	; 0x01
    281e:	98 2f       	mov	r25, r24
    2820:	98 7f       	andi	r25, 0xF8	; 248
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	89 2b       	or	r24, r25
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	81 83       	std	Z+1, r24	; 0x01
}
    282c:	23 96       	adiw	r28, 0x03	; 3
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <TC0_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC0_ConfigInputCapture( volatile TC0_t * tc, TC_EVSEL_t eventSource )
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <TC0_ConfigInputCapture+0x6>
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	9a 83       	std	Y+2, r25	; 0x02
    2848:	6b 83       	std	Y+3, r22	; 0x03
	tc->CTRLD = ( tc->CTRLD & ~( TC0_EVSEL_gm | TC0_EVACT_gm ) ) |
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	83 81       	ldd	r24, Z+3	; 0x03
    2850:	98 2f       	mov	r25, r24
    2852:	90 71       	andi	r25, 0x10	; 16
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	89 2b       	or	r24, r25
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    2860:	23 96       	adiw	r28, 0x03	; 3
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <TC1_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC1_ConfigInputCapture( volatile TC1_t * tc, TC_EVSEL_t eventSource )
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <TC1_ConfigInputCapture+0x6>
    2872:	0f 92       	push	r0
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	6b 83       	std	Y+3, r22	; 0x03
	tc->CTRLD = ( tc->CTRLD & ~( TC1_EVSEL_gm | TC1_EVACT_gm ) ) |
    287e:	e9 81       	ldd	r30, Y+1	; 0x01
    2880:	fa 81       	ldd	r31, Y+2	; 0x02
    2882:	83 81       	ldd	r24, Z+3	; 0x03
    2884:	98 2f       	mov	r25, r24
    2886:	90 71       	andi	r25, 0x10	; 16
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	89 2b       	or	r24, r25
    288c:	80 62       	ori	r24, 0x20	; 32
    288e:	e9 81       	ldd	r30, Y+1	; 0x01
    2890:	fa 81       	ldd	r31, Y+2	; 0x02
    2892:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    2894:	23 96       	adiw	r28, 0x03	; 3
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <TC0_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <TC0_EnableCCChannels+0x6>
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	6b 83       	std	Y+3, r22	; 0x03
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	80 7f       	andi	r24, 0xF0	; 240
    28b6:	8b 83       	std	Y+3, r24	; 0x03

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	89 2b       	or	r24, r25
    28c2:	e9 81       	ldd	r30, Y+1	; 0x01
    28c4:	fa 81       	ldd	r31, Y+2	; 0x02
    28c6:	81 83       	std	Z+1, r24	; 0x01
}
    28c8:	23 96       	adiw	r28, 0x03	; 3
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <TC1_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <TC1_EnableCCChannels+0x6>
    28da:	0f 92       	push	r0
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	6b 83       	std	Y+3, r22	; 0x03
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	80 73       	andi	r24, 0x30	; 48
    28ea:	8b 83       	std	Y+3, r24	; 0x03

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    28ec:	e9 81       	ldd	r30, Y+1	; 0x01
    28ee:	fa 81       	ldd	r31, Y+2	; 0x02
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	89 2b       	or	r24, r25
    28f6:	e9 81       	ldd	r30, Y+1	; 0x01
    28f8:	fa 81       	ldd	r31, Y+2	; 0x02
    28fa:	81 83       	std	Z+1, r24	; 0x01
}
    28fc:	23 96       	adiw	r28, 0x03	; 3
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <TC0_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	00 d0       	rcall	.+0      	; 0x290e <TC0_DisableCCChannels+0x6>
    290e:	0f 92       	push	r0
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	9a 83       	std	Y+2, r25	; 0x02
    2918:	6b 83       	std	Y+3, r22	; 0x03
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	80 7f       	andi	r24, 0xF0	; 240
    291e:	8b 83       	std	Y+3, r24	; 0x03

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    2920:	e9 81       	ldd	r30, Y+1	; 0x01
    2922:	fa 81       	ldd	r31, Y+2	; 0x02
    2924:	81 81       	ldd	r24, Z+1	; 0x01
    2926:	98 2f       	mov	r25, r24
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	80 95       	com	r24
    292c:	89 23       	and	r24, r25
    292e:	e9 81       	ldd	r30, Y+1	; 0x01
    2930:	fa 81       	ldd	r31, Y+2	; 0x02
    2932:	81 83       	std	Z+1, r24	; 0x01
}
    2934:	23 96       	adiw	r28, 0x03	; 3
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <TC1_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	00 d0       	rcall	.+0      	; 0x2946 <TC1_DisableCCChannels+0x6>
    2946:	0f 92       	push	r0
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	6b 83       	std	Y+3, r22	; 0x03
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	80 73       	andi	r24, 0x30	; 48
    2956:	8b 83       	std	Y+3, r24	; 0x03

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    2958:	e9 81       	ldd	r30, Y+1	; 0x01
    295a:	fa 81       	ldd	r31, Y+2	; 0x02
    295c:	81 81       	ldd	r24, Z+1	; 0x01
    295e:	98 2f       	mov	r25, r24
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	80 95       	com	r24
    2964:	89 23       	and	r24, r25
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	fa 81       	ldd	r31, Y+2	; 0x02
    296a:	81 83       	std	Z+1, r24	; 0x01
}
    296c:	23 96       	adiw	r28, 0x03	; 3
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <TC0_SetOverflowIntLevel+0x6>
    297e:	0f 92       	push	r0
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	86 81       	ldd	r24, Z+6	; 0x06
    2990:	98 2f       	mov	r25, r24
    2992:	9c 7f       	andi	r25, 0xFC	; 252
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	89 2b       	or	r24, r25
    2998:	e9 81       	ldd	r30, Y+1	; 0x01
    299a:	fa 81       	ldd	r31, Y+2	; 0x02
    299c:	86 83       	std	Z+6, r24	; 0x06
}
    299e:	23 96       	adiw	r28, 0x03	; 3
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <TC1_SetOverflowIntLevel+0x6>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	86 81       	ldd	r24, Z+6	; 0x06
    29c2:	98 2f       	mov	r25, r24
    29c4:	9c 7f       	andi	r25, 0xFC	; 252
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	89 2b       	or	r24, r25
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	86 83       	std	Z+6, r24	; 0x06
}
    29d0:	23 96       	adiw	r28, 0x03	; 3
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <TC0_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC0_SetErrorIntLevel( volatile TC0_t * tc, TC_ERRINTLVL_t intLevel )
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <TC0_SetErrorIntLevel+0x6>
    29e2:	0f 92       	push	r0
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_ERRINTLVL_gm ) | intLevel;
    29ee:	e9 81       	ldd	r30, Y+1	; 0x01
    29f0:	fa 81       	ldd	r31, Y+2	; 0x02
    29f2:	86 81       	ldd	r24, Z+6	; 0x06
    29f4:	98 2f       	mov	r25, r24
    29f6:	93 7f       	andi	r25, 0xF3	; 243
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	89 2b       	or	r24, r25
    29fc:	e9 81       	ldd	r30, Y+1	; 0x01
    29fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2a00:	86 83       	std	Z+6, r24	; 0x06
}
    2a02:	23 96       	adiw	r28, 0x03	; 3
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <TC1_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC1_SetErrorIntLevel( volatile TC1_t * tc, TC_ERRINTLVL_t intLevel )
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <TC1_SetErrorIntLevel+0x6>
    2a14:	0f 92       	push	r0
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_ERRINTLVL_gm ) | intLevel;
    2a20:	e9 81       	ldd	r30, Y+1	; 0x01
    2a22:	fa 81       	ldd	r31, Y+2	; 0x02
    2a24:	86 81       	ldd	r24, Z+6	; 0x06
    2a26:	98 2f       	mov	r25, r24
    2a28:	93 7f       	andi	r25, 0xF3	; 243
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	89 2b       	or	r24, r25
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	86 83       	std	Z+6, r24	; 0x06
}
    2a34:	23 96       	adiw	r28, 0x03	; 3
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <TC0_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCAIntLevel( volatile TC0_t * tc, TC_CCAINTLVL_t intLevel )
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <TC0_SetCCAIntLevel+0x6>
    2a46:	0f 92       	push	r0
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	89 83       	std	Y+1, r24	; 0x01
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCAINTLVL_gm ) | intLevel;
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	87 81       	ldd	r24, Z+7	; 0x07
    2a58:	98 2f       	mov	r25, r24
    2a5a:	9c 7f       	andi	r25, 0xFC	; 252
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	89 2b       	or	r24, r25
    2a60:	e9 81       	ldd	r30, Y+1	; 0x01
    2a62:	fa 81       	ldd	r31, Y+2	; 0x02
    2a64:	87 83       	std	Z+7, r24	; 0x07
}
    2a66:	23 96       	adiw	r28, 0x03	; 3
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <TC1_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC1_SetCCAIntLevel( volatile TC1_t * tc, TC_CCAINTLVL_t intLevel )
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <TC1_SetCCAIntLevel+0x6>
    2a78:	0f 92       	push	r0
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCAINTLVL_gm ) | intLevel;
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	87 81       	ldd	r24, Z+7	; 0x07
    2a8a:	98 2f       	mov	r25, r24
    2a8c:	9c 7f       	andi	r25, 0xFC	; 252
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	89 2b       	or	r24, r25
    2a92:	e9 81       	ldd	r30, Y+1	; 0x01
    2a94:	fa 81       	ldd	r31, Y+2	; 0x02
    2a96:	87 83       	std	Z+7, r24	; 0x07
}
    2a98:	23 96       	adiw	r28, 0x03	; 3
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <TC0_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC0_SetCCBIntLevel( volatile TC0_t * tc, TC_CCBINTLVL_t intLevel )
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <TC0_SetCCBIntLevel+0x6>
    2aaa:	0f 92       	push	r0
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCBINTLVL_gm ) | intLevel;
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	87 81       	ldd	r24, Z+7	; 0x07
    2abc:	98 2f       	mov	r25, r24
    2abe:	93 7f       	andi	r25, 0xF3	; 243
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	89 2b       	or	r24, r25
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	87 83       	std	Z+7, r24	; 0x07
}
    2aca:	23 96       	adiw	r28, 0x03	; 3
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <TC1_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC1_SetCCBIntLevel( volatile TC1_t * tc, TC_CCBINTLVL_t intLevel )
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <TC1_SetCCBIntLevel+0x6>
    2adc:	0f 92       	push	r0
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	9a 83       	std	Y+2, r25	; 0x02
    2ae6:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCBINTLVL_gm ) | intLevel;
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	87 81       	ldd	r24, Z+7	; 0x07
    2aee:	98 2f       	mov	r25, r24
    2af0:	93 7f       	andi	r25, 0xF3	; 243
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	89 2b       	or	r24, r25
    2af6:	e9 81       	ldd	r30, Y+1	; 0x01
    2af8:	fa 81       	ldd	r31, Y+2	; 0x02
    2afa:	87 83       	std	Z+7, r24	; 0x07
}
    2afc:	23 96       	adiw	r28, 0x03	; 3
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	cf 91       	pop	r28
    2b04:	df 91       	pop	r29
    2b06:	08 95       	ret

00002b08 <TC0_SetCCCIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCCIntLevel( volatile TC0_t * tc, TC_CCCINTLVL_t intLevel )
{
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <TC0_SetCCCIntLevel+0x6>
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCCINTLVL_gm ) | intLevel;
    2b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1e:	87 81       	ldd	r24, Z+7	; 0x07
    2b20:	98 2f       	mov	r25, r24
    2b22:	9f 7c       	andi	r25, 0xCF	; 207
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	89 2b       	or	r24, r25
    2b28:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2c:	87 83       	std	Z+7, r24	; 0x07
}
    2b2e:	23 96       	adiw	r28, 0x03	; 3
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <TC0_SetCCDIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCDIntLevel( volatile TC0_t * tc, TC_CCDINTLVL_t intLevel )
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <TC0_SetCCDIntLevel+0x6>
    2b40:	0f 92       	push	r0
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCDINTLVL_gm ) | intLevel;
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	87 81       	ldd	r24, Z+7	; 0x07
    2b52:	98 2f       	mov	r25, r24
    2b54:	9f 73       	andi	r25, 0x3F	; 63
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	89 2b       	or	r24, r25
    2b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5e:	87 83       	std	Z+7, r24	; 0x07
}
    2b60:	23 96       	adiw	r28, 0x03	; 3
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <TC0_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 0 module instance.
 */
void TC0_Reset( volatile TC0_t * tc )
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <TC0_Reset+0x6>
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	9a 83       	std	Y+2, r25	; 0x02
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	80 81       	ld	r24, Z
    2b80:	80 7f       	andi	r24, 0xF0	; 240
    2b82:	e9 81       	ldd	r30, Y+1	; 0x01
    2b84:	fa 81       	ldd	r31, Y+2	; 0x02
    2b86:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    2b88:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8c:	8c e0       	ldi	r24, 0x0C	; 12
    2b8e:	81 87       	std	Z+9, r24	; 0x09
}
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <TC1_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 1 module instance.
 */
void TC1_Reset( volatile TC1_t * tc )
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <TC1_Reset+0x6>
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	80 81       	ld	r24, Z
    2bae:	80 7f       	andi	r24, 0xF0	; 240
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	8c e0       	ldi	r24, 0x0C	; 12
    2bbc:	81 87       	std	Z+9, r24	; 0x09
}
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	25 97       	sbiw	r28, 0x05	; 5
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	9a 83       	std	Y+2, r25	; 0x02
    2bda:	6b 83       	std	Y+3, r22	; 0x03
    2bdc:	7c 83       	std	Y+4, r23	; 0x04
    2bde:	4d 83       	std	Y+5, r20	; 0x05
	usart_data->usart = usart;
    2be0:	e9 81       	ldd	r30, Y+1	; 0x01
    2be2:	fa 81       	ldd	r31, Y+2	; 0x02
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	80 83       	st	Z, r24
    2bea:	91 83       	std	Z+1, r25	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
    2bec:	e9 81       	ldd	r30, Y+1	; 0x01
    2bee:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	82 83       	std	Z+2, r24	; 0x02

	usart_data->buffer.RX_Tail = 0;
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	ec 5b       	subi	r30, 0xBC	; 188
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	10 82       	st	Z, r1
	usart_data->buffer.RX_Head = 0;
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	fc 01       	movw	r30, r24
    2c06:	ed 5b       	subi	r30, 0xBD	; 189
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	10 82       	st	Z, r1
	usart_data->buffer.TX_Tail = 0;
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	fc 01       	movw	r30, r24
    2c12:	ea 5b       	subi	r30, 0xBA	; 186
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	10 82       	st	Z, r1
	usart_data->buffer.TX_Head = 0;
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	eb 5b       	subi	r30, 0xBB	; 187
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	10 82       	st	Z, r1
}
    2c24:	25 96       	adiw	r28, 0x05	; 5
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param usart_data         The USART_data_t struct instance
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <USART_InterruptDriver_DreInterruptLevel_Set+0x6>
    2c36:	0f 92       	push	r0
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	6b 83       	std	Y+3, r22	; 0x03
	usart_data->dreIntLevel = dreIntLevel;
    2c42:	e9 81       	ldd	r30, Y+1	; 0x01
    2c44:	fa 81       	ldd	r31, Y+2	; 0x02
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	82 83       	std	Z+2, r24	; 0x02
}
    2c4a:	23 96       	adiw	r28, 0x03	; 3
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	25 97       	sbiw	r28, 0x05	; 5
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	8b 83       	std	Y+3, r24	; 0x03
    2c66:	9c 83       	std	Y+4, r25	; 0x04
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	eb 5b       	subi	r30, 0xBB	; 187
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	80 81       	ld	r24, Z
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	8f 71       	andi	r24, 0x1F	; 31
    2c78:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	fc 01       	movw	r30, r24
    2c80:	ea 5b       	subi	r30, 0xBA	; 186
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	89 83       	std	Y+1, r24	; 0x01

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    2c88:	1d 82       	std	Y+5, r1	; 0x05
    2c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	98 17       	cp	r25, r24
    2c90:	11 f0       	breq	.+4      	; 0x2c96 <USART_TXBuffer_FreeSpace+0x40>
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c98:	25 96       	adiw	r28, 0x05	; 5
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	cf 91       	pop	r28
    2ca0:	df 91       	pop	r29
    2ca2:	08 95       	ret

00002ca4 <USART_TXBuffer_SendAll>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_SendAll(USART_data_t * usart_data)
{
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	25 97       	sbiw	r28, 0x05	; 5
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	de bf       	out	0x3e, r29	; 62
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head-1 ) & USART_TX_BUFFER_MASK;
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	fc 01       	movw	r30, r24
    2cbc:	eb 5b       	subi	r30, 0xBB	; 187
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	80 81       	ld	r24, Z
    2cc2:	81 50       	subi	r24, 0x01	; 1
    2cc4:	8f 71       	andi	r24, 0x1F	; 31
    2cc6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	fc 01       	movw	r30, r24
    2cce:	ea 5b       	subi	r30, 0xBA	; 186
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	89 83       	std	Y+1, r24	; 0x01

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    2cd6:	1d 82       	std	Y+5, r1	; 0x05
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	98 17       	cp	r25, r24
    2cde:	11 f0       	breq	.+4      	; 0x2ce4 <USART_TXBuffer_SendAll+0x40>
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ce6:	25 96       	adiw	r28, 0x05	; 5
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	28 97       	sbiw	r28, 0x08	; 8
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	8e 83       	std	Y+6, r24	; 0x06
    2d02:	9f 83       	std	Y+7, r25	; 0x07
    2d04:	68 87       	std	Y+8, r22	; 0x08
	uint8_t tempCTRLA;
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
    2d06:	8e 81       	ldd	r24, Y+6	; 0x06
    2d08:	9f 81       	ldd	r25, Y+7	; 0x07
    2d0a:	03 96       	adiw	r24, 0x03	; 3
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	9f 81       	ldd	r25, Y+7	; 0x07
    2d14:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <USART_TXBuffer_FreeSpace>
    2d18:	8b 83       	std	Y+3, r24	; 0x03


	if(TXBuffer_FreeSpace)
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	88 23       	and	r24, r24
    2d1e:	91 f1       	breq	.+100    	; 0x2d84 <USART_TXBuffer_PutByte+0x92>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	fc 01       	movw	r30, r24
    2d26:	ee 5b       	subi	r30, 0xBE	; 190
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8c 83       	std	Y+4, r24	; 0x04
	  	TXbufPtr->TX[tempTX_Head]= data;
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	82 0f       	add	r24, r18
    2d3a:	93 1f       	adc	r25, r19
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	b0 96       	adiw	r30, 0x20	; 32
    2d40:	88 85       	ldd	r24, Y+8	; 0x08
    2d42:	80 83       	st	Z, r24
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	8f 5f       	subi	r24, 0xFF	; 255
    2d48:	28 2f       	mov	r18, r24
    2d4a:	2f 71       	andi	r18, 0x1F	; 31
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d50:	fc 01       	movw	r30, r24
    2d52:	ee 5b       	subi	r30, 0xBE	; 190
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	20 83       	st	Z, r18

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    2d58:	ee 81       	ldd	r30, Y+6	; 0x06
    2d5a:	ff 81       	ldd	r31, Y+7	; 0x07
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	f0 81       	ld	r31, Z
    2d60:	e0 2d       	mov	r30, r0
    2d62:	83 81       	ldd	r24, Z+3	; 0x03
    2d64:	8d 83       	std	Y+5, r24	; 0x05
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    2d66:	8d 81       	ldd	r24, Y+5	; 0x05
    2d68:	98 2f       	mov	r25, r24
    2d6a:	9c 7f       	andi	r25, 0xFC	; 252
    2d6c:	ee 81       	ldd	r30, Y+6	; 0x06
    2d6e:	ff 81       	ldd	r31, Y+7	; 0x07
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	89 2b       	or	r24, r25
    2d74:	8d 83       	std	Y+5, r24	; 0x05
		usart_data->usart->CTRLA = tempCTRLA;
    2d76:	ee 81       	ldd	r30, Y+6	; 0x06
    2d78:	ff 81       	ldd	r31, Y+7	; 0x07
    2d7a:	01 90       	ld	r0, Z+
    2d7c:	f0 81       	ld	r31, Z
    2d7e:	e0 2d       	mov	r30, r0
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	83 83       	std	Z+3, r24	; 0x03
	}
	return TXBuffer_FreeSpace;
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d86:	28 96       	adiw	r28, 0x08	; 8
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	25 97       	sbiw	r28, 0x05	; 5
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	8b 83       	std	Y+3, r24	; 0x03
    2da2:	9c 83       	std	Y+4, r25	; 0x04
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	fc 01       	movw	r30, r24
    2daa:	ed 5b       	subi	r30, 0xBD	; 189
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	fc 01       	movw	r30, r24
    2db8:	ec 5b       	subi	r30, 0xBC	; 188
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	80 81       	ld	r24, Z
    2dbe:	89 83       	std	Y+1, r24	; 0x01

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    2dc0:	1d 82       	std	Y+5, r1	; 0x05
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	98 17       	cp	r25, r24
    2dc8:	11 f0       	breq	.+4      	; 0x2dce <USART_RXBufferData_Available+0x3c>
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2dd0:	25 96       	adiw	r28, 0x05	; 5
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	25 97       	sbiw	r28, 0x05	; 5
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	8c 83       	std	Y+4, r24	; 0x04
    2dec:	9d 83       	std	Y+5, r25	; 0x05
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
    2dee:	8c 81       	ldd	r24, Y+4	; 0x04
    2df0:	9d 81       	ldd	r25, Y+5	; 0x05
    2df2:	03 96       	adiw	r24, 0x03	; 3
    2df4:	8a 83       	std	Y+2, r24	; 0x02
    2df6:	9b 83       	std	Y+3, r25	; 0x03
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	ef 5b       	subi	r30, 0xBF	; 191
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	e2 0f       	add	r30, r18
    2e10:	f3 1f       	adc	r31, r19
    2e12:	80 81       	ld	r24, Z
    2e14:	89 83       	std	Y+1, r24	; 0x01

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	ef 5b       	subi	r30, 0xBF	; 191
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	28 2f       	mov	r18, r24
    2e26:	2f 71       	andi	r18, 0x1F	; 31
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	ef 5b       	subi	r30, 0xBF	; 191
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	20 83       	st	Z, r18

	return ans;
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e36:	25 96       	adiw	r28, 0x05	; 5
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	28 97       	sbiw	r28, 0x08	; 8
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	8f 83       	std	Y+7, r24	; 0x07
    2e52:	98 87       	std	Y+8, r25	; 0x08
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
    2e54:	8f 81       	ldd	r24, Y+7	; 0x07
    2e56:	98 85       	ldd	r25, Y+8	; 0x08
    2e58:	03 96       	adiw	r24, 0x03	; 3
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	9e 83       	std	Y+6, r25	; 0x06
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	fc 01       	movw	r30, r24
    2e64:	e0 5c       	subi	r30, 0xC0	; 192
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 5f       	subi	r24, 0xFF	; 255
    2e6c:	8f 71       	andi	r24, 0x1F	; 31
    2e6e:	8b 83       	std	Y+3, r24	; 0x03

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	fc 01       	movw	r30, r24
    2e76:	ef 5b       	subi	r30, 0xBF	; 191
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data = usart_data->usart->DATA;
    2e7e:	ef 81       	ldd	r30, Y+7	; 0x07
    2e80:	f8 85       	ldd	r31, Y+8	; 0x08
    2e82:	01 90       	ld	r0, Z+
    2e84:	f0 81       	ld	r31, Z
    2e86:	e0 2d       	mov	r30, r0
    2e88:	80 81       	ld	r24, Z
    2e8a:	89 83       	std	Y+1, r24	; 0x01

	if (tempRX_Head == tempRX_Tail) {
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	98 17       	cp	r25, r24
    2e92:	11 f4       	brne	.+4      	; 0x2e98 <USART_RXComplete+0x56>
	  	ans = false;
    2e94:	1c 82       	std	Y+4, r1	; 0x04
    2e96:	19 c0       	rjmp	.+50     	; 0x2eca <USART_RXComplete+0x88>
	}else{
		ans = true;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	8c 83       	std	Y+4, r24	; 0x04
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    2e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9e:	98 85       	ldd	r25, Y+8	; 0x08
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	ed 5b       	subi	r30, 0xBD	; 189
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	8f 81       	ldd	r24, Y+7	; 0x07
    2eae:	98 85       	ldd	r25, Y+8	; 0x08
    2eb0:	82 0f       	add	r24, r18
    2eb2:	93 1f       	adc	r25, r19
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	33 96       	adiw	r30, 0x03	; 3
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	80 83       	st	Z, r24
		usart_data->buffer.RX_Head = tempRX_Head;
    2ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebe:	98 85       	ldd	r25, Y+8	; 0x08
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	ed 5b       	subi	r30, 0xBD	; 189
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	80 83       	st	Z, r24
	}
	return ans;
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2ecc:	28 96       	adiw	r28, 0x08	; 8
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	cf 91       	pop	r28
    2ed4:	df 91       	pop	r29
    2ed6:	08 95       	ret

00002ed8 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    2ed8:	df 93       	push	r29
    2eda:	cf 93       	push	r28
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	27 97       	sbiw	r28, 0x07	; 7
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	8e 83       	std	Y+6, r24	; 0x06
    2ee8:	9f 83       	std	Y+7, r25	; 0x07
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;
    2eea:	8e 81       	ldd	r24, Y+6	; 0x06
    2eec:	9f 81       	ldd	r25, Y+7	; 0x07
    2eee:	03 96       	adiw	r24, 0x03	; 3
    2ef0:	8c 83       	std	Y+4, r24	; 0x04
    2ef2:	9d 83       	std	Y+5, r25	; 0x05

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    2ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef8:	fc 01       	movw	r30, r24
    2efa:	ea 5b       	subi	r30, 0xBA	; 186
    2efc:	ff 4f       	sbci	r31, 0xFF	; 255
    2efe:	80 81       	ld	r24, Z
    2f00:	8b 83       	std	Y+3, r24	; 0x03
	if (bufPtr->TX_Head == tempTX_Tail){
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	9d 81       	ldd	r25, Y+5	; 0x05
    2f06:	fc 01       	movw	r30, r24
    2f08:	ee 5b       	subi	r30, 0xBE	; 190
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	90 81       	ld	r25, Z
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	98 17       	cp	r25, r24
    2f12:	91 f4       	brne	.+36     	; 0x2f38 <USART_DataRegEmpty+0x60>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    2f14:	ee 81       	ldd	r30, Y+6	; 0x06
    2f16:	ff 81       	ldd	r31, Y+7	; 0x07
    2f18:	01 90       	ld	r0, Z+
    2f1a:	f0 81       	ld	r31, Z
    2f1c:	e0 2d       	mov	r30, r0
    2f1e:	83 81       	ldd	r24, Z+3	; 0x03
    2f20:	8a 83       	std	Y+2, r24	; 0x02
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	8c 7f       	andi	r24, 0xFC	; 252
    2f26:	8a 83       	std	Y+2, r24	; 0x02
		usart_data->usart->CTRLA = tempCTRLA;
    2f28:	ee 81       	ldd	r30, Y+6	; 0x06
    2f2a:	ff 81       	ldd	r31, Y+7	; 0x07
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	f0 81       	ld	r31, Z
    2f30:	e0 2d       	mov	r30, r0
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	83 83       	std	Z+3, r24	; 0x03
    2f36:	26 c0       	rjmp	.+76     	; 0x2f84 <USART_DataRegEmpty+0xac>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    2f38:	8e 81       	ldd	r24, Y+6	; 0x06
    2f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	ea 5b       	subi	r30, 0xBA	; 186
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4c:	82 0f       	add	r24, r18
    2f4e:	93 1f       	adc	r25, r19
    2f50:	fc 01       	movw	r30, r24
    2f52:	b0 96       	adiw	r30, 0x20	; 32
    2f54:	80 81       	ld	r24, Z
    2f56:	89 83       	std	Y+1, r24	; 0x01
		usart_data->usart->DATA = data;
    2f58:	ee 81       	ldd	r30, Y+6	; 0x06
    2f5a:	ff 81       	ldd	r31, Y+7	; 0x07
    2f5c:	01 90       	ld	r0, Z+
    2f5e:	f0 81       	ld	r31, Z
    2f60:	e0 2d       	mov	r30, r0
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	80 83       	st	Z, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    2f66:	8c 81       	ldd	r24, Y+4	; 0x04
    2f68:	9d 81       	ldd	r25, Y+5	; 0x05
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	ed 5b       	subi	r30, 0xBD	; 189
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	8f 5f       	subi	r24, 0xFF	; 255
    2f74:	28 2f       	mov	r18, r24
    2f76:	2f 71       	andi	r18, 0x1F	; 31
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	ed 5b       	subi	r30, 0xBD	; 189
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	20 83       	st	Z, r18
	}
}
    2f84:	27 96       	adiw	r28, 0x07	; 7
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	08 95       	ret

00002f90 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <USART_NineBits_PutChar+0x6>
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <USART_NineBits_PutChar+0x8>
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	6b 83       	std	Y+3, r22	; 0x03
    2fa2:	7c 83       	std	Y+4, r23	; 0x04
	if(data & 0x0100) {
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa8:	80 70       	andi	r24, 0x00	; 0
    2faa:	91 70       	andi	r25, 0x01	; 1
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	41 f0       	breq	.+16     	; 0x2fc0 <USART_NineBits_PutChar+0x30>
		usart->CTRLB |= USART_TXB8_bm;
    2fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb4:	84 81       	ldd	r24, Z+4	; 0x04
    2fb6:	81 60       	ori	r24, 0x01	; 1
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	84 83       	std	Z+4, r24	; 0x04
    2fbe:	07 c0       	rjmp	.+14     	; 0x2fce <USART_NineBits_PutChar+0x3e>
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
    2fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc4:	84 81       	ldd	r24, Z+4	; 0x04
    2fc6:	8e 7f       	andi	r24, 0xFE	; 254
    2fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fca:	fa 81       	ldd	r31, Y+2	; 0x02
    2fcc:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd4:	80 83       	st	Z, r24
}
    2fd6:	24 96       	adiw	r28, 0x04	; 4
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <USART_NineBits_GetChar+0x6>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <USART_NineBits_GetChar+0x8>
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
	if(usart->CTRLB & USART_RXB8_bm) {
    2ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff6:	84 81       	ldd	r24, Z+4	; 0x04
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	81 70       	andi	r24, 0x01	; 1
    2ffe:	90 70       	andi	r25, 0x00	; 0
    3000:	88 23       	and	r24, r24
    3002:	49 f0       	breq	.+18     	; 0x3016 <__stack+0x17>
		return(0x0100 | usart->DATA);
    3004:	e9 81       	ldd	r30, Y+1	; 0x01
    3006:	fa 81       	ldd	r31, Y+2	; 0x02
    3008:	80 81       	ld	r24, Z
    300a:	88 2f       	mov	r24, r24
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	91 60       	ori	r25, 0x01	; 1
    3010:	8b 83       	std	Y+3, r24	; 0x03
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <__stack+0x25>
	}else {
		return(usart->DATA);
    3016:	e9 81       	ldd	r30, Y+1	; 0x01
    3018:	fa 81       	ldd	r31, Y+2	; 0x02
    301a:	80 81       	ld	r24, Z
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	2b 83       	std	Y+3, r18	; 0x03
    3022:	3c 83       	std	Y+4, r19	; 0x04
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    3028:	24 96       	adiw	r28, 0x04	; 4
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <CbCtrlInitDevicesPre>:
CB_FIRE_START,	0X7A,	0XB1,	0XB2,	0XB3,
			0XB4,	0XB5,	0XB6,	0XB7,	0X00
};

static void CbCtrlInitDevicesPre(void)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	cli();
    303c:	f8 94       	cli

	InitClkSys();
    303e:	0e 94 cb 04 	call	0x996	; 0x996 <InitClkSys>

	/* ÓÃÓÚLCDÆÁÄ»¿ØÖÆ CB_LCD */
	InitUsartC1(19200);
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	7b e4       	ldi	r23, 0x4B	; 75
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 70 06 	call	0xce0	; 0xce0 <InitUsartC1>

	/* ÓÃÓÚÎÞÏß¿ØÖÆ£¬CB_RC 	*/
	InitUsartC0(19200);
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	7b e4       	ldi	r23, 0x4B	; 75
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 00 06 	call	0xc00	; 0xc00 <InitUsartC0>

	/* ÓÃÓÚÓÐÏß¿ØÖÆ, CB_RC1 	*/
	InitUsartD0(19200);
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	7b e4       	ldi	r23, 0x4B	; 75
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <InitUsartD0>


	/* ÓÃÓÚ´®ÐÐÊý¾Ý½ÓÊÕ¿ØÖÆ */
	InitTCD0();
    3066:	0e 94 79 05 	call	0xaf2	; 0xaf2 <InitTCD0>

	/* ÓÃÓÚ´®ÐÐÊý¾Ý·¢ËÍ¿ØÖÆ */
	InitTCD1();
    306a:	0e 94 8b 05 	call	0xb16	; 0xb16 <InitTCD1>


	/* Enable all interrupt levels. */
	PMIC_SetVectorLocationToApplication();
    306e:	0e 94 cb 12 	call	0x2596	; 0x2596 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();
    3072:	a0 ea       	ldi	r26, 0xA0	; 160
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e0 ea       	ldi	r30, 0xA0	; 160
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	81 60       	ori	r24, 0x01	; 1
    307e:	12 96       	adiw	r26, 0x02	; 2
    3080:	8c 93       	st	X, r24
	PMIC_EnableMediumLevel();
    3082:	a0 ea       	ldi	r26, 0xA0	; 160
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e0 ea       	ldi	r30, 0xA0	; 160
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	82 60       	ori	r24, 0x02	; 2
    308e:	12 96       	adiw	r26, 0x02	; 2
    3090:	8c 93       	st	X, r24
	PMIC_EnableHighLevel();
    3092:	a0 ea       	ldi	r26, 0xA0	; 160
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e0 ea       	ldi	r30, 0xA0	; 160
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	82 81       	ldd	r24, Z+2	; 0x02
    309c:	84 60       	ori	r24, 0x04	; 4
    309e:	12 96       	adiw	r26, 0x02	; 2
    30a0:	8c 93       	st	X, r24
    30a2:	12 97       	sbiw	r26, 0x02	; 2

	/**********IOÊäÈë¿ÚÉèÖÃ²Ù×÷**************/
	PORTC.DIRCLR  = PIN0_bm|PIN1_bm|PIN4_bm|PIN5_bm;
    30a4:	e0 e4       	ldi	r30, 0x40	; 64
    30a6:	f6 e0       	ldi	r31, 0x06	; 6
    30a8:	83 e3       	ldi	r24, 0x33	; 51
    30aa:	82 83       	std	Z+2, r24	; 0x02
	PORTC.OUTSET  = PIN0_bm|PIN1_bm|PIN4_bm|PIN5_bm;
    30ac:	e0 e4       	ldi	r30, 0x40	; 64
    30ae:	f6 e0       	ldi	r31, 0x06	; 6
    30b0:	83 e3       	ldi	r24, 0x33	; 51
    30b2:	85 83       	std	Z+5, r24	; 0x05

	PORTD.DIRCLR  = PIN5_bm|PIN6_bm|PIN7_bm;
    30b4:	e0 e6       	ldi	r30, 0x60	; 96
    30b6:	f6 e0       	ldi	r31, 0x06	; 6
    30b8:	80 ee       	ldi	r24, 0xE0	; 224
    30ba:	82 83       	std	Z+2, r24	; 0x02
	PORTD.OUTSET  = PIN5_bm|PIN6_bm|PIN7_bm;
    30bc:	e0 e6       	ldi	r30, 0x60	; 96
    30be:	f6 e0       	ldi	r31, 0x06	; 6
    30c0:	80 ee       	ldi	r24, 0xE0	; 224
    30c2:	85 83       	std	Z+5, r24	; 0x05

	PORTE.DIRCLR  = PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
    30c4:	e0 e8       	ldi	r30, 0x80	; 128
    30c6:	f6 e0       	ldi	r31, 0x06	; 6
    30c8:	88 ef       	ldi	r24, 0xF8	; 248
    30ca:	82 83       	std	Z+2, r24	; 0x02
	PORTE.OUTSET  = PIN3_bm|PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm;
    30cc:	e0 e8       	ldi	r30, 0x80	; 128
    30ce:	f6 e0       	ldi	r31, 0x06	; 6
    30d0:	88 ef       	ldi	r24, 0xF8	; 248
    30d2:	85 83       	std	Z+5, r24	; 0x05

	PORTF.DIRCLR  = 0XFF;
    30d4:	e0 ea       	ldi	r30, 0xA0	; 160
    30d6:	f6 e0       	ldi	r31, 0x06	; 6
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	82 83       	std	Z+2, r24	; 0x02
	PORTF.OUTSET  = 0XFF;
    30dc:	e0 ea       	ldi	r30, 0xA0	; 160
    30de:	f6 e0       	ldi	r31, 0x06	; 6
    30e0:	8f ef       	ldi	r24, 0xFF	; 255
    30e2:	85 83       	std	Z+5, r24	; 0x05


	/**********IOÊä³ö¿ÚÉèÖÃ²Ù×÷**************/

	PORTD.DIRSET  = PIN0_bm;
    30e4:	e0 e6       	ldi	r30, 0x60	; 96
    30e6:	f6 e0       	ldi	r31, 0x06	; 6
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR  = PIN0_bm;
    30ec:	e0 e6       	ldi	r30, 0x60	; 96
    30ee:	f6 e0       	ldi	r31, 0x06	; 6
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	86 83       	std	Z+6, r24	; 0x06

	PORTE.DIRSET  = PIN0_bm|PIN1_bm|PIN2_bm;
    30f4:	e0 e8       	ldi	r30, 0x80	; 128
    30f6:	f6 e0       	ldi	r31, 0x06	; 6
    30f8:	87 e0       	ldi	r24, 0x07	; 7
    30fa:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTSET  = PIN0_bm|PIN1_bm|PIN2_bm;
    30fc:	e0 e8       	ldi	r30, 0x80	; 128
    30fe:	f6 e0       	ldi	r31, 0x06	; 6
    3100:	87 e0       	ldi	r24, 0x07	; 7
    3102:	85 83       	std	Z+5, r24	; 0x05


	/* Éè±¸×ÜÏßµÄRS485·¢ËÍ¶Ë¿ØÖÆ£¬ÉèÖÃÊä³ö£¬²¢Ê¹ÄÜÎÞÐ§ */
	PORTD.DIRSET  = PIN1_bm;
    3104:	e0 e6       	ldi	r30, 0x60	; 96
    3106:	f6 e0       	ldi	r31, 0x06	; 6
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR  = PIN1_bm;
    310c:	e0 e6       	ldi	r30, 0x60	; 96
    310e:	f6 e0       	ldi	r31, 0x06	; 6
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	86 83       	std	Z+6, r24	; 0x06


	/* Enable global interrupts. */
	sei();
    3114:	78 94       	sei
}
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <CbCtrlInit>:

static void CbCtrlInit(void)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	2e 97       	sbiw	r28, 0x0e	; 14
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	de bf       	out	0x3e, r29	; 62
	CbCtrlInitDevicesPre();
    312a:	0e 94 1a 18 	call	0x3034	; 0x3034 <CbCtrlInitDevicesPre>

	InitAdcA();
    312e:	0e 94 15 01 	call	0x22a	; 0x22a <InitAdcA>
	InitAdcB();
    3132:	0e 94 a9 01 	call	0x352	; 0x352 <InitAdcB>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	aa e7       	ldi	r26, 0x7A	; 122
    313c:	b4 e4       	ldi	r27, 0x44	; 68
    313e:	8b 87       	std	Y+11, r24	; 0x0b
    3140:	9c 87       	std	Y+12, r25	; 0x0c
    3142:	ad 87       	std	Y+13, r26	; 0x0d
    3144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3146:	6b 85       	ldd	r22, Y+11	; 0x0b
    3148:	7c 85       	ldd	r23, Y+12	; 0x0c
    314a:	8d 85       	ldd	r24, Y+13	; 0x0d
    314c:	9e 85       	ldd	r25, Y+14	; 0x0e
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	4a ef       	ldi	r20, 0xFA	; 250
    3154:	53 e4       	ldi	r21, 0x43	; 67
    3156:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	8f 83       	std	Y+7, r24	; 0x07
    3160:	98 87       	std	Y+8, r25	; 0x08
    3162:	a9 87       	std	Y+9, r26	; 0x09
    3164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3166:	6f 81       	ldd	r22, Y+7	; 0x07
    3168:	78 85       	ldd	r23, Y+8	; 0x08
    316a:	89 85       	ldd	r24, Y+9	; 0x09
    316c:	9a 85       	ldd	r25, Y+10	; 0x0a
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	2c f4       	brge	.+10     	; 0x3188 <CbCtrlInit+0x6c>
		__ticks = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	9e 83       	std	Y+6, r25	; 0x06
    3186:	3f c0       	rjmp	.+126    	; 0x3206 <CbCtrlInit+0xea>
	else if (__tmp > 65535)
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	3f ef       	ldi	r19, 0xFF	; 255
    3194:	4f e7       	ldi	r20, 0x7F	; 127
    3196:	57 e4       	ldi	r21, 0x47	; 71
    3198:	0e 94 0c 2b 	call	0x5618	; 0x5618 <__gtsf2>
    319c:	18 16       	cp	r1, r24
    319e:	4c f5       	brge	.+82     	; 0x31f2 <CbCtrlInit+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e2       	ldi	r20, 0x20	; 32
    31ae:	51 e4       	ldi	r21, 0x41	; 65
    31b0:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	9e 83       	std	Y+6, r25	; 0x06
    31c8:	0f c0       	rjmp	.+30     	; 0x31e8 <CbCtrlInit+0xcc>
    31ca:	82 e3       	ldi	r24, 0x32	; 50
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	8b 83       	std	Y+3, r24	; 0x03
    31d0:	9c 83       	std	Y+4, r25	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	9c 81       	ldd	r25, Y+4	; 0x04
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	f1 f7       	brne	.-4      	; 0x31d6 <CbCtrlInit+0xba>
    31da:	8b 83       	std	Y+3, r24	; 0x03
    31dc:	9c 83       	std	Y+4, r25	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31de:	8d 81       	ldd	r24, Y+5	; 0x05
    31e0:	9e 81       	ldd	r25, Y+6	; 0x06
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	8d 83       	std	Y+5, r24	; 0x05
    31e6:	9e 83       	std	Y+6, r25	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	9e 81       	ldd	r25, Y+6	; 0x06
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	69 f7       	brne	.-38     	; 0x31ca <CbCtrlInit+0xae>
    31f0:	14 c0       	rjmp	.+40     	; 0x321a <CbCtrlInit+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f2:	6f 81       	ldd	r22, Y+7	; 0x07
    31f4:	78 85       	ldd	r23, Y+8	; 0x08
    31f6:	89 85       	ldd	r24, Y+9	; 0x09
    31f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fa:	0e 94 90 27 	call	0x4f20	; 0x4f20 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	8d 83       	std	Y+5, r24	; 0x05
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	89 83       	std	Y+1, r24	; 0x01
    320c:	9a 83       	std	Y+2, r25	; 0x02
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <CbCtrlInit+0xf6>
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	9a 83       	std	Y+2, r25	; 0x02

	_delay_ms(1000);

	TC1_ConfigClockSource( &TCD1, TC_CLKSEL_DIV64_gc );
    321a:	80 e4       	ldi	r24, 0x40	; 64
    321c:	99 e0       	ldi	r25, 0x09	; 9
    321e:	65 e0       	ldi	r22, 0x05	; 5
    3220:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <TC1_ConfigClockSource>
	TC0_ConfigClockSource( &TCD0, TC_CLKSEL_DIV64_gc );
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	99 e0       	ldi	r25, 0x09	; 9
    3228:	65 e0       	ldi	r22, 0x05	; 5
    322a:	0e 94 b8 13 	call	0x2770	; 0x2770 <TC0_ConfigClockSource>

}
    322e:	2e 96       	adiw	r28, 0x0e	; 14
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <GetHeadSpeed>:

#define HEAD_MAX_SPEED	0X0007


static uint8_t GetHeadSpeed(uint8 InputAdc)
{
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	0f 92       	push	r0
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	89 83       	std	Y+1, r24	; 0x01

	if(InputAdc<HEAD_MID)
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	88 23       	and	r24, r24
    324a:	2c f0       	brlt	.+10     	; 0x3256 <GetHeadSpeed+0x1c>
		InputAdc = HEAD_MID1 - InputAdc;
    324c:	80 e6       	ldi	r24, 0x60	; 96
    324e:	99 81       	ldd	r25, Y+1	; 0x01
    3250:	89 1b       	sub	r24, r25
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	03 c0       	rjmp	.+6      	; 0x325c <GetHeadSpeed+0x22>
	else
		InputAdc = InputAdc - HEAD_MID2;
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	80 5a       	subi	r24, 0xA0	; 160
    325a:	89 83       	std	Y+1, r24	; 0x01

	InputAdc >>= 0x03;
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	86 95       	lsr	r24
    3260:	86 95       	lsr	r24
    3262:	86 95       	lsr	r24
    3264:	89 83       	std	Y+1, r24	; 0x01
	InputAdc += 0x01;
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	8f 5f       	subi	r24, 0xFF	; 255
    326a:	89 83       	std	Y+1, r24	; 0x01

	if(InputAdc > 0x07)
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	88 30       	cpi	r24, 0x08	; 8
    3270:	18 f0       	brcs	.+6      	; 0x3278 <GetHeadSpeed+0x3e>
		InputAdc = 0x07;
    3272:	87 e0       	ldi	r24, 0x07	; 7
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <GetHeadSpeed+0x48>
	else if(InputAdc < 0x02)
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	82 30       	cpi	r24, 0x02	; 2
    327c:	10 f4       	brcc	.+4      	; 0x3282 <GetHeadSpeed+0x48>
		InputAdc = 0x02;
    327e:	82 e0       	ldi	r24, 0x02	; 2
    3280:	89 83       	std	Y+1, r24	; 0x01


	return InputAdc;
    3282:	89 81       	ldd	r24, Y+1	; 0x01
}
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	08 95       	ret

0000328c <CbIoToArmCtlrData>:

static void CbIoToArmCtlrData(void)
{
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	61 97       	sbiw	r28, 0x11	; 17
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	de bf       	out	0x3e, r29	; 62
	uint8_t TempHeadX,TempHeadY,TempHeadFocus;
	uint8_t TempChar;

	unsigned char TempPINF,TempPINE;

	TempPINE = PORT_GetPortValue( &PORTE );
    329a:	e0 e8       	ldi	r30, 0x80	; 128
    329c:	f6 e0       	ldi	r31, 0x06	; 6
    329e:	80 85       	ldd	r24, Z+8	; 0x08
    32a0:	89 83       	std	Y+1, r24	; 0x01
	TempPINF = PORT_GetPortValue( &PORTF );
    32a2:	e0 ea       	ldi	r30, 0xA0	; 160
    32a4:	f6 e0       	ldi	r31, 0x06	; 6
    32a6:	80 85       	ldd	r24, Z+8	; 0x08
    32a8:	8a 83       	std	Y+2, r24	; 0x02

	TempStateJoint1 = TempPINF&0x03;
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	83 70       	andi	r24, 0x03	; 3
    32ae:	89 8b       	std	Y+17, r24	; 0x11
	TempStateJoint2 = (TempPINF>>2)&0x03;
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	86 95       	lsr	r24
    32b4:	86 95       	lsr	r24
    32b6:	83 70       	andi	r24, 0x03	; 3
    32b8:	88 8b       	std	Y+16, r24	; 0x10
	TempStateJoint3 = (TempPINF>>4)&0x03;
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	82 95       	swap	r24
    32be:	8f 70       	andi	r24, 0x0F	; 15
    32c0:	83 70       	andi	r24, 0x03	; 3
    32c2:	8f 87       	std	Y+15, r24	; 0x0f
	TempStateJoint4 = (TempPINF>>6)&0x03;
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	82 95       	swap	r24
    32c8:	86 95       	lsr	r24
    32ca:	86 95       	lsr	r24
    32cc:	83 70       	andi	r24, 0x03	; 3
    32ce:	8e 87       	std	Y+14, r24	; 0x0e


	CbCtrlData.Arm12356Speed 	= 0x00;
    32d0:	10 92 a9 20 	sts	0x20A9, r1
	CbCtrlData.Arm12Ctrl 		= 0x00;
    32d4:	10 92 a1 20 	sts	0x20A1, r1
	CbCtrlData.Arm34Ctrl 		= 0x00;
    32d8:	10 92 a2 20 	sts	0x20A2, r1
	CbCtrlData.Arm50Ctrl 		= 0x00;
    32dc:	10 92 a3 20 	sts	0x20A3, r1
	CbCtrlData.Arm78Ctrl 		= 0x00;
    32e0:	10 92 a4 20 	sts	0x20A4, r1
	CbCtrlData.Arm6Ctrl 		= 0x00;
    32e4:	10 92 a5 20 	sts	0x20A5, r1

	/********************ÉèÖÃ»úÐµ±ÛËÙ¶È******************/
	TempArmSpeed = adc_a_control.ad0;
    32e8:	80 91 0b 20 	lds	r24, 0x200B
    32ec:	90 91 0c 20 	lds	r25, 0x200C
    32f0:	8b 87       	std	Y+11, r24	; 0x0b
    32f2:	9c 87       	std	Y+12, r25	; 0x0c
	TempArmSpeed >>= 0x09;
    32f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    32f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    32f8:	89 2f       	mov	r24, r25
    32fa:	99 27       	eor	r25, r25
    32fc:	86 95       	lsr	r24
    32fe:	8b 87       	std	Y+11, r24	; 0x0b
    3300:	9c 87       	std	Y+12, r25	; 0x0c
	TempArmSpeed += 1;
    3302:	8b 85       	ldd	r24, Y+11	; 0x0b
    3304:	9c 85       	ldd	r25, Y+12	; 0x0c
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	8b 87       	std	Y+11, r24	; 0x0b
    330a:	9c 87       	std	Y+12, r25	; 0x0c
	if(TempArmSpeed>0x0007)
    330c:	8b 85       	ldd	r24, Y+11	; 0x0b
    330e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3310:	88 30       	cpi	r24, 0x08	; 8
    3312:	91 05       	cpc	r25, r1
    3314:	28 f0       	brcs	.+10     	; 0x3320 <CbIoToArmCtlrData+0x94>
		TempArmSpeed =0x0007;
    3316:	87 e0       	ldi	r24, 0x07	; 7
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	8b 87       	std	Y+11, r24	; 0x0b
    331c:	9c 87       	std	Y+12, r25	; 0x0c
    331e:	09 c0       	rjmp	.+18     	; 0x3332 <CbIoToArmCtlrData+0xa6>
	else if(TempArmSpeed<0x0002)
    3320:	8b 85       	ldd	r24, Y+11	; 0x0b
    3322:	9c 85       	ldd	r25, Y+12	; 0x0c
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	91 05       	cpc	r25, r1
    3328:	20 f4       	brcc	.+8      	; 0x3332 <CbIoToArmCtlrData+0xa6>
		TempArmSpeed =0x0002;
    332a:	82 e0       	ldi	r24, 0x02	; 2
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	8b 87       	std	Y+11, r24	; 0x0b
    3330:	9c 87       	std	Y+12, r25	; 0x0c

	//TempArmSpeed = 0x00 Îª×ÔÓÉ×´Ì¬
	//TempArmSpeed = 0x01 ÎªËÙ¶ÈÎª0×´Ì¬
	CbCtrlData.Arm12356Speed = TempArmSpeed;
    3332:	8b 85       	ldd	r24, Y+11	; 0x0b
    3334:	80 93 a9 20 	sts	0x20A9, r24


	/******************* ARM1 ****************************/
	//	PF0		IN_JOINT1_A		µ××ù×ó×ª
	//	PF1		IN_JOINT1_B		µ××ùÓÒ×ª
	if( TempStateJoint1 == 0x02)			//µ×ÅÌ×ó×ª
    3338:	89 89       	ldd	r24, Y+17	; 0x11
    333a:	82 30       	cpi	r24, 0x02	; 2
    333c:	91 f4       	brne	.+36     	; 0x3362 <CbIoToArmCtlrData+0xd6>
		CbCtrlData.Arm12Ctrl |= (0x80|(CbCtrlData.Arm12356Speed<<4));
    333e:	80 91 a1 20 	lds	r24, 0x20A1
    3342:	28 2f       	mov	r18, r24
    3344:	80 91 a9 20 	lds	r24, 0x20A9
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	82 95       	swap	r24
    334e:	92 95       	swap	r25
    3350:	90 7f       	andi	r25, 0xF0	; 240
    3352:	98 27       	eor	r25, r24
    3354:	80 7f       	andi	r24, 0xF0	; 240
    3356:	98 27       	eor	r25, r24
    3358:	80 68       	ori	r24, 0x80	; 128
    335a:	82 2b       	or	r24, r18
    335c:	80 93 a1 20 	sts	0x20A1, r24
    3360:	18 c0       	rjmp	.+48     	; 0x3392 <CbIoToArmCtlrData+0x106>
	else if( TempStateJoint1 == 0x01)		//µ×ÅÌÓÒ×ª
    3362:	89 89       	ldd	r24, Y+17	; 0x11
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	89 f4       	brne	.+34     	; 0x338a <CbIoToArmCtlrData+0xfe>
		CbCtrlData.Arm12Ctrl |= (0x00|(CbCtrlData.Arm12356Speed<<4));
    3368:	80 91 a1 20 	lds	r24, 0x20A1
    336c:	28 2f       	mov	r18, r24
    336e:	80 91 a9 20 	lds	r24, 0x20A9
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	82 95       	swap	r24
    3378:	92 95       	swap	r25
    337a:	90 7f       	andi	r25, 0xF0	; 240
    337c:	98 27       	eor	r25, r24
    337e:	80 7f       	andi	r24, 0xF0	; 240
    3380:	98 27       	eor	r25, r24
    3382:	82 2b       	or	r24, r18
    3384:	80 93 a1 20 	sts	0x20A1, r24
    3388:	04 c0       	rjmp	.+8      	; 0x3392 <CbIoToArmCtlrData+0x106>
	else
		CbCtrlData.Arm12Ctrl |= 0x00;
    338a:	80 91 a1 20 	lds	r24, 0x20A1
    338e:	80 93 a1 20 	sts	0x20A1, r24

	/******************** ARM2 ***************************/
	//	PF2		IN_JOINT2_A		´ó±ÛÏÂ¸©
	//	PF3		IN_JOINT2_B		´ó±ÛÉÏÑö
	if( TempStateJoint2 == 0x02)			//´ó±ÛÏÂ¸©
    3392:	88 89       	ldd	r24, Y+16	; 0x10
    3394:	82 30       	cpi	r24, 0x02	; 2
    3396:	41 f4       	brne	.+16     	; 0x33a8 <CbIoToArmCtlrData+0x11c>
		CbCtrlData.Arm12Ctrl |= (0x00|(CbCtrlData.Arm12356Speed<<0));
    3398:	80 91 a1 20 	lds	r24, 0x20A1
    339c:	90 91 a9 20 	lds	r25, 0x20A9
    33a0:	89 2b       	or	r24, r25
    33a2:	80 93 a1 20 	sts	0x20A1, r24
    33a6:	10 c0       	rjmp	.+32     	; 0x33c8 <CbIoToArmCtlrData+0x13c>
	else if( TempStateJoint2 == 0x01)		//´ó±ÛÉÏÑö
    33a8:	88 89       	ldd	r24, Y+16	; 0x10
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	49 f4       	brne	.+18     	; 0x33c0 <CbIoToArmCtlrData+0x134>
		CbCtrlData.Arm12Ctrl |= (0x08|(CbCtrlData.Arm12356Speed<<0));
    33ae:	90 91 a1 20 	lds	r25, 0x20A1
    33b2:	80 91 a9 20 	lds	r24, 0x20A9
    33b6:	89 2b       	or	r24, r25
    33b8:	88 60       	ori	r24, 0x08	; 8
    33ba:	80 93 a1 20 	sts	0x20A1, r24
    33be:	04 c0       	rjmp	.+8      	; 0x33c8 <CbIoToArmCtlrData+0x13c>
	else
		CbCtrlData.Arm12Ctrl |= 0x00;
    33c0:	80 91 a1 20 	lds	r24, 0x20A1
    33c4:	80 93 a1 20 	sts	0x20A1, r24

	/********************* ARM3 ****************************/
	//	PF4		IN_JOINT3_A		Ð¡±ÛÉÏÑö
	//	PF5		IN_JOINT3_B		Ð¡±ÛÏÂ¸©
	if( TempStateJoint3 == 0x02)			//Ð¡±ÛÉÏÑö
    33c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ca:	82 30       	cpi	r24, 0x02	; 2
    33cc:	89 f4       	brne	.+34     	; 0x33f0 <CbIoToArmCtlrData+0x164>
		CbCtrlData.Arm34Ctrl |= (0x00|(CbCtrlData.Arm12356Speed<<4));
    33ce:	80 91 a2 20 	lds	r24, 0x20A2
    33d2:	28 2f       	mov	r18, r24
    33d4:	80 91 a9 20 	lds	r24, 0x20A9
    33d8:	88 2f       	mov	r24, r24
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	82 95       	swap	r24
    33de:	92 95       	swap	r25
    33e0:	90 7f       	andi	r25, 0xF0	; 240
    33e2:	98 27       	eor	r25, r24
    33e4:	80 7f       	andi	r24, 0xF0	; 240
    33e6:	98 27       	eor	r25, r24
    33e8:	82 2b       	or	r24, r18
    33ea:	80 93 a2 20 	sts	0x20A2, r24
    33ee:	19 c0       	rjmp	.+50     	; 0x3422 <CbIoToArmCtlrData+0x196>
	else if( TempStateJoint3 == 0x01)		//Ð¡±ÛÏÂ¸©
    33f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	91 f4       	brne	.+36     	; 0x341a <CbIoToArmCtlrData+0x18e>
		CbCtrlData.Arm34Ctrl |= (0x80|(CbCtrlData.Arm12356Speed<<4));
    33f6:	80 91 a2 20 	lds	r24, 0x20A2
    33fa:	28 2f       	mov	r18, r24
    33fc:	80 91 a9 20 	lds	r24, 0x20A9
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	82 95       	swap	r24
    3406:	92 95       	swap	r25
    3408:	90 7f       	andi	r25, 0xF0	; 240
    340a:	98 27       	eor	r25, r24
    340c:	80 7f       	andi	r24, 0xF0	; 240
    340e:	98 27       	eor	r25, r24
    3410:	80 68       	ori	r24, 0x80	; 128
    3412:	82 2b       	or	r24, r18
    3414:	80 93 a2 20 	sts	0x20A2, r24
    3418:	04 c0       	rjmp	.+8      	; 0x3422 <CbIoToArmCtlrData+0x196>
	else
		CbCtrlData.Arm34Ctrl |= 0x00;
    341a:	80 91 a2 20 	lds	r24, 0x20A2
    341e:	80 93 a2 20 	sts	0x20A2, r24

	/*****************************************************/
	/**************ÔÆÌ¨Ò¡¸ËÐý×ª¿ØÖÆ»úÆ÷ÈËÍó¹Ø½Ú ARM4 *******/
	TempHeadFocus = adc_a_control.ad6>>4;
    3422:	80 91 17 20 	lds	r24, 0x2017
    3426:	90 91 18 20 	lds	r25, 0x2018
    342a:	95 95       	asr	r25
    342c:	87 95       	ror	r24
    342e:	95 95       	asr	r25
    3430:	87 95       	ror	r24
    3432:	95 95       	asr	r25
    3434:	87 95       	ror	r24
    3436:	95 95       	asr	r25
    3438:	87 95       	ror	r24
    343a:	8c 83       	std	Y+4, r24	; 0x04
	TempChar = GetHeadSpeed(TempHeadFocus);
    343c:	8c 81       	ldd	r24, Y+4	; 0x04
    343e:	0e 94 1d 19 	call	0x323a	; 0x323a <GetHeadSpeed>
    3442:	8b 83       	std	Y+3, r24	; 0x03

	if(TempHeadFocus<HEAD_MID1)
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	80 36       	cpi	r24, 0x60	; 96
    3448:	40 f4       	brcc	.+16     	; 0x345a <CbIoToArmCtlrData+0x1ce>
		CbCtrlData.Arm34Ctrl |= (0x08|(TempChar<<0));			//ÏÂ¸©£¬ÄæÊ±Õë
    344a:	90 91 a2 20 	lds	r25, 0x20A2
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	89 2b       	or	r24, r25
    3452:	88 60       	ori	r24, 0x08	; 8
    3454:	80 93 a2 20 	sts	0x20A2, r24
    3458:	0e c0       	rjmp	.+28     	; 0x3476 <CbIoToArmCtlrData+0x1ea>
	else if(TempHeadFocus<HEAD_MID2)
    345a:	8c 81       	ldd	r24, Y+4	; 0x04
    345c:	80 3a       	cpi	r24, 0xA0	; 160
    345e:	28 f4       	brcc	.+10     	; 0x346a <CbIoToArmCtlrData+0x1de>
		CbCtrlData.Arm34Ctrl |= 0X00;			//¾²Ö¹
    3460:	80 91 a2 20 	lds	r24, 0x20A2
    3464:	80 93 a2 20 	sts	0x20A2, r24
    3468:	06 c0       	rjmp	.+12     	; 0x3476 <CbIoToArmCtlrData+0x1ea>
	else
		CbCtrlData.Arm34Ctrl |= (0x00|(TempChar<<0));			//ÉÏÑö£¬Ë³Ê±Õë
    346a:	80 91 a2 20 	lds	r24, 0x20A2
    346e:	9b 81       	ldd	r25, Y+3	; 0x03
    3470:	89 2b       	or	r24, r25
    3472:	80 93 a2 20 	sts	0x20A2, r24

	/*****************************************************/
	/**************ÔÆÌ¨Ðý×ª¿ØÖÆ ARM7 *******/
	TempHeadX 	  = adc_a_control.ad5>>4;
    3476:	80 91 15 20 	lds	r24, 0x2015
    347a:	90 91 16 20 	lds	r25, 0x2016
    347e:	95 95       	asr	r25
    3480:	87 95       	ror	r24
    3482:	95 95       	asr	r25
    3484:	87 95       	ror	r24
    3486:	95 95       	asr	r25
    3488:	87 95       	ror	r24
    348a:	95 95       	asr	r25
    348c:	87 95       	ror	r24
    348e:	8e 83       	std	Y+6, r24	; 0x06
	TempChar = GetHeadSpeed(TempHeadX);
    3490:	8e 81       	ldd	r24, Y+6	; 0x06
    3492:	0e 94 1d 19 	call	0x323a	; 0x323a <GetHeadSpeed>
    3496:	8b 83       	std	Y+3, r24	; 0x03

	if(TempHeadX<HEAD_MID1)
    3498:	8e 81       	ldd	r24, Y+6	; 0x06
    349a:	80 36       	cpi	r24, 0x60	; 96
    349c:	80 f4       	brcc	.+32     	; 0x34be <CbIoToArmCtlrData+0x232>
		CbCtrlData.Arm78Ctrl |= (0x00|(TempChar<<4));			//ÓÒÐý
    349e:	80 91 a4 20 	lds	r24, 0x20A4
    34a2:	28 2f       	mov	r18, r24
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	82 95       	swap	r24
    34ac:	92 95       	swap	r25
    34ae:	90 7f       	andi	r25, 0xF0	; 240
    34b0:	98 27       	eor	r25, r24
    34b2:	80 7f       	andi	r24, 0xF0	; 240
    34b4:	98 27       	eor	r25, r24
    34b6:	82 2b       	or	r24, r18
    34b8:	80 93 a4 20 	sts	0x20A4, r24
    34bc:	18 c0       	rjmp	.+48     	; 0x34ee <CbIoToArmCtlrData+0x262>
	else if(TempHeadX<HEAD_MID2)
    34be:	8e 81       	ldd	r24, Y+6	; 0x06
    34c0:	80 3a       	cpi	r24, 0xA0	; 160
    34c2:	28 f4       	brcc	.+10     	; 0x34ce <CbIoToArmCtlrData+0x242>
		CbCtrlData.Arm78Ctrl |= 0X00;							//¾²Ö¹
    34c4:	80 91 a4 20 	lds	r24, 0x20A4
    34c8:	80 93 a4 20 	sts	0x20A4, r24
    34cc:	10 c0       	rjmp	.+32     	; 0x34ee <CbIoToArmCtlrData+0x262>
	else
		CbCtrlData.Arm78Ctrl |= (0x80|(TempChar<<4));			//×óÐý
    34ce:	80 91 a4 20 	lds	r24, 0x20A4
    34d2:	28 2f       	mov	r18, r24
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	82 95       	swap	r24
    34dc:	92 95       	swap	r25
    34de:	90 7f       	andi	r25, 0xF0	; 240
    34e0:	98 27       	eor	r25, r24
    34e2:	80 7f       	andi	r24, 0xF0	; 240
    34e4:	98 27       	eor	r25, r24
    34e6:	80 68       	ori	r24, 0x80	; 128
    34e8:	82 2b       	or	r24, r18
    34ea:	80 93 a4 20 	sts	0x20A4, r24

	/*****************************************************/
	/**************ÔÆÌ¨¸©Ñö¿ØÖÆ ARM8 *******/
	TempHeadY 	  = adc_a_control.ad4>>4;
    34ee:	80 91 13 20 	lds	r24, 0x2013
    34f2:	90 91 14 20 	lds	r25, 0x2014
    34f6:	95 95       	asr	r25
    34f8:	87 95       	ror	r24
    34fa:	95 95       	asr	r25
    34fc:	87 95       	ror	r24
    34fe:	95 95       	asr	r25
    3500:	87 95       	ror	r24
    3502:	95 95       	asr	r25
    3504:	87 95       	ror	r24
    3506:	8d 83       	std	Y+5, r24	; 0x05
	TempChar = GetHeadSpeed(TempHeadY);
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	0e 94 1d 19 	call	0x323a	; 0x323a <GetHeadSpeed>
    350e:	8b 83       	std	Y+3, r24	; 0x03

	if(TempHeadY<HEAD_MID1)
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	80 36       	cpi	r24, 0x60	; 96
    3514:	40 f4       	brcc	.+16     	; 0x3526 <CbIoToArmCtlrData+0x29a>
		CbCtrlData.Arm78Ctrl |= (0x08|(TempChar<<0));			//ÏÂ¸©
    3516:	90 91 a4 20 	lds	r25, 0x20A4
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	89 2b       	or	r24, r25
    351e:	88 60       	ori	r24, 0x08	; 8
    3520:	80 93 a4 20 	sts	0x20A4, r24
    3524:	0e c0       	rjmp	.+28     	; 0x3542 <CbIoToArmCtlrData+0x2b6>
	else if(TempHeadY<HEAD_MID2)
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	80 3a       	cpi	r24, 0xA0	; 160
    352a:	28 f4       	brcc	.+10     	; 0x3536 <CbIoToArmCtlrData+0x2aa>
		CbCtrlData.Arm78Ctrl |= 0X00;							//¾²Ö¹
    352c:	80 91 a4 20 	lds	r24, 0x20A4
    3530:	80 93 a4 20 	sts	0x20A4, r24
    3534:	06 c0       	rjmp	.+12     	; 0x3542 <CbIoToArmCtlrData+0x2b6>
	else
		CbCtrlData.Arm78Ctrl |= (0x00|(TempChar<<0));			//ÉÏÑö
    3536:	80 91 a4 20 	lds	r24, 0x20A4
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	89 2b       	or	r24, r25
    353e:	80 93 a4 20 	sts	0x20A4, r24


	/******************** ARM5 ****************************/
	//	PF6		IN_JOINT4_A		ÊÖ×¦ÓÒ×ª
	//	PF7		IN_JOINT4_B		ÊÖ×¦×ó×ª
	if( TempStateJoint4 == 0x02)			//ÊÖ×¦ÓÒ×ª
    3542:	8e 85       	ldd	r24, Y+14	; 0x0e
    3544:	82 30       	cpi	r24, 0x02	; 2
    3546:	89 f4       	brne	.+34     	; 0x356a <CbIoToArmCtlrData+0x2de>
		CbCtrlData.Arm50Ctrl |= (0x00|(CbCtrlData.Arm12356Speed<<4));
    3548:	80 91 a3 20 	lds	r24, 0x20A3
    354c:	28 2f       	mov	r18, r24
    354e:	80 91 a9 20 	lds	r24, 0x20A9
    3552:	88 2f       	mov	r24, r24
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	82 95       	swap	r24
    3558:	92 95       	swap	r25
    355a:	90 7f       	andi	r25, 0xF0	; 240
    355c:	98 27       	eor	r25, r24
    355e:	80 7f       	andi	r24, 0xF0	; 240
    3560:	98 27       	eor	r25, r24
    3562:	82 2b       	or	r24, r18
    3564:	80 93 a3 20 	sts	0x20A3, r24
    3568:	19 c0       	rjmp	.+50     	; 0x359c <CbIoToArmCtlrData+0x310>
	else if( TempStateJoint4 == 0x01)		//ÊÖ×¦×ó×ª
    356a:	8e 85       	ldd	r24, Y+14	; 0x0e
    356c:	81 30       	cpi	r24, 0x01	; 1
    356e:	91 f4       	brne	.+36     	; 0x3594 <CbIoToArmCtlrData+0x308>
		CbCtrlData.Arm50Ctrl |= (0x80|(CbCtrlData.Arm12356Speed<<4));
    3570:	80 91 a3 20 	lds	r24, 0x20A3
    3574:	28 2f       	mov	r18, r24
    3576:	80 91 a9 20 	lds	r24, 0x20A9
    357a:	88 2f       	mov	r24, r24
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	82 95       	swap	r24
    3580:	92 95       	swap	r25
    3582:	90 7f       	andi	r25, 0xF0	; 240
    3584:	98 27       	eor	r25, r24
    3586:	80 7f       	andi	r24, 0xF0	; 240
    3588:	98 27       	eor	r25, r24
    358a:	80 68       	ori	r24, 0x80	; 128
    358c:	82 2b       	or	r24, r18
    358e:	80 93 a3 20 	sts	0x20A3, r24
    3592:	04 c0       	rjmp	.+8      	; 0x359c <CbIoToArmCtlrData+0x310>
	else
		CbCtrlData.Arm50Ctrl |= 0x00;
    3594:	80 91 a3 20 	lds	r24, 0x20A3
    3598:	80 93 a3 20 	sts	0x20A3, r24

	/*****************************************************/
	/**************Ç°Ö§±Û ARM0 *******/
	TempMoveZ 	  = adc_a_control.adb1>>4;
    359c:	80 91 1d 20 	lds	r24, 0x201D
    35a0:	90 91 1e 20 	lds	r25, 0x201E
    35a4:	95 95       	asr	r25
    35a6:	87 95       	ror	r24
    35a8:	95 95       	asr	r25
    35aa:	87 95       	ror	r24
    35ac:	95 95       	asr	r25
    35ae:	87 95       	ror	r24
    35b0:	95 95       	asr	r25
    35b2:	87 95       	ror	r24
    35b4:	8f 83       	std	Y+7, r24	; 0x07
    35b6:	98 87       	std	Y+8, r25	; 0x08
	TempChar = GetHeadSpeed(TempMoveZ);
    35b8:	8f 81       	ldd	r24, Y+7	; 0x07
    35ba:	0e 94 1d 19 	call	0x323a	; 0x323a <GetHeadSpeed>
    35be:	8b 83       	std	Y+3, r24	; 0x03

	if(TempMoveZ<HEAD_MID1)
    35c0:	8f 81       	ldd	r24, Y+7	; 0x07
    35c2:	98 85       	ldd	r25, Y+8	; 0x08
    35c4:	80 36       	cpi	r24, 0x60	; 96
    35c6:	91 05       	cpc	r25, r1
    35c8:	38 f4       	brcc	.+14     	; 0x35d8 <CbIoToArmCtlrData+0x34c>
		CbCtrlData.Arm50Ctrl |= (0x00|(TempChar<<0));			//ÏÂ¸©£¬ÄæÊ±Õë
    35ca:	80 91 a3 20 	lds	r24, 0x20A3
    35ce:	9b 81       	ldd	r25, Y+3	; 0x03
    35d0:	89 2b       	or	r24, r25
    35d2:	80 93 a3 20 	sts	0x20A3, r24
    35d6:	11 c0       	rjmp	.+34     	; 0x35fa <CbIoToArmCtlrData+0x36e>
	else if(TempMoveZ<HEAD_MID2)
    35d8:	8f 81       	ldd	r24, Y+7	; 0x07
    35da:	98 85       	ldd	r25, Y+8	; 0x08
    35dc:	80 3a       	cpi	r24, 0xA0	; 160
    35de:	91 05       	cpc	r25, r1
    35e0:	28 f4       	brcc	.+10     	; 0x35ec <CbIoToArmCtlrData+0x360>
		CbCtrlData.Arm50Ctrl |= 0X00;							//¾²Ö¹
    35e2:	80 91 a3 20 	lds	r24, 0x20A3
    35e6:	80 93 a3 20 	sts	0x20A3, r24
    35ea:	07 c0       	rjmp	.+14     	; 0x35fa <CbIoToArmCtlrData+0x36e>
	else
		CbCtrlData.Arm50Ctrl |= (0x08|(TempChar<<0));			//ÉÏÑö£¬Ë³Ê±Õë
    35ec:	90 91 a3 20 	lds	r25, 0x20A3
    35f0:	8b 81       	ldd	r24, Y+3	; 0x03
    35f2:	89 2b       	or	r24, r25
    35f4:	88 60       	ori	r24, 0x08	; 8
    35f6:	80 93 a3 20 	sts	0x20A3, r24


	/*********************ÊÖ×¦×¥³Ö***************************/
	//	PE5		IN_HANDA		ÊÖ×¦×¥³Ö
	//	PE6		IN_HANDB		ÊÖ×¦ËÉ¿ª
	TempStateHand   = (TempPINE>>5)&0x03;
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	82 95       	swap	r24
    35fe:	86 95       	lsr	r24
    3600:	87 70       	andi	r24, 0x07	; 7
    3602:	83 70       	andi	r24, 0x03	; 3
    3604:	8d 87       	std	Y+13, r24	; 0x0d

	if( TempStateHand == 0x02)			//ÊÖ×¦×¥³Ö
    3606:	8d 85       	ldd	r24, Y+13	; 0x0d
    3608:	82 30       	cpi	r24, 0x02	; 2
    360a:	91 f4       	brne	.+36     	; 0x3630 <CbIoToArmCtlrData+0x3a4>
		CbCtrlData.Arm6Ctrl |= (0x80|(CbCtrlData.Arm12356Speed<<4));
    360c:	80 91 a5 20 	lds	r24, 0x20A5
    3610:	28 2f       	mov	r18, r24
    3612:	80 91 a9 20 	lds	r24, 0x20A9
    3616:	88 2f       	mov	r24, r24
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	82 95       	swap	r24
    361c:	92 95       	swap	r25
    361e:	90 7f       	andi	r25, 0xF0	; 240
    3620:	98 27       	eor	r25, r24
    3622:	80 7f       	andi	r24, 0xF0	; 240
    3624:	98 27       	eor	r25, r24
    3626:	80 68       	ori	r24, 0x80	; 128
    3628:	82 2b       	or	r24, r18
    362a:	80 93 a5 20 	sts	0x20A5, r24
    362e:	18 c0       	rjmp	.+48     	; 0x3660 <CbIoToArmCtlrData+0x3d4>
	else if( TempStateHand == 0x01)		//ÊÖ×¦ËÉ¿ª
    3630:	8d 85       	ldd	r24, Y+13	; 0x0d
    3632:	81 30       	cpi	r24, 0x01	; 1
    3634:	89 f4       	brne	.+34     	; 0x3658 <CbIoToArmCtlrData+0x3cc>
		CbCtrlData.Arm6Ctrl |= (0x00|(CbCtrlData.Arm12356Speed<<4));
    3636:	80 91 a5 20 	lds	r24, 0x20A5
    363a:	28 2f       	mov	r18, r24
    363c:	80 91 a9 20 	lds	r24, 0x20A9
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	82 95       	swap	r24
    3646:	92 95       	swap	r25
    3648:	90 7f       	andi	r25, 0xF0	; 240
    364a:	98 27       	eor	r25, r24
    364c:	80 7f       	andi	r24, 0xF0	; 240
    364e:	98 27       	eor	r25, r24
    3650:	82 2b       	or	r24, r18
    3652:	80 93 a5 20 	sts	0x20A5, r24
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <CbIoToArmCtlrData+0x3d4>
	else
		CbCtrlData.Arm6Ctrl |= 0x00;
    3658:	80 91 a5 20 	lds	r24, 0x20A5
    365c:	80 93 a5 20 	sts	0x20A5, r24

	//ÉèÖÃ×¥³ÖÁ¦Á¿
	TempHandForce = 0x0F;
    3660:	8f e0       	ldi	r24, 0x0F	; 15
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	89 87       	std	Y+9, r24	; 0x09
    3666:	9a 87       	std	Y+10, r25	; 0x0a

	CbCtrlData.Arm6Ctrl |= (TempHandForce&0x0F);
    3668:	90 91 a5 20 	lds	r25, 0x20A5
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	8f 70       	andi	r24, 0x0F	; 15
    3670:	89 2b       	or	r24, r25
    3672:	80 93 a5 20 	sts	0x20A5, r24


}
    3676:	61 96       	adiw	r28, 0x11	; 17
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <GetMoveSpeed>:
#define DEC_SPEED		60


static int16_t  GetMoveSpeed(int16_t InputAdc_Y,int16_t InputAdc_X,
							int16_t Input_Adc_Z,int16_t SpeedK)
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	2c 97       	sbiw	r28, 0x0c	; 12
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	8d 83       	std	Y+5, r24	; 0x05
    3692:	9e 83       	std	Y+6, r25	; 0x06
    3694:	6f 83       	std	Y+7, r22	; 0x07
    3696:	78 87       	std	Y+8, r23	; 0x08
    3698:	49 87       	std	Y+9, r20	; 0x09
    369a:	5a 87       	std	Y+10, r21	; 0x0a
    369c:	2b 87       	std	Y+11, r18	; 0x0b
    369e:	3c 87       	std	Y+12, r19	; 0x0c
	int32_t TempLong;


	TempLong = Input_Adc_Z;
    36a0:	89 85       	ldd	r24, Y+9	; 0x09
    36a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a4:	aa 27       	eor	r26, r26
    36a6:	97 fd       	sbrc	r25, 7
    36a8:	a0 95       	com	r26
    36aa:	ba 2f       	mov	r27, r26
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	9a 83       	std	Y+2, r25	; 0x02
    36b0:	ab 83       	std	Y+3, r26	; 0x03
    36b2:	bc 83       	std	Y+4, r27	; 0x04

	TempLong = InputAdc_Y+InputAdc_X;
    36b4:	2d 81       	ldd	r18, Y+5	; 0x05
    36b6:	3e 81       	ldd	r19, Y+6	; 0x06
    36b8:	8f 81       	ldd	r24, Y+7	; 0x07
    36ba:	98 85       	ldd	r25, Y+8	; 0x08
    36bc:	82 0f       	add	r24, r18
    36be:	93 1f       	adc	r25, r19
    36c0:	aa 27       	eor	r26, r26
    36c2:	97 fd       	sbrc	r25, 7
    36c4:	a0 95       	com	r26
    36c6:	ba 2f       	mov	r27, r26
    36c8:	89 83       	std	Y+1, r24	; 0x01
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	ab 83       	std	Y+3, r26	; 0x03
    36ce:	bc 83       	std	Y+4, r27	; 0x04
	TempLong  *= SpeedK;
    36d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    36d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    36d4:	9c 01       	movw	r18, r24
    36d6:	44 27       	eor	r20, r20
    36d8:	37 fd       	sbrc	r19, 7
    36da:	40 95       	com	r20
    36dc:	54 2f       	mov	r21, r20
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	ab 81       	ldd	r26, Y+3	; 0x03
    36e4:	bc 81       	ldd	r27, Y+4	; 0x04
    36e6:	bc 01       	movw	r22, r24
    36e8:	cd 01       	movw	r24, r26
    36ea:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	9a 83       	std	Y+2, r25	; 0x02
    36f6:	ab 83       	std	Y+3, r26	; 0x03
    36f8:	bc 83       	std	Y+4, r27	; 0x04
	TempLong  /= SPEEDK_DIV;
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	ab 81       	ldd	r26, Y+3	; 0x03
    3700:	bc 81       	ldd	r27, Y+4	; 0x04
    3702:	2c e2       	ldi	r18, 0x2C	; 44
    3704:	31 e0       	ldi	r19, 0x01	; 1
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	bc 01       	movw	r22, r24
    370c:	cd 01       	movw	r24, r26
    370e:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__divmodsi4>
    3712:	da 01       	movw	r26, r20
    3714:	c9 01       	movw	r24, r18
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	ab 83       	std	Y+3, r26	; 0x03
    371c:	bc 83       	std	Y+4, r27	; 0x04

	if(TempLong > MOVE_MAX_SPEED)
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	ab 81       	ldd	r26, Y+3	; 0x03
    3724:	bc 81       	ldd	r27, Y+4	; 0x04
    3726:	83 3d       	cpi	r24, 0xD3	; 211
    3728:	91 05       	cpc	r25, r1
    372a:	a1 05       	cpc	r26, r1
    372c:	b1 05       	cpc	r27, r1
    372e:	4c f0       	brlt	.+18     	; 0x3742 <GetMoveSpeed+0xc0>
		TempLong = MOVE_MAX_SPEED;
    3730:	82 ed       	ldi	r24, 0xD2	; 210
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	a0 e0       	ldi	r26, 0x00	; 0
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	ab 83       	std	Y+3, r26	; 0x03
    373e:	bc 83       	std	Y+4, r27	; 0x04
    3740:	14 c0       	rjmp	.+40     	; 0x376a <GetMoveSpeed+0xe8>
	else if(TempLong < -MOVE_MAX_SPEED)
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	ab 81       	ldd	r26, Y+3	; 0x03
    3748:	bc 81       	ldd	r27, Y+4	; 0x04
    374a:	8e 32       	cpi	r24, 0x2E	; 46
    374c:	2f ef       	ldi	r18, 0xFF	; 255
    374e:	92 07       	cpc	r25, r18
    3750:	2f ef       	ldi	r18, 0xFF	; 255
    3752:	a2 07       	cpc	r26, r18
    3754:	2f ef       	ldi	r18, 0xFF	; 255
    3756:	b2 07       	cpc	r27, r18
    3758:	44 f4       	brge	.+16     	; 0x376a <GetMoveSpeed+0xe8>
		TempLong = -MOVE_MAX_SPEED;
    375a:	8e e2       	ldi	r24, 0x2E	; 46
    375c:	9f ef       	ldi	r25, 0xFF	; 255
    375e:	af ef       	ldi	r26, 0xFF	; 255
    3760:	bf ef       	ldi	r27, 0xFF	; 255
    3762:	89 83       	std	Y+1, r24	; 0x01
    3764:	9a 83       	std	Y+2, r25	; 0x02
    3766:	ab 83       	std	Y+3, r26	; 0x03
    3768:	bc 83       	std	Y+4, r27	; 0x04



	return TempLong;
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    376e:	2c 96       	adiw	r28, 0x0c	; 12
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <SetAccSpeed>:

static void SetAccSpeed(int16_t TempSpeed,int16_t* p_SetSpeed)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	00 d0       	rcall	.+0      	; 0x3780 <SetAccSpeed+0x6>
    3780:	00 d0       	rcall	.+0      	; 0x3782 <SetAccSpeed+0x8>
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	89 83       	std	Y+1, r24	; 0x01
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	6b 83       	std	Y+3, r22	; 0x03
    378c:	7c 83       	std	Y+4, r23	; 0x04
	if( TempSpeed==0)
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	9a 81       	ldd	r25, Y+2	; 0x02
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	99 f5       	brne	.+102    	; 0x37fc <SetAccSpeed+0x82>
	{
		if((*p_SetSpeed)<0)
    3796:	eb 81       	ldd	r30, Y+3	; 0x03
    3798:	fc 81       	ldd	r31, Y+4	; 0x04
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	99 23       	and	r25, r25
    37a0:	bc f4       	brge	.+46     	; 0x37d0 <SetAccSpeed+0x56>
		{
			if((*p_SetSpeed)<(-DEC_SPEED))
    37a2:	eb 81       	ldd	r30, Y+3	; 0x03
    37a4:	fc 81       	ldd	r31, Y+4	; 0x04
    37a6:	80 81       	ld	r24, Z
    37a8:	91 81       	ldd	r25, Z+1	; 0x01
    37aa:	2f ef       	ldi	r18, 0xFF	; 255
    37ac:	84 3c       	cpi	r24, 0xC4	; 196
    37ae:	92 07       	cpc	r25, r18
    37b0:	54 f4       	brge	.+20     	; 0x37c6 <SetAccSpeed+0x4c>
				(*p_SetSpeed) += DEC_SPEED;
    37b2:	eb 81       	ldd	r30, Y+3	; 0x03
    37b4:	fc 81       	ldd	r31, Y+4	; 0x04
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	cc 96       	adiw	r24, 0x3c	; 60
    37bc:	eb 81       	ldd	r30, Y+3	; 0x03
    37be:	fc 81       	ldd	r31, Y+4	; 0x04
    37c0:	80 83       	st	Z, r24
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	f4 c0       	rjmp	.+488    	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) = 0;
    37c6:	eb 81       	ldd	r30, Y+3	; 0x03
    37c8:	fc 81       	ldd	r31, Y+4	; 0x04
    37ca:	10 82       	st	Z, r1
    37cc:	11 82       	std	Z+1, r1	; 0x01
    37ce:	ef c0       	rjmp	.+478    	; 0x39ae <SetAccSpeed+0x234>
		}
		else
		{
			if((*p_SetSpeed)>DEC_SPEED)
    37d0:	eb 81       	ldd	r30, Y+3	; 0x03
    37d2:	fc 81       	ldd	r31, Y+4	; 0x04
    37d4:	80 81       	ld	r24, Z
    37d6:	91 81       	ldd	r25, Z+1	; 0x01
    37d8:	8d 33       	cpi	r24, 0x3D	; 61
    37da:	91 05       	cpc	r25, r1
    37dc:	54 f0       	brlt	.+20     	; 0x37f2 <SetAccSpeed+0x78>
				(*p_SetSpeed) -= DEC_SPEED;
    37de:	eb 81       	ldd	r30, Y+3	; 0x03
    37e0:	fc 81       	ldd	r31, Y+4	; 0x04
    37e2:	80 81       	ld	r24, Z
    37e4:	91 81       	ldd	r25, Z+1	; 0x01
    37e6:	cc 97       	sbiw	r24, 0x3c	; 60
    37e8:	eb 81       	ldd	r30, Y+3	; 0x03
    37ea:	fc 81       	ldd	r31, Y+4	; 0x04
    37ec:	80 83       	st	Z, r24
    37ee:	91 83       	std	Z+1, r25	; 0x01
    37f0:	de c0       	rjmp	.+444    	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) = 0;
    37f2:	eb 81       	ldd	r30, Y+3	; 0x03
    37f4:	fc 81       	ldd	r31, Y+4	; 0x04
    37f6:	10 82       	st	Z, r1
    37f8:	11 82       	std	Z+1, r1	; 0x01
    37fa:	d9 c0       	rjmp	.+434    	; 0x39ae <SetAccSpeed+0x234>
		}
	}
	else if( TempSpeed>0 && (*p_SetSpeed)>=0)
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
    37fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3800:	18 16       	cp	r1, r24
    3802:	19 06       	cpc	r1, r25
    3804:	0c f0       	brlt	.+2      	; 0x3808 <SetAccSpeed+0x8e>
    3806:	4a c0       	rjmp	.+148    	; 0x389c <SetAccSpeed+0x122>
    3808:	eb 81       	ldd	r30, Y+3	; 0x03
    380a:	fc 81       	ldd	r31, Y+4	; 0x04
    380c:	80 81       	ld	r24, Z
    380e:	91 81       	ldd	r25, Z+1	; 0x01
    3810:	99 23       	and	r25, r25
    3812:	0c f4       	brge	.+2      	; 0x3816 <SetAccSpeed+0x9c>
    3814:	43 c0       	rjmp	.+134    	; 0x389c <SetAccSpeed+0x122>
	{
		if(TempSpeed>(*p_SetSpeed))
    3816:	eb 81       	ldd	r30, Y+3	; 0x03
    3818:	fc 81       	ldd	r31, Y+4	; 0x04
    381a:	20 81       	ld	r18, Z
    381c:	31 81       	ldd	r19, Z+1	; 0x01
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	9a 81       	ldd	r25, Y+2	; 0x02
    3822:	28 17       	cp	r18, r24
    3824:	39 07       	cpc	r19, r25
    3826:	e4 f4       	brge	.+56     	; 0x3860 <SetAccSpeed+0xe6>
		{
			if(TempSpeed-(*p_SetSpeed)>ACC_SPEED)
    3828:	eb 81       	ldd	r30, Y+3	; 0x03
    382a:	fc 81       	ldd	r31, Y+4	; 0x04
    382c:	20 81       	ld	r18, Z
    382e:	31 81       	ldd	r19, Z+1	; 0x01
    3830:	89 81       	ldd	r24, Y+1	; 0x01
    3832:	9a 81       	ldd	r25, Y+2	; 0x02
    3834:	82 1b       	sub	r24, r18
    3836:	93 0b       	sbc	r25, r19
    3838:	8f 31       	cpi	r24, 0x1F	; 31
    383a:	91 05       	cpc	r25, r1
    383c:	54 f0       	brlt	.+20     	; 0x3852 <SetAccSpeed+0xd8>
				(*p_SetSpeed) += ACC_SPEED;
    383e:	eb 81       	ldd	r30, Y+3	; 0x03
    3840:	fc 81       	ldd	r31, Y+4	; 0x04
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	4e 96       	adiw	r24, 0x1e	; 30
    3848:	eb 81       	ldd	r30, Y+3	; 0x03
    384a:	fc 81       	ldd	r31, Y+4	; 0x04
    384c:	80 83       	st	Z, r24
    384e:	91 83       	std	Z+1, r25	; 0x01
    3850:	ae c0       	rjmp	.+348    	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) = TempSpeed;
    3852:	eb 81       	ldd	r30, Y+3	; 0x03
    3854:	fc 81       	ldd	r31, Y+4	; 0x04
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	80 83       	st	Z, r24
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	a7 c0       	rjmp	.+334    	; 0x39ae <SetAccSpeed+0x234>
		}
		else
		{
			if((*p_SetSpeed)-TempSpeed>DEC_SPEED)
    3860:	eb 81       	ldd	r30, Y+3	; 0x03
    3862:	fc 81       	ldd	r31, Y+4	; 0x04
    3864:	20 81       	ld	r18, Z
    3866:	31 81       	ldd	r19, Z+1	; 0x01
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	a9 01       	movw	r20, r18
    386e:	48 1b       	sub	r20, r24
    3870:	59 0b       	sbc	r21, r25
    3872:	ca 01       	movw	r24, r20
    3874:	8d 33       	cpi	r24, 0x3D	; 61
    3876:	91 05       	cpc	r25, r1
    3878:	54 f0       	brlt	.+20     	; 0x388e <SetAccSpeed+0x114>
				(*p_SetSpeed) -= DEC_SPEED;
    387a:	eb 81       	ldd	r30, Y+3	; 0x03
    387c:	fc 81       	ldd	r31, Y+4	; 0x04
    387e:	80 81       	ld	r24, Z
    3880:	91 81       	ldd	r25, Z+1	; 0x01
    3882:	cc 97       	sbiw	r24, 0x3c	; 60
    3884:	eb 81       	ldd	r30, Y+3	; 0x03
    3886:	fc 81       	ldd	r31, Y+4	; 0x04
    3888:	80 83       	st	Z, r24
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	90 c0       	rjmp	.+288    	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) = TempSpeed;
    388e:	eb 81       	ldd	r30, Y+3	; 0x03
    3890:	fc 81       	ldd	r31, Y+4	; 0x04
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	9a 81       	ldd	r25, Y+2	; 0x02
    3896:	80 83       	st	Z, r24
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	89 c0       	rjmp	.+274    	; 0x39ae <SetAccSpeed+0x234>
		}
	}
	else if( TempSpeed<0 && (*p_SetSpeed)<0)
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	9a 81       	ldd	r25, Y+2	; 0x02
    38a0:	99 23       	and	r25, r25
    38a2:	0c f0       	brlt	.+2      	; 0x38a6 <SetAccSpeed+0x12c>
    38a4:	4a c0       	rjmp	.+148    	; 0x393a <SetAccSpeed+0x1c0>
    38a6:	eb 81       	ldd	r30, Y+3	; 0x03
    38a8:	fc 81       	ldd	r31, Y+4	; 0x04
    38aa:	80 81       	ld	r24, Z
    38ac:	91 81       	ldd	r25, Z+1	; 0x01
    38ae:	99 23       	and	r25, r25
    38b0:	0c f0       	brlt	.+2      	; 0x38b4 <SetAccSpeed+0x13a>
    38b2:	43 c0       	rjmp	.+134    	; 0x393a <SetAccSpeed+0x1c0>
	{
		if(TempSpeed<(*p_SetSpeed))
    38b4:	eb 81       	ldd	r30, Y+3	; 0x03
    38b6:	fc 81       	ldd	r31, Y+4	; 0x04
    38b8:	20 81       	ld	r18, Z
    38ba:	31 81       	ldd	r19, Z+1	; 0x01
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	82 17       	cp	r24, r18
    38c2:	93 07       	cpc	r25, r19
    38c4:	f4 f4       	brge	.+60     	; 0x3902 <SetAccSpeed+0x188>
		{
			if((*p_SetSpeed)-TempSpeed>ACC_SPEED)
    38c6:	eb 81       	ldd	r30, Y+3	; 0x03
    38c8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ca:	20 81       	ld	r18, Z
    38cc:	31 81       	ldd	r19, Z+1	; 0x01
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	9a 81       	ldd	r25, Y+2	; 0x02
    38d2:	a9 01       	movw	r20, r18
    38d4:	48 1b       	sub	r20, r24
    38d6:	59 0b       	sbc	r21, r25
    38d8:	ca 01       	movw	r24, r20
    38da:	8f 31       	cpi	r24, 0x1F	; 31
    38dc:	91 05       	cpc	r25, r1
    38de:	54 f0       	brlt	.+20     	; 0x38f4 <SetAccSpeed+0x17a>
				(*p_SetSpeed) -= ACC_SPEED;
    38e0:	eb 81       	ldd	r30, Y+3	; 0x03
    38e2:	fc 81       	ldd	r31, Y+4	; 0x04
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	4e 97       	sbiw	r24, 0x1e	; 30
    38ea:	eb 81       	ldd	r30, Y+3	; 0x03
    38ec:	fc 81       	ldd	r31, Y+4	; 0x04
    38ee:	80 83       	st	Z, r24
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	5d c0       	rjmp	.+186    	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) = TempSpeed;
    38f4:	eb 81       	ldd	r30, Y+3	; 0x03
    38f6:	fc 81       	ldd	r31, Y+4	; 0x04
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	80 83       	st	Z, r24
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	56 c0       	rjmp	.+172    	; 0x39ae <SetAccSpeed+0x234>
		}
		else
		{
			if(TempSpeed-(*p_SetSpeed)>DEC_SPEED)
    3902:	eb 81       	ldd	r30, Y+3	; 0x03
    3904:	fc 81       	ldd	r31, Y+4	; 0x04
    3906:	20 81       	ld	r18, Z
    3908:	31 81       	ldd	r19, Z+1	; 0x01
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	82 1b       	sub	r24, r18
    3910:	93 0b       	sbc	r25, r19
    3912:	8d 33       	cpi	r24, 0x3D	; 61
    3914:	91 05       	cpc	r25, r1
    3916:	54 f0       	brlt	.+20     	; 0x392c <SetAccSpeed+0x1b2>
				(*p_SetSpeed) += DEC_SPEED;
    3918:	eb 81       	ldd	r30, Y+3	; 0x03
    391a:	fc 81       	ldd	r31, Y+4	; 0x04
    391c:	80 81       	ld	r24, Z
    391e:	91 81       	ldd	r25, Z+1	; 0x01
    3920:	cc 96       	adiw	r24, 0x3c	; 60
    3922:	eb 81       	ldd	r30, Y+3	; 0x03
    3924:	fc 81       	ldd	r31, Y+4	; 0x04
    3926:	80 83       	st	Z, r24
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	41 c0       	rjmp	.+130    	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) = TempSpeed;
    392c:	eb 81       	ldd	r30, Y+3	; 0x03
    392e:	fc 81       	ldd	r31, Y+4	; 0x04
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	80 83       	st	Z, r24
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	3a c0       	rjmp	.+116    	; 0x39ae <SetAccSpeed+0x234>
		}
	}
	else
	{
		if(TempSpeed-(*p_SetSpeed)<ACC_SPEED && TempSpeed-(*p_SetSpeed)> -ACC_SPEED)
    393a:	eb 81       	ldd	r30, Y+3	; 0x03
    393c:	fc 81       	ldd	r31, Y+4	; 0x04
    393e:	20 81       	ld	r18, Z
    3940:	31 81       	ldd	r19, Z+1	; 0x01
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	82 1b       	sub	r24, r18
    3948:	93 0b       	sbc	r25, r19
    394a:	8e 31       	cpi	r24, 0x1E	; 30
    394c:	91 05       	cpc	r25, r1
    394e:	9c f4       	brge	.+38     	; 0x3976 <SetAccSpeed+0x1fc>
    3950:	eb 81       	ldd	r30, Y+3	; 0x03
    3952:	fc 81       	ldd	r31, Y+4	; 0x04
    3954:	20 81       	ld	r18, Z
    3956:	31 81       	ldd	r19, Z+1	; 0x01
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	9a 81       	ldd	r25, Y+2	; 0x02
    395c:	82 1b       	sub	r24, r18
    395e:	93 0b       	sbc	r25, r19
    3960:	5f ef       	ldi	r21, 0xFF	; 255
    3962:	83 3e       	cpi	r24, 0xE3	; 227
    3964:	95 07       	cpc	r25, r21
    3966:	3c f0       	brlt	.+14     	; 0x3976 <SetAccSpeed+0x1fc>
		{
			(*p_SetSpeed) = TempSpeed;
    3968:	eb 81       	ldd	r30, Y+3	; 0x03
    396a:	fc 81       	ldd	r31, Y+4	; 0x04
    396c:	89 81       	ldd	r24, Y+1	; 0x01
    396e:	9a 81       	ldd	r25, Y+2	; 0x02
    3970:	80 83       	st	Z, r24
    3972:	91 83       	std	Z+1, r25	; 0x01
    3974:	1c c0       	rjmp	.+56     	; 0x39ae <SetAccSpeed+0x234>
		}
		else
		{
			if(TempSpeed>(*p_SetSpeed))
    3976:	eb 81       	ldd	r30, Y+3	; 0x03
    3978:	fc 81       	ldd	r31, Y+4	; 0x04
    397a:	20 81       	ld	r18, Z
    397c:	31 81       	ldd	r19, Z+1	; 0x01
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	9a 81       	ldd	r25, Y+2	; 0x02
    3982:	28 17       	cp	r18, r24
    3984:	39 07       	cpc	r19, r25
    3986:	54 f4       	brge	.+20     	; 0x399c <SetAccSpeed+0x222>
				(*p_SetSpeed) += ACC_SPEED;
    3988:	eb 81       	ldd	r30, Y+3	; 0x03
    398a:	fc 81       	ldd	r31, Y+4	; 0x04
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	4e 96       	adiw	r24, 0x1e	; 30
    3992:	eb 81       	ldd	r30, Y+3	; 0x03
    3994:	fc 81       	ldd	r31, Y+4	; 0x04
    3996:	80 83       	st	Z, r24
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	09 c0       	rjmp	.+18     	; 0x39ae <SetAccSpeed+0x234>
			else
				(*p_SetSpeed) -= ACC_SPEED;
    399c:	eb 81       	ldd	r30, Y+3	; 0x03
    399e:	fc 81       	ldd	r31, Y+4	; 0x04
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	4e 97       	sbiw	r24, 0x1e	; 30
    39a6:	eb 81       	ldd	r30, Y+3	; 0x03
    39a8:	fc 81       	ldd	r31, Y+4	; 0x04
    39aa:	80 83       	st	Z, r24
    39ac:	91 83       	std	Z+1, r25	; 0x01
		}

	}
}
    39ae:	24 96       	adiw	r28, 0x04	; 4
    39b0:	cd bf       	out	0x3d, r28	; 61
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	cf 91       	pop	r28
    39b6:	df 91       	pop	r29
    39b8:	08 95       	ret

000039ba <CbIoToMotionCtlrData>:

static void CbIoToMotionCtlrData(void)
{
    39ba:	df 93       	push	r29
    39bc:	cf 93       	push	r28
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	60 97       	sbiw	r28, 0x10	; 16
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	de bf       	out	0x3e, r29	; 62
//	A-ADC7	MOVE_Y			ÔË¶¯Ç°ºó¿ØÖÆ
//	B-ADC1	MOVE_Z			ÔË¶¯Ðý×ª¿ØÖÆ
//	B-ADC2	MOVE_SPEED		ÔË¶¯ËÙ¶È¿ØÖÆ

	int16_t TempMoveX,TempMoveY,TempMoveK,TempMoveZ;
	int16_t TempSpeedL = 0,TempSpeedR = 0;
    39c8:	1b 82       	std	Y+3, r1	; 0x03
    39ca:	1c 82       	std	Y+4, r1	; 0x04
    39cc:	19 82       	std	Y+1, r1	; 0x01
    39ce:	1a 82       	std	Y+2, r1	; 0x02
	static int16_t SetSpeedL = 0,SetSpeedR = 0;

	TempMoveX 	  = adc_a_control.adb0>>2;
    39d0:	80 91 1b 20 	lds	r24, 0x201B
    39d4:	90 91 1c 20 	lds	r25, 0x201C
    39d8:	95 95       	asr	r25
    39da:	87 95       	ror	r24
    39dc:	95 95       	asr	r25
    39de:	87 95       	ror	r24
    39e0:	8b 87       	std	Y+11, r24	; 0x0b
    39e2:	9c 87       	std	Y+12, r25	; 0x0c
	TempMoveY 	  = adc_a_control.ad7>>2;
    39e4:	80 91 19 20 	lds	r24, 0x2019
    39e8:	90 91 1a 20 	lds	r25, 0x201A
    39ec:	95 95       	asr	r25
    39ee:	87 95       	ror	r24
    39f0:	95 95       	asr	r25
    39f2:	87 95       	ror	r24
    39f4:	89 87       	std	Y+9, r24	; 0x09
    39f6:	9a 87       	std	Y+10, r25	; 0x0a
	TempMoveZ 	  = adc_a_control.adb1>>2;
    39f8:	80 91 1d 20 	lds	r24, 0x201D
    39fc:	90 91 1e 20 	lds	r25, 0x201E
    3a00:	95 95       	asr	r25
    3a02:	87 95       	ror	r24
    3a04:	95 95       	asr	r25
    3a06:	87 95       	ror	r24
    3a08:	8d 83       	std	Y+5, r24	; 0x05
    3a0a:	9e 83       	std	Y+6, r25	; 0x06
	TempMoveK 	  = adc_a_control.adb2>>4;
    3a0c:	80 91 1f 20 	lds	r24, 0x201F
    3a10:	90 91 20 20 	lds	r25, 0x2020
    3a14:	95 95       	asr	r25
    3a16:	87 95       	ror	r24
    3a18:	95 95       	asr	r25
    3a1a:	87 95       	ror	r24
    3a1c:	95 95       	asr	r25
    3a1e:	87 95       	ror	r24
    3a20:	95 95       	asr	r25
    3a22:	87 95       	ror	r24
    3a24:	8f 83       	std	Y+7, r24	; 0x07
    3a26:	98 87       	std	Y+8, r25	; 0x08



	/**************ÐÞÕýXÖáADÖµ*******************/
	if(TempMoveX<MOVE_X_MID1)
    3a28:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a2c:	21 e0       	ldi	r18, 0x01	; 1
    3a2e:	80 3c       	cpi	r24, 0xC0	; 192
    3a30:	92 07       	cpc	r25, r18
    3a32:	3c f4       	brge	.+14     	; 0x3a42 <CbIoToMotionCtlrData+0x88>
		TempMoveX = (TempMoveX-MOVE_X_MID1);
    3a34:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a36:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a38:	80 5c       	subi	r24, 0xC0	; 192
    3a3a:	91 40       	sbci	r25, 0x01	; 1
    3a3c:	8b 87       	std	Y+11, r24	; 0x0b
    3a3e:	9c 87       	std	Y+12, r25	; 0x0c
    3a40:	0f c0       	rjmp	.+30     	; 0x3a60 <CbIoToMotionCtlrData+0xa6>
	else if(TempMoveX<MOVE_X_MID2)
    3a42:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a44:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a46:	22 e0       	ldi	r18, 0x02	; 2
    3a48:	80 34       	cpi	r24, 0x40	; 64
    3a4a:	92 07       	cpc	r25, r18
    3a4c:	1c f4       	brge	.+6      	; 0x3a54 <CbIoToMotionCtlrData+0x9a>
		TempMoveX = 0x00;
    3a4e:	1b 86       	std	Y+11, r1	; 0x0b
    3a50:	1c 86       	std	Y+12, r1	; 0x0c
    3a52:	06 c0       	rjmp	.+12     	; 0x3a60 <CbIoToMotionCtlrData+0xa6>
	else
		TempMoveX = (TempMoveX-MOVE_X_MID2);
    3a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a56:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a58:	80 54       	subi	r24, 0x40	; 64
    3a5a:	92 40       	sbci	r25, 0x02	; 2
    3a5c:	8b 87       	std	Y+11, r24	; 0x0b
    3a5e:	9c 87       	std	Y+12, r25	; 0x0c

	/**************ÐÞÕýYÖáADÖµ*******************/
	if(TempMoveY<MOVE_Y_MID1)
    3a60:	89 85       	ldd	r24, Y+9	; 0x09
    3a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a64:	21 e0       	ldi	r18, 0x01	; 1
    3a66:	80 3c       	cpi	r24, 0xC0	; 192
    3a68:	92 07       	cpc	r25, r18
    3a6a:	3c f4       	brge	.+14     	; 0x3a7a <CbIoToMotionCtlrData+0xc0>
		TempMoveY = (TempMoveY-MOVE_Y_MID1);
    3a6c:	89 85       	ldd	r24, Y+9	; 0x09
    3a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a70:	80 5c       	subi	r24, 0xC0	; 192
    3a72:	91 40       	sbci	r25, 0x01	; 1
    3a74:	89 87       	std	Y+9, r24	; 0x09
    3a76:	9a 87       	std	Y+10, r25	; 0x0a
    3a78:	0f c0       	rjmp	.+30     	; 0x3a98 <CbIoToMotionCtlrData+0xde>
	else if(TempMoveY<MOVE_Y_MID2)
    3a7a:	89 85       	ldd	r24, Y+9	; 0x09
    3a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7e:	22 e0       	ldi	r18, 0x02	; 2
    3a80:	80 34       	cpi	r24, 0x40	; 64
    3a82:	92 07       	cpc	r25, r18
    3a84:	1c f4       	brge	.+6      	; 0x3a8c <CbIoToMotionCtlrData+0xd2>
		TempMoveY = 0x00;
    3a86:	19 86       	std	Y+9, r1	; 0x09
    3a88:	1a 86       	std	Y+10, r1	; 0x0a
    3a8a:	06 c0       	rjmp	.+12     	; 0x3a98 <CbIoToMotionCtlrData+0xde>
	else
		TempMoveY = (TempMoveY-MOVE_Y_MID2);
    3a8c:	89 85       	ldd	r24, Y+9	; 0x09
    3a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a90:	80 54       	subi	r24, 0x40	; 64
    3a92:	92 40       	sbci	r25, 0x02	; 2
    3a94:	89 87       	std	Y+9, r24	; 0x09
    3a96:	9a 87       	std	Y+10, r25	; 0x0a


	/**************ÐÞÕýZÖáADÖµ*******************/
	if(TempMoveZ<MOVE_Z_MID1)
    3a98:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9c:	21 e0       	ldi	r18, 0x01	; 1
    3a9e:	80 34       	cpi	r24, 0x40	; 64
    3aa0:	92 07       	cpc	r25, r18
    3aa2:	3c f4       	brge	.+14     	; 0x3ab2 <CbIoToMotionCtlrData+0xf8>
		TempMoveZ = (TempMoveZ-MOVE_Z_MID1);
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	80 54       	subi	r24, 0x40	; 64
    3aaa:	91 40       	sbci	r25, 0x01	; 1
    3aac:	8d 83       	std	Y+5, r24	; 0x05
    3aae:	9e 83       	std	Y+6, r25	; 0x06
    3ab0:	0f c0       	rjmp	.+30     	; 0x3ad0 <CbIoToMotionCtlrData+0x116>
	else if(TempMoveZ<MOVE_Z_MID2)
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	22 e0       	ldi	r18, 0x02	; 2
    3ab8:	80 3c       	cpi	r24, 0xC0	; 192
    3aba:	92 07       	cpc	r25, r18
    3abc:	1c f4       	brge	.+6      	; 0x3ac4 <CbIoToMotionCtlrData+0x10a>
		TempMoveZ = 0x00;
    3abe:	1d 82       	std	Y+5, r1	; 0x05
    3ac0:	1e 82       	std	Y+6, r1	; 0x06
    3ac2:	06 c0       	rjmp	.+12     	; 0x3ad0 <CbIoToMotionCtlrData+0x116>
	else
		TempMoveZ = TempMoveZ-MOVE_Z_MID2;
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	80 5c       	subi	r24, 0xC0	; 192
    3aca:	92 40       	sbci	r25, 0x02	; 2
    3acc:	8d 83       	std	Y+5, r24	; 0x05
    3ace:	9e 83       	std	Y+6, r25	; 0x06

	TempSpeedL = GetMoveSpeed( TempMoveY ,0-TempMoveX/4 ,  TempMoveZ,		TempMoveK);
    3ad0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ad4:	8d 87       	std	Y+13, r24	; 0x0d
    3ad6:	9e 87       	std	Y+14, r25	; 0x0e
    3ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    3adc:	99 23       	and	r25, r25
    3ade:	2c f4       	brge	.+10     	; 0x3aea <CbIoToMotionCtlrData+0x130>
    3ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae4:	03 96       	adiw	r24, 0x03	; 3
    3ae6:	8d 87       	std	Y+13, r24	; 0x0d
    3ae8:	9e 87       	std	Y+14, r25	; 0x0e
    3aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aee:	95 95       	asr	r25
    3af0:	87 95       	ror	r24
    3af2:	95 95       	asr	r25
    3af4:	87 95       	ror	r24
    3af6:	44 27       	eor	r20, r20
    3af8:	55 27       	eor	r21, r21
    3afa:	48 1b       	sub	r20, r24
    3afc:	59 0b       	sbc	r21, r25
    3afe:	89 85       	ldd	r24, Y+9	; 0x09
    3b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b02:	2d 81       	ldd	r18, Y+5	; 0x05
    3b04:	3e 81       	ldd	r19, Y+6	; 0x06
    3b06:	ef 81       	ldd	r30, Y+7	; 0x07
    3b08:	f8 85       	ldd	r31, Y+8	; 0x08
    3b0a:	ba 01       	movw	r22, r20
    3b0c:	a9 01       	movw	r20, r18
    3b0e:	9f 01       	movw	r18, r30
    3b10:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetMoveSpeed>
    3b14:	8b 83       	std	Y+3, r24	; 0x03
    3b16:	9c 83       	std	Y+4, r25	; 0x04
	TempSpeedR = GetMoveSpeed( TempMoveY ,TempMoveX/4, 0-TempMoveZ,	TempMoveK);
    3b18:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b1c:	8f 87       	std	Y+15, r24	; 0x0f
    3b1e:	98 8b       	std	Y+16, r25	; 0x10
    3b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b22:	98 89       	ldd	r25, Y+16	; 0x10
    3b24:	99 23       	and	r25, r25
    3b26:	2c f4       	brge	.+10     	; 0x3b32 <CbIoToMotionCtlrData+0x178>
    3b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b2a:	98 89       	ldd	r25, Y+16	; 0x10
    3b2c:	03 96       	adiw	r24, 0x03	; 3
    3b2e:	8f 87       	std	Y+15, r24	; 0x0f
    3b30:	98 8b       	std	Y+16, r25	; 0x10
    3b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b34:	98 89       	ldd	r25, Y+16	; 0x10
    3b36:	95 95       	asr	r25
    3b38:	87 95       	ror	r24
    3b3a:	95 95       	asr	r25
    3b3c:	87 95       	ror	r24
    3b3e:	bc 01       	movw	r22, r24
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	44 27       	eor	r20, r20
    3b46:	55 27       	eor	r21, r21
    3b48:	48 1b       	sub	r20, r24
    3b4a:	59 0b       	sbc	r21, r25
    3b4c:	89 85       	ldd	r24, Y+9	; 0x09
    3b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b50:	2f 81       	ldd	r18, Y+7	; 0x07
    3b52:	38 85       	ldd	r19, Y+8	; 0x08
    3b54:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetMoveSpeed>
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	9a 83       	std	Y+2, r25	; 0x02

	SetAccSpeed(TempSpeedL,&SetSpeedL);
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b60:	25 e6       	ldi	r18, 0x65	; 101
    3b62:	30 e2       	ldi	r19, 0x20	; 32
    3b64:	b9 01       	movw	r22, r18
    3b66:	0e 94 bd 1b 	call	0x377a	; 0x377a <SetAccSpeed>
	SetAccSpeed(TempSpeedR,&SetSpeedR);
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6e:	23 e6       	ldi	r18, 0x63	; 99
    3b70:	30 e2       	ldi	r19, 0x20	; 32
    3b72:	b9 01       	movw	r22, r18
    3b74:	0e 94 bd 1b 	call	0x377a	; 0x377a <SetAccSpeed>

	TempSpeedL = SetSpeedL;
    3b78:	80 91 65 20 	lds	r24, 0x2065
    3b7c:	90 91 66 20 	lds	r25, 0x2066
    3b80:	8b 83       	std	Y+3, r24	; 0x03
    3b82:	9c 83       	std	Y+4, r25	; 0x04
	TempSpeedR = SetSpeedR;
    3b84:	80 91 63 20 	lds	r24, 0x2063
    3b88:	90 91 64 20 	lds	r25, 0x2064
    3b8c:	89 83       	std	Y+1, r24	; 0x01
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
//	TempSpeedL = adc_a_control.adb0>>4;
//	TempSpeedR = TempMoveY>>2;


	/**************ÉèÖÃ×óµç»úËÙ*******************/
	if(TempSpeedL==0x00)
    3b90:	8b 81       	ldd	r24, Y+3	; 0x03
    3b92:	9c 81       	ldd	r25, Y+4	; 0x04
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	29 f4       	brne	.+10     	; 0x3ba2 <CbIoToMotionCtlrData+0x1e8>
	{
		CbCtrlData.LeftMoveCtrl 	= 0x00;
    3b98:	10 92 9d 20 	sts	0x209D, r1
		CbCtrlData.LeftMoveSpeed	= 0x00;
    3b9c:	10 92 9f 20 	sts	0x209F, r1
    3ba0:	13 c0       	rjmp	.+38     	; 0x3bc8 <CbIoToMotionCtlrData+0x20e>
	}
	else if(TempSpeedL>0x00)
    3ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba6:	18 16       	cp	r1, r24
    3ba8:	19 06       	cpc	r1, r25
    3baa:	3c f4       	brge	.+14     	; 0x3bba <CbIoToMotionCtlrData+0x200>
	{
		CbCtrlData.LeftMoveCtrl 	= 0x01;
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	80 93 9d 20 	sts	0x209D, r24
		CbCtrlData.LeftMoveSpeed	= TempSpeedL;
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	80 93 9f 20 	sts	0x209F, r24
    3bb8:	07 c0       	rjmp	.+14     	; 0x3bc8 <CbIoToMotionCtlrData+0x20e>
	}
	else
	{
		CbCtrlData.LeftMoveCtrl 	= 0x02;
    3bba:	82 e0       	ldi	r24, 0x02	; 2
    3bbc:	80 93 9d 20 	sts	0x209D, r24
		CbCtrlData.LeftMoveSpeed	= 0-TempSpeedL;
    3bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc2:	81 95       	neg	r24
    3bc4:	80 93 9f 20 	sts	0x209F, r24
	}
	/**************ÉèÖÃÓÒµç»úËÙ*******************/
	if(TempSpeedR==0x00)
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9a 81       	ldd	r25, Y+2	; 0x02
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	29 f4       	brne	.+10     	; 0x3bda <CbIoToMotionCtlrData+0x220>
	{
		CbCtrlData.RightMoveCtrl 	= 0x00;
    3bd0:	10 92 9e 20 	sts	0x209E, r1
		CbCtrlData.RightMoveSpeed	= 0x00;
    3bd4:	10 92 a0 20 	sts	0x20A0, r1
    3bd8:	13 c0       	rjmp	.+38     	; 0x3c00 <CbIoToMotionCtlrData+0x246>
	}
	else if(TempSpeedR>0x00)
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	18 16       	cp	r1, r24
    3be0:	19 06       	cpc	r1, r25
    3be2:	3c f4       	brge	.+14     	; 0x3bf2 <CbIoToMotionCtlrData+0x238>
	{
		CbCtrlData.RightMoveCtrl 	= 0x01;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	80 93 9e 20 	sts	0x209E, r24
		CbCtrlData.RightMoveSpeed	= TempSpeedR;
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	80 93 a0 20 	sts	0x20A0, r24
    3bf0:	07 c0       	rjmp	.+14     	; 0x3c00 <CbIoToMotionCtlrData+0x246>
	}
	else
	{
		CbCtrlData.RightMoveCtrl 	= 0x02;
    3bf2:	82 e0       	ldi	r24, 0x02	; 2
    3bf4:	80 93 9e 20 	sts	0x209E, r24
		CbCtrlData.RightMoveSpeed	= 0-TempSpeedR;
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	81 95       	neg	r24
    3bfc:	80 93 a0 20 	sts	0x20A0, r24
	}

}
    3c00:	60 96       	adiw	r28, 0x10	; 16
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <CbIoToCameraCtlrData>:

static void CbIoToCameraCtlrData(void)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	00 d0       	rcall	.+0      	; 0x3c12 <CbIoToCameraCtlrData+0x6>
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62

	static uint8_t TempCamIn,TempCamOut;
	static int16_t TempZommVal;
	static uint8_t PreCamIn = 0;

	CbCtrlData.CamZoomCtrl = 0x00;
    3c16:	10 92 a8 20 	sts	0x20A8, r1

	TempCamIn = PORT_GetPortValue( &PORTD );
    3c1a:	e0 e6       	ldi	r30, 0x60	; 96
    3c1c:	f6 e0       	ldi	r31, 0x06	; 6
    3c1e:	80 85       	ldd	r24, Z+8	; 0x08
    3c20:	80 93 6b 20 	sts	0x206B, r24
	TempCamIn >>= 0X05;
    3c24:	80 91 6b 20 	lds	r24, 0x206B
    3c28:	82 95       	swap	r24
    3c2a:	86 95       	lsr	r24
    3c2c:	87 70       	andi	r24, 0x07	; 7
    3c2e:	80 93 6b 20 	sts	0x206B, r24

	switch(TempCamIn)
    3c32:	80 91 6b 20 	lds	r24, 0x206B
    3c36:	28 2f       	mov	r18, r24
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	29 83       	std	Y+1, r18	; 0x01
    3c3c:	3a 83       	std	Y+2, r19	; 0x02
    3c3e:	49 81       	ldd	r20, Y+1	; 0x01
    3c40:	5a 81       	ldd	r21, Y+2	; 0x02
    3c42:	44 30       	cpi	r20, 0x04	; 4
    3c44:	51 05       	cpc	r21, r1
    3c46:	31 f1       	breq	.+76     	; 0x3c94 <CbIoToCameraCtlrData+0x88>
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	85 30       	cpi	r24, 0x05	; 5
    3c4e:	91 05       	cpc	r25, r1
    3c50:	5c f4       	brge	.+22     	; 0x3c68 <CbIoToCameraCtlrData+0x5c>
    3c52:	29 81       	ldd	r18, Y+1	; 0x01
    3c54:	3a 81       	ldd	r19, Y+2	; 0x02
    3c56:	22 30       	cpi	r18, 0x02	; 2
    3c58:	31 05       	cpc	r19, r1
    3c5a:	a9 f0       	breq	.+42     	; 0x3c86 <CbIoToCameraCtlrData+0x7a>
    3c5c:	49 81       	ldd	r20, Y+1	; 0x01
    3c5e:	5a 81       	ldd	r21, Y+2	; 0x02
    3c60:	43 30       	cpi	r20, 0x03	; 3
    3c62:	51 05       	cpc	r21, r1
    3c64:	29 f1       	breq	.+74     	; 0x3cb0 <CbIoToCameraCtlrData+0xa4>
    3c66:	2a c0       	rjmp	.+84     	; 0x3cbc <CbIoToCameraCtlrData+0xb0>
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6c:	85 30       	cpi	r24, 0x05	; 5
    3c6e:	91 05       	cpc	r25, r1
    3c70:	c1 f0       	breq	.+48     	; 0x3ca2 <CbIoToCameraCtlrData+0x96>
    3c72:	29 81       	ldd	r18, Y+1	; 0x01
    3c74:	3a 81       	ldd	r19, Y+2	; 0x02
    3c76:	26 30       	cpi	r18, 0x06	; 6
    3c78:	31 05       	cpc	r19, r1
    3c7a:	01 f5       	brne	.+64     	; 0x3cbc <CbIoToCameraCtlrData+0xb0>
	{
	case 0x06:			//ÔÆÌ¨Í¼Ïñ 1
		PreCamIn = 0x00;
    3c7c:	10 92 67 20 	sts	0x2067, r1
		TempCamOut = 0X00;
    3c80:	10 92 6a 20 	sts	0x206A, r1
    3c84:	1b c0       	rjmp	.+54     	; 0x3cbc <CbIoToCameraCtlrData+0xb0>
		break;
	case 0x02:			//Ç°ÊÓÍ¼Ïñ 2
		PreCamIn = 0x01;
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	80 93 67 20 	sts	0x2067, r24
		TempCamOut = 0X01;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	80 93 6a 20 	sts	0x206A, r24
    3c92:	14 c0       	rjmp	.+40     	; 0x3cbc <CbIoToCameraCtlrData+0xb0>
		break;
	case 0x04:			//ÊÖ×¦Í¼Ïñ 3
		PreCamIn = 0x02;
    3c94:	82 e0       	ldi	r24, 0x02	; 2
    3c96:	80 93 67 20 	sts	0x2067, r24
		TempCamOut = 0X04;
    3c9a:	84 e0       	ldi	r24, 0x04	; 4
    3c9c:	80 93 6a 20 	sts	0x206A, r24
    3ca0:	0d c0       	rjmp	.+26     	; 0x3cbc <CbIoToCameraCtlrData+0xb0>
		break;
	case 0x05:			//ºóÊÓÍ¼Ïñ 4
		PreCamIn = 0x03;
    3ca2:	83 e0       	ldi	r24, 0x03	; 3
    3ca4:	80 93 67 20 	sts	0x2067, r24
		TempCamOut = 0X03;
    3ca8:	83 e0       	ldi	r24, 0x03	; 3
    3caa:	80 93 6a 20 	sts	0x206A, r24
    3cae:	06 c0       	rjmp	.+12     	; 0x3cbc <CbIoToCameraCtlrData+0xb0>
		break;
	case 0x03:			//ËÄ»­ÃæÍ¼Ïñ 5
		PreCamIn = 0x04;
    3cb0:	84 e0       	ldi	r24, 0x04	; 4
    3cb2:	80 93 67 20 	sts	0x2067, r24
		TempCamOut = 0X02;
    3cb6:	82 e0       	ldi	r24, 0x02	; 2
    3cb8:	80 93 6a 20 	sts	0x206A, r24
		break;

	}

	PORTE.OUTCLR  = 0X07;
    3cbc:	e0 e8       	ldi	r30, 0x80	; 128
    3cbe:	f6 e0       	ldi	r31, 0x06	; 6
    3cc0:	87 e0       	ldi	r24, 0x07	; 7
    3cc2:	86 83       	std	Z+6, r24	; 0x06
	PORTE.OUTSET  = TempCamOut;
    3cc4:	e0 e8       	ldi	r30, 0x80	; 128
    3cc6:	f6 e0       	ldi	r31, 0x06	; 6
    3cc8:	80 91 6a 20 	lds	r24, 0x206A
    3ccc:	85 83       	std	Z+5, r24	; 0x05

	CbCtrlData.CamZoomCtrl |= (PreCamIn<<5);
    3cce:	80 91 a8 20 	lds	r24, 0x20A8
    3cd2:	28 2f       	mov	r18, r24
    3cd4:	80 91 67 20 	lds	r24, 0x2067
    3cd8:	88 2f       	mov	r24, r24
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	82 95       	swap	r24
    3ce2:	92 95       	swap	r25
    3ce4:	90 7f       	andi	r25, 0xF0	; 240
    3ce6:	98 27       	eor	r25, r24
    3ce8:	80 7f       	andi	r24, 0xF0	; 240
    3cea:	98 27       	eor	r25, r24
    3cec:	82 2b       	or	r24, r18
    3cee:	80 93 a8 20 	sts	0x20A8, r24

	/********************ÉèÖÃÔÆÌ¨½¹¾à*******************/
	TempZommVal = adc_a_control.ad1;
    3cf2:	80 91 0d 20 	lds	r24, 0x200D
    3cf6:	90 91 0e 20 	lds	r25, 0x200E
    3cfa:	80 93 68 20 	sts	0x2068, r24
    3cfe:	90 93 69 20 	sts	0x2069, r25
	TempZommVal >>= 0x07;
    3d02:	80 91 68 20 	lds	r24, 0x2068
    3d06:	90 91 69 20 	lds	r25, 0x2069
    3d0a:	88 0f       	add	r24, r24
    3d0c:	89 2f       	mov	r24, r25
    3d0e:	88 1f       	adc	r24, r24
    3d10:	99 0b       	sbc	r25, r25
    3d12:	80 93 68 20 	sts	0x2068, r24
    3d16:	90 93 69 20 	sts	0x2069, r25
	TempZommVal &= 0x001F;
    3d1a:	80 91 68 20 	lds	r24, 0x2068
    3d1e:	90 91 69 20 	lds	r25, 0x2069
    3d22:	8f 71       	andi	r24, 0x1F	; 31
    3d24:	90 70       	andi	r25, 0x00	; 0
    3d26:	80 93 68 20 	sts	0x2068, r24
    3d2a:	90 93 69 20 	sts	0x2069, r25

	TempZommVal = ((TempZommVal-0x02)*0x1F)/0X1D;
    3d2e:	20 91 68 20 	lds	r18, 0x2068
    3d32:	30 91 69 20 	lds	r19, 0x2069
    3d36:	8f e1       	ldi	r24, 0x1F	; 31
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	ac 01       	movw	r20, r24
    3d3c:	24 9f       	mul	r18, r20
    3d3e:	c0 01       	movw	r24, r0
    3d40:	25 9f       	mul	r18, r21
    3d42:	90 0d       	add	r25, r0
    3d44:	34 9f       	mul	r19, r20
    3d46:	90 0d       	add	r25, r0
    3d48:	11 24       	eor	r1, r1
    3d4a:	ce 97       	sbiw	r24, 0x3e	; 62
    3d4c:	2d e1       	ldi	r18, 0x1D	; 29
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	b9 01       	movw	r22, r18
    3d52:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <__divmodhi4>
    3d56:	cb 01       	movw	r24, r22
    3d58:	80 93 68 20 	sts	0x2068, r24
    3d5c:	90 93 69 20 	sts	0x2069, r25

	if(TempZommVal<0)
    3d60:	80 91 68 20 	lds	r24, 0x2068
    3d64:	90 91 69 20 	lds	r25, 0x2069
    3d68:	99 23       	and	r25, r25
    3d6a:	2c f4       	brge	.+10     	; 0x3d76 <CbIoToCameraCtlrData+0x16a>
		TempZommVal = 0;
    3d6c:	10 92 68 20 	sts	0x2068, r1
    3d70:	10 92 69 20 	sts	0x2069, r1
    3d74:	0d c0       	rjmp	.+26     	; 0x3d90 <CbIoToCameraCtlrData+0x184>
	else if(TempZommVal>0x1F)
    3d76:	80 91 68 20 	lds	r24, 0x2068
    3d7a:	90 91 69 20 	lds	r25, 0x2069
    3d7e:	80 32       	cpi	r24, 0x20	; 32
    3d80:	91 05       	cpc	r25, r1
    3d82:	34 f0       	brlt	.+12     	; 0x3d90 <CbIoToCameraCtlrData+0x184>
		TempZommVal = 0X1F;
    3d84:	8f e1       	ldi	r24, 0x1F	; 31
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	80 93 68 20 	sts	0x2068, r24
    3d8c:	90 93 69 20 	sts	0x2069, r25

	CbCtrlData.CamZoomCtrl |= TempZommVal;
    3d90:	80 91 a8 20 	lds	r24, 0x20A8
    3d94:	28 2f       	mov	r18, r24
    3d96:	80 91 68 20 	lds	r24, 0x2068
    3d9a:	90 91 69 20 	lds	r25, 0x2069
    3d9e:	82 2b       	or	r24, r18
    3da0:	80 93 a8 20 	sts	0x20A8, r24


}
    3da4:	0f 90       	pop	r0
    3da6:	0f 90       	pop	r0
    3da8:	cf 91       	pop	r28
    3daa:	df 91       	pop	r29
    3dac:	08 95       	ret

00003dae <CbIoToLightCtlrData>:

static void CbIoToLightCtlrData(void)
{
    3dae:	df 93       	push	r29
    3db0:	cf 93       	push	r28
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
//	PE3		IN_HD_LIGHT		ÔÆÌ¨µÆ¹â¿ØÖÆ
//	PE4		IN_MV_LIGHT		ÐÐÊ¹µÆ¹â¿ØÖÆ

	static uint8_t TempAim,TempCtrl,TempStateHand;

	TempAim = PORT_GetPortValue( &PORTC );
    3db6:	e0 e4       	ldi	r30, 0x40	; 64
    3db8:	f6 e0       	ldi	r31, 0x06	; 6
    3dba:	80 85       	ldd	r24, Z+8	; 0x08
    3dbc:	80 93 6e 20 	sts	0x206E, r24
	TempAim &= 0X01;
    3dc0:	80 91 6e 20 	lds	r24, 0x206E
    3dc4:	81 70       	andi	r24, 0x01	; 1
    3dc6:	80 93 6e 20 	sts	0x206E, r24

	TempCtrl = PORT_GetPortValue( &PORTE );
    3dca:	e0 e8       	ldi	r30, 0x80	; 128
    3dcc:	f6 e0       	ldi	r31, 0x06	; 6
    3dce:	80 85       	ldd	r24, Z+8	; 0x08
    3dd0:	80 93 6d 20 	sts	0x206D, r24
	TempCtrl >>= 0X03;
    3dd4:	80 91 6d 20 	lds	r24, 0x206D
    3dd8:	86 95       	lsr	r24
    3dda:	86 95       	lsr	r24
    3ddc:	86 95       	lsr	r24
    3dde:	80 93 6d 20 	sts	0x206D, r24
	TempCtrl  &= 0X03;
    3de2:	80 91 6d 20 	lds	r24, 0x206D
    3de6:	83 70       	andi	r24, 0x03	; 3
    3de8:	80 93 6d 20 	sts	0x206D, r24

	TempStateHand   = (PORT_GetPortValue( &PORTE )>>5)&0x07;
    3dec:	e0 e8       	ldi	r30, 0x80	; 128
    3dee:	f6 e0       	ldi	r31, 0x06	; 6
    3df0:	80 85       	ldd	r24, Z+8	; 0x08
    3df2:	82 95       	swap	r24
    3df4:	86 95       	lsr	r24
    3df6:	87 70       	andi	r24, 0x07	; 7
    3df8:	80 93 6c 20 	sts	0x206C, r24

	CbCtrlData.ExCtrl = 0x00;
    3dfc:	10 92 a6 20 	sts	0x20A6, r1
	CbCtrlData.SwCtrl = 0x00;
    3e00:	10 92 a7 20 	sts	0x20A7, r1

	if(TempAim == 0X01)							//Ãé×¼¿ØÖÆ
    3e04:	80 91 6e 20 	lds	r24, 0x206E
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	31 f4       	brne	.+12     	; 0x3e18 <CbIoToLightCtlrData+0x6a>
		CbCtrlData.SwCtrl &= ~(1<<4);
    3e0c:	80 91 a7 20 	lds	r24, 0x20A7
    3e10:	8f 7e       	andi	r24, 0xEF	; 239
    3e12:	80 93 a7 20 	sts	0x20A7, r24
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <CbIoToLightCtlrData+0x74>
	else
		CbCtrlData.SwCtrl |= (1<<4);
    3e18:	80 91 a7 20 	lds	r24, 0x20A7
    3e1c:	80 61       	ori	r24, 0x10	; 16
    3e1e:	80 93 a7 20 	sts	0x20A7, r24

	if( (TempStateHand&0x04) != 0x04)			//ÔÆÌ¨¡¢ÊÖ×¥¡¢Ç°ÏòµÆ¹âÕÕÃ÷
    3e22:	80 91 6c 20 	lds	r24, 0x206C
    3e26:	88 2f       	mov	r24, r24
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	84 70       	andi	r24, 0x04	; 4
    3e2c:	90 70       	andi	r25, 0x00	; 0
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	31 f4       	brne	.+12     	; 0x3e3e <CbIoToLightCtlrData+0x90>
		CbCtrlData.SwCtrl |= (0x80|0x40|0x20);
    3e32:	80 91 a7 20 	lds	r24, 0x20A7
    3e36:	80 6e       	ori	r24, 0xE0	; 224
    3e38:	80 93 a7 20 	sts	0x20A7, r24
    3e3c:	05 c0       	rjmp	.+10     	; 0x3e48 <CbIoToLightCtlrData+0x9a>
	else
		CbCtrlData.SwCtrl &= ~(0x80|0x40|0x20);
    3e3e:	80 91 a7 20 	lds	r24, 0x20A7
    3e42:	8f 71       	andi	r24, 0x1F	; 31
    3e44:	80 93 a7 20 	sts	0x20A7, r24

	if( TempCtrl == 0x01)			//ÐÐ³µÉãÏñÍ·¸©
    3e48:	80 91 6d 20 	lds	r24, 0x206D
    3e4c:	81 30       	cpi	r24, 0x01	; 1
    3e4e:	31 f4       	brne	.+12     	; 0x3e5c <CbIoToLightCtlrData+0xae>
		CbCtrlData.ExCtrl |= 0x80;
    3e50:	80 91 a6 20 	lds	r24, 0x20A6
    3e54:	80 68       	ori	r24, 0x80	; 128
    3e56:	80 93 a6 20 	sts	0x20A6, r24
    3e5a:	0e c0       	rjmp	.+28     	; 0x3e78 <CbIoToLightCtlrData+0xca>
	else if( TempCtrl == 0x02)		//ÐÐ³µÉãÏñÍ·Ñö
    3e5c:	80 91 6d 20 	lds	r24, 0x206D
    3e60:	82 30       	cpi	r24, 0x02	; 2
    3e62:	31 f4       	brne	.+12     	; 0x3e70 <CbIoToLightCtlrData+0xc2>
		CbCtrlData.ExCtrl |= 0x40;
    3e64:	80 91 a6 20 	lds	r24, 0x20A6
    3e68:	80 64       	ori	r24, 0x40	; 64
    3e6a:	80 93 a6 20 	sts	0x20A6, r24
    3e6e:	04 c0       	rjmp	.+8      	; 0x3e78 <CbIoToLightCtlrData+0xca>
	else
		CbCtrlData.ExCtrl |= 0x00;
    3e70:	80 91 a6 20 	lds	r24, 0x20A6
    3e74:	80 93 a6 20 	sts	0x20A6, r24


}
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	08 95       	ret

00003e7e <CbIoToFireCtlrData>:

#define FireDelayTime 5

static void CbIoToFireCtlrData(void)
{
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
//	PC4		IN_Fire			¿ª»ð¿ØÖÆ
	static uint8_t TempAimLock,TempFire;

	static uint8_t TempFireTick = 0;

	TempAimLock = (PORT_GetPortValue( &PORTC )>>1)&0x01;
    3e86:	e0 e4       	ldi	r30, 0x40	; 64
    3e88:	f6 e0       	ldi	r31, 0x06	; 6
    3e8a:	80 85       	ldd	r24, Z+8	; 0x08
    3e8c:	86 95       	lsr	r24
    3e8e:	81 70       	andi	r24, 0x01	; 1
    3e90:	80 93 71 20 	sts	0x2071, r24
	TempFire    = (PORT_GetPortValue( &PORTC )>>4)&0x01;
    3e94:	e0 e4       	ldi	r30, 0x40	; 64
    3e96:	f6 e0       	ldi	r31, 0x06	; 6
    3e98:	80 85       	ldd	r24, Z+8	; 0x08
    3e9a:	82 95       	swap	r24
    3e9c:	8f 70       	andi	r24, 0x0F	; 15
    3e9e:	81 70       	andi	r24, 0x01	; 1
    3ea0:	80 93 70 20 	sts	0x2070, r24

	if(TempAimLock == 0x01)
    3ea4:	80 91 71 20 	lds	r24, 0x2071
    3ea8:	81 30       	cpi	r24, 0x01	; 1
    3eaa:	29 f4       	brne	.+10     	; 0x3eb6 <CbIoToFireCtlrData+0x38>
	{
		CbCtrlData.FireState = FIRE_LOCK;
    3eac:	10 92 ab 20 	sts	0x20AB, r1
		TempFireTick = 0;
    3eb0:	10 92 6f 20 	sts	0x206F, r1
    3eb4:	17 c0       	rjmp	.+46     	; 0x3ee4 <CbIoToFireCtlrData+0x66>

	}
	else
	{
		if(TempFire == 0x01)
    3eb6:	80 91 70 20 	lds	r24, 0x2070
    3eba:	81 30       	cpi	r24, 0x01	; 1
    3ebc:	31 f4       	brne	.+12     	; 0x3eca <CbIoToFireCtlrData+0x4c>
		{
			CbCtrlData.FireState = FIRE_PREPARE;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	80 93 ab 20 	sts	0x20AB, r24
			TempFireTick = 0;
    3ec4:	10 92 6f 20 	sts	0x206F, r1
    3ec8:	0d c0       	rjmp	.+26     	; 0x3ee4 <CbIoToFireCtlrData+0x66>
		}
		else
		{
			if(TempFireTick>FireDelayTime)
    3eca:	80 91 6f 20 	lds	r24, 0x206F
    3ece:	86 30       	cpi	r24, 0x06	; 6
    3ed0:	20 f0       	brcs	.+8      	; 0x3eda <CbIoToFireCtlrData+0x5c>
				CbCtrlData.FireState = FIRE_START;
    3ed2:	82 e0       	ldi	r24, 0x02	; 2
    3ed4:	80 93 ab 20 	sts	0x20AB, r24
    3ed8:	05 c0       	rjmp	.+10     	; 0x3ee4 <CbIoToFireCtlrData+0x66>
			else
				TempFireTick++;
    3eda:	80 91 6f 20 	lds	r24, 0x206F
    3ede:	8f 5f       	subi	r24, 0xFF	; 255
    3ee0:	80 93 6f 20 	sts	0x206F, r24
		}
	}
}
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	08 95       	ret

00003eea <CbIoToComSwCtrl>:

static void CbIoToComSwCtrl(void)
{
    3eea:	df 93       	push	r29
    3eec:	cf 93       	push	r28
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
//	PC5		IN_COM_SW		ÓÐÏßÎÞÏßÇÐ»»¼ì²â
//
//	PD0		OUT_COM_CTRL	ÓÐÏßÎÞÏßÇÐ»»¿ØÖÆ
	static uint8_t TempComState;

	TempComState   = PORT_GetPortValue( &PORTC );
    3ef2:	e0 e4       	ldi	r30, 0x40	; 64
    3ef4:	f6 e0       	ldi	r31, 0x06	; 6
    3ef6:	80 85       	ldd	r24, Z+8	; 0x08
    3ef8:	80 93 72 20 	sts	0x2072, r24
	TempComState >>= 0x05;
    3efc:	80 91 72 20 	lds	r24, 0x2072
    3f00:	82 95       	swap	r24
    3f02:	86 95       	lsr	r24
    3f04:	87 70       	andi	r24, 0x07	; 7
    3f06:	80 93 72 20 	sts	0x2072, r24
	TempComState  &= 0x01;
    3f0a:	80 91 72 20 	lds	r24, 0x2072
    3f0e:	81 70       	andi	r24, 0x01	; 1
    3f10:	80 93 72 20 	sts	0x2072, r24

	if(TempComState == 0x01)	//ÎªÎÞÏß¿ØÖÆ
    3f14:	80 91 72 20 	lds	r24, 0x2072
    3f18:	81 30       	cpi	r24, 0x01	; 1
    3f1a:	41 f4       	brne	.+16     	; 0x3f2c <CbIoToComSwCtrl+0x42>
	{
		PORTD.OUTCLR  = PIN0_bm;
    3f1c:	e0 e6       	ldi	r30, 0x60	; 96
    3f1e:	f6 e0       	ldi	r31, 0x06	; 6
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	86 83       	std	Z+6, r24	; 0x06
		CbCtrlData.ComSwState = COM_WIRELESS_EN;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	80 93 aa 20 	sts	0x20AA, r24
    3f2a:	07 c0       	rjmp	.+14     	; 0x3f3a <CbIoToComSwCtrl+0x50>
	}
	else						//ÎªÓÐÏß¿ØÖÆ
	{
		PORTD.OUTSET  = PIN0_bm;
    3f2c:	e0 e6       	ldi	r30, 0x60	; 96
    3f2e:	f6 e0       	ldi	r31, 0x06	; 6
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	85 83       	std	Z+5, r24	; 0x05
		CbCtrlData.ComSwState = COM_WIRE_EN;
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	80 93 aa 20 	sts	0x20AA, r24
	}
}
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <CbStatrOneFrameTxd>:

static void CbStatrOneFrameTxd(void)
{
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	0f 92       	push	r0
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
	uint8_t count = 0;
    3f4a:	19 82       	std	Y+1, r1	; 0x01

	if(CbCtrlData.FireState == FIRE_LOCK)
    3f4c:	80 91 ab 20 	lds	r24, 0x20AB
    3f50:	88 23       	and	r24, r24
    3f52:	09 f0       	breq	.+2      	; 0x3f56 <CbStatrOneFrameTxd+0x16>
    3f54:	f5 c0       	rjmp	.+490    	; 0x4140 <CbStatrOneFrameTxd+0x200>
	{
		/********************  Ö¡Í· *********************/
		CbCtrlData.TxdDataBuf[0] = CB_TXD_START;
    3f56:	85 ea       	ldi	r24, 0xA5	; 165
    3f58:	80 93 80 20 	sts	0x2080, r24
//		if(CbCtrlData.DevID > CB_DEVID_MAX)
//			CbCtrlData.DevID = 1;
//		else
//			CbCtrlData.DevID++;

		CbCtrlData.DevID = 0x00;
    3f5c:	10 92 9c 20 	sts	0x209C, r1

		CbCtrlData.TxdDataBuf[1] = CbCtrlData.DevID<<4;
    3f60:	80 91 9c 20 	lds	r24, 0x209C
    3f64:	82 95       	swap	r24
    3f66:	80 7f       	andi	r24, 0xF0	; 240
    3f68:	80 93 81 20 	sts	0x2081, r24

		/****************  Ïà¹Ø¿ØÖÆÖ¸Áî  ****************/

		CbCtrlData.TxdDataBuf[1] |= (CbCtrlData.LeftMoveCtrl<<2)|CbCtrlData.RightMoveCtrl;
    3f6c:	80 91 81 20 	lds	r24, 0x2081
    3f70:	28 2f       	mov	r18, r24
    3f72:	80 91 9d 20 	lds	r24, 0x209D
    3f76:	88 2f       	mov	r24, r24
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	88 0f       	add	r24, r24
    3f80:	99 1f       	adc	r25, r25
    3f82:	98 2f       	mov	r25, r24
    3f84:	80 91 9e 20 	lds	r24, 0x209E
    3f88:	89 2b       	or	r24, r25
    3f8a:	82 2b       	or	r24, r18
    3f8c:	80 93 81 20 	sts	0x2081, r24
		CbCtrlData.TxdDataBuf[2] = CbCtrlData.LeftMoveSpeed;
    3f90:	80 91 9f 20 	lds	r24, 0x209F
    3f94:	80 93 82 20 	sts	0x2082, r24
		CbCtrlData.TxdDataBuf[3] = CbCtrlData.RightMoveSpeed;
    3f98:	80 91 a0 20 	lds	r24, 0x20A0
    3f9c:	80 93 83 20 	sts	0x2083, r24

		CbCtrlData.TxdDataBuf[9] = 0x00;
    3fa0:	10 92 89 20 	sts	0x2089, r1
		if(CbCtrlData.Arm18WorkMode)
    3fa4:	80 91 bb 20 	lds	r24, 0x20BB
    3fa8:	88 23       	and	r24, r24
    3faa:	51 f1       	breq	.+84     	; 0x4000 <CbStatrOneFrameTxd+0xc0>
		{
			CbCtrlData.TxdDataBuf[9] |= (1<<2);
    3fac:	80 91 89 20 	lds	r24, 0x2089
    3fb0:	84 60       	ori	r24, 0x04	; 4
    3fb2:	80 93 89 20 	sts	0x2089, r24
			CbCtrlData.TxdDataBuf[4] &= 0XF0;
    3fb6:	80 91 84 20 	lds	r24, 0x2084
    3fba:	80 7f       	andi	r24, 0xF0	; 240
    3fbc:	80 93 84 20 	sts	0x2084, r24
			CbCtrlData.TxdDataBuf[4] |= (CbCtrlData.Arm18WorkMode&0x07);	//»úÐµ±Û0¹Ø½Ú¿ØÖÆ
    3fc0:	80 91 84 20 	lds	r24, 0x2084
    3fc4:	98 2f       	mov	r25, r24
    3fc6:	80 91 bb 20 	lds	r24, 0x20BB
    3fca:	87 70       	andi	r24, 0x07	; 7
    3fcc:	89 2b       	or	r24, r25
    3fce:	80 93 84 20 	sts	0x2084, r24

			CbCtrlData.TxdDataBuf[5] = CbCtrlData.Arm34Ctrl;				//»úÐµ±Û34¹Ø½Ú¿ØÖÆ
    3fd2:	80 91 a2 20 	lds	r24, 0x20A2
    3fd6:	80 93 85 20 	sts	0x2085, r24
			CbCtrlData.TxdDataBuf[6] &= 0X0F;
    3fda:	80 91 86 20 	lds	r24, 0x2086
    3fde:	8f 70       	andi	r24, 0x0F	; 15
    3fe0:	80 93 86 20 	sts	0x2086, r24
			CbCtrlData.TxdDataBuf[6] |= (CbCtrlData.Arm50Ctrl&0XF0);		//»úÐµ±Û5¹Ø½Ú¿ØÖÆ
    3fe4:	80 91 86 20 	lds	r24, 0x2086
    3fe8:	98 2f       	mov	r25, r24
    3fea:	80 91 a3 20 	lds	r24, 0x20A3
    3fee:	80 7f       	andi	r24, 0xF0	; 240
    3ff0:	89 2b       	or	r24, r25
    3ff2:	80 93 86 20 	sts	0x2086, r24
			CbCtrlData.TxdDataBuf[7] = CbCtrlData.Arm78Ctrl;				//»úÐµ±Û78¹Ø½Ú¿ØÖÆ
    3ff6:	80 91 a4 20 	lds	r24, 0x20A4
    3ffa:	80 93 87 20 	sts	0x2087, r24
    3ffe:	32 c0       	rjmp	.+100    	; 0x4064 <CbStatrOneFrameTxd+0x124>


		}
		else
		{
			CbCtrlData.TxdDataBuf[9] &= ~(1<<2);
    4000:	80 91 89 20 	lds	r24, 0x2089
    4004:	8b 7f       	andi	r24, 0xFB	; 251
    4006:	80 93 89 20 	sts	0x2089, r24
			CbCtrlData.TxdDataBuf[4] = CbCtrlData.Arm12Ctrl;				//»úÐµ±Û12¹Ø½Ú¿ØÖÆ
    400a:	80 91 a1 20 	lds	r24, 0x20A1
    400e:	80 93 84 20 	sts	0x2084, r24
			CbCtrlData.TxdDataBuf[5] = CbCtrlData.Arm34Ctrl;				//»úÐµ±Û34¹Ø½Ú¿ØÖÆ
    4012:	80 91 a2 20 	lds	r24, 0x20A2
    4016:	80 93 85 20 	sts	0x2085, r24
			CbCtrlData.TxdDataBuf[6] &= 0X0F;
    401a:	80 91 86 20 	lds	r24, 0x2086
    401e:	8f 70       	andi	r24, 0x0F	; 15
    4020:	80 93 86 20 	sts	0x2086, r24
			CbCtrlData.TxdDataBuf[6] |= (CbCtrlData.Arm50Ctrl&0XF0);		//»úÐµ±Û5¹Ø½Ú¿ØÖÆ
    4024:	80 91 86 20 	lds	r24, 0x2086
    4028:	98 2f       	mov	r25, r24
    402a:	80 91 a3 20 	lds	r24, 0x20A3
    402e:	80 7f       	andi	r24, 0xF0	; 240
    4030:	89 2b       	or	r24, r25
    4032:	80 93 86 20 	sts	0x2086, r24

			if(CbCtrlData.YtWorkMode)
    4036:	80 91 bc 20 	lds	r24, 0x20BC
    403a:	88 23       	and	r24, r24
    403c:	51 f0       	breq	.+20     	; 0x4052 <CbStatrOneFrameTxd+0x112>
			{
				CbCtrlData.TxdDataBuf[9] |= (1<<1);
    403e:	80 91 89 20 	lds	r24, 0x2089
    4042:	82 60       	ori	r24, 0x02	; 2
    4044:	80 93 89 20 	sts	0x2089, r24
				CbCtrlData.TxdDataBuf[7] = CbCtrlData.YtWorkMode;
    4048:	80 91 bc 20 	lds	r24, 0x20BC
    404c:	80 93 87 20 	sts	0x2087, r24
    4050:	09 c0       	rjmp	.+18     	; 0x4064 <CbStatrOneFrameTxd+0x124>
			}
			else
			{
				CbCtrlData.TxdDataBuf[9] &= ~(1<<1);
    4052:	80 91 89 20 	lds	r24, 0x2089
    4056:	8d 7f       	andi	r24, 0xFD	; 253
    4058:	80 93 89 20 	sts	0x2089, r24
				CbCtrlData.TxdDataBuf[7] = CbCtrlData.Arm78Ctrl;				//»úÐµ±Û78¹Ø½Ú¿ØÖÆ
    405c:	80 91 a4 20 	lds	r24, 0x20A4
    4060:	80 93 87 20 	sts	0x2087, r24
			}

		}

		if(CbCtrlData.Arm0WorkMode)
    4064:	80 91 ba 20 	lds	r24, 0x20BA
    4068:	88 23       	and	r24, r24
    406a:	a1 f0       	breq	.+40     	; 0x4094 <CbStatrOneFrameTxd+0x154>
		{
			CbCtrlData.TxdDataBuf[9] |= (1<<3);
    406c:	80 91 89 20 	lds	r24, 0x2089
    4070:	88 60       	ori	r24, 0x08	; 8
    4072:	80 93 89 20 	sts	0x2089, r24
			CbCtrlData.TxdDataBuf[6] &= 0XF0;
    4076:	80 91 86 20 	lds	r24, 0x2086
    407a:	80 7f       	andi	r24, 0xF0	; 240
    407c:	80 93 86 20 	sts	0x2086, r24
			CbCtrlData.TxdDataBuf[6] |= (CbCtrlData.Arm0WorkMode&0x07);			//»úÐµ±Û0¹Ø½Ú¿ØÖÆ
    4080:	80 91 86 20 	lds	r24, 0x2086
    4084:	98 2f       	mov	r25, r24
    4086:	80 91 ba 20 	lds	r24, 0x20BA
    408a:	87 70       	andi	r24, 0x07	; 7
    408c:	89 2b       	or	r24, r25
    408e:	80 93 86 20 	sts	0x2086, r24
    4092:	13 c0       	rjmp	.+38     	; 0x40ba <CbStatrOneFrameTxd+0x17a>
		}
		else
		{
			CbCtrlData.TxdDataBuf[9] &= ~(1<<3);
    4094:	80 91 89 20 	lds	r24, 0x2089
    4098:	87 7f       	andi	r24, 0xF7	; 247
    409a:	80 93 89 20 	sts	0x2089, r24
			CbCtrlData.TxdDataBuf[6] &= 0XF0;
    409e:	80 91 86 20 	lds	r24, 0x2086
    40a2:	80 7f       	andi	r24, 0xF0	; 240
    40a4:	80 93 86 20 	sts	0x2086, r24
			CbCtrlData.TxdDataBuf[6] |= (CbCtrlData.Arm50Ctrl&0x0F);			//»úÐµ±Û0¹Ø½Ú¿ØÖÆ
    40a8:	80 91 86 20 	lds	r24, 0x2086
    40ac:	98 2f       	mov	r25, r24
    40ae:	80 91 a3 20 	lds	r24, 0x20A3
    40b2:	8f 70       	andi	r24, 0x0F	; 15
    40b4:	89 2b       	or	r24, r25
    40b6:	80 93 86 20 	sts	0x2086, r24
		}



		CbCtrlData.TxdDataBuf[8] = CbCtrlData.Arm6Ctrl;					//»úÐµ±Û6¹Ø½Ú¿ØÖÆ
    40ba:	80 91 a5 20 	lds	r24, 0x20A5
    40be:	80 93 88 20 	sts	0x2088, r24

		CbCtrlData.TxdDataBuf[9] &= 0X0F;
    40c2:	80 91 89 20 	lds	r24, 0x2089
    40c6:	8f 70       	andi	r24, 0x0F	; 15
    40c8:	80 93 89 20 	sts	0x2089, r24
		CbCtrlData.TxdDataBuf[9] |= (CbCtrlData.ExCtrl&0xF0);					//ÆäËü¿ØÖÆÐÅºÅ
    40cc:	80 91 89 20 	lds	r24, 0x2089
    40d0:	98 2f       	mov	r25, r24
    40d2:	80 91 a6 20 	lds	r24, 0x20A6
    40d6:	80 7f       	andi	r24, 0xF0	; 240
    40d8:	89 2b       	or	r24, r25
    40da:	80 93 89 20 	sts	0x2089, r24
		CbCtrlData.TxdDataBuf[10] = CbCtrlData.SwCtrl;					//¿ª¹ØÁ¿¿ØÖÆÐÅºÅ
    40de:	80 91 a7 20 	lds	r24, 0x20A7
    40e2:	80 93 8a 20 	sts	0x208A, r24
		CbCtrlData.TxdDataBuf[11] = CbCtrlData.CamZoomCtrl;				//Í¼Ïñ¼°½¹¾àÉèÖÃ
    40e6:	80 91 a8 20 	lds	r24, 0x20A8
    40ea:	80 93 8b 20 	sts	0x208B, r24

		if(CbCtrlData.TestMode == TEST_NO_LIMIT)
    40ee:	80 91 bd 20 	lds	r24, 0x20BD
    40f2:	81 30       	cpi	r24, 0x01	; 1
    40f4:	81 f4       	brne	.+32     	; 0x4116 <CbStatrOneFrameTxd+0x1d6>
		{
			CbCtrlData.TxdDataBuf[1] = 0x30;
    40f6:	80 e3       	ldi	r24, 0x30	; 48
    40f8:	80 93 81 20 	sts	0x2081, r24
			CbCtrlData.TxdDataBuf[2] = 0x11;
    40fc:	81 e1       	ldi	r24, 0x11	; 17
    40fe:	80 93 82 20 	sts	0x2082, r24
			CbCtrlData.TxdDataBuf[3] = 0x22;
    4102:	82 e2       	ldi	r24, 0x22	; 34
    4104:	80 93 83 20 	sts	0x2083, r24
			CbCtrlData.TxdDataBuf[4] = 0x33;
    4108:	83 e3       	ldi	r24, 0x33	; 51
    410a:	80 93 84 20 	sts	0x2084, r24
			CbCtrlData.TxdDataBuf[5] = 0x44;
    410e:	84 e4       	ldi	r24, 0x44	; 68
    4110:	80 93 85 20 	sts	0x2085, r24
    4114:	4a c0       	rjmp	.+148    	; 0x41aa <CbStatrOneFrameTxd+0x26a>

		}
		else if(CbCtrlData.TestMode == TEST_SET_ZERO)
    4116:	80 91 bd 20 	lds	r24, 0x20BD
    411a:	81 30       	cpi	r24, 0x01	; 1
    411c:	09 f0       	breq	.+2      	; 0x4120 <CbStatrOneFrameTxd+0x1e0>
    411e:	45 c0       	rjmp	.+138    	; 0x41aa <CbStatrOneFrameTxd+0x26a>
		{
			CbCtrlData.TxdDataBuf[1] = 0x30;
    4120:	80 e3       	ldi	r24, 0x30	; 48
    4122:	80 93 81 20 	sts	0x2081, r24
			CbCtrlData.TxdDataBuf[2] = 0x55;
    4126:	85 e5       	ldi	r24, 0x55	; 85
    4128:	80 93 82 20 	sts	0x2082, r24
			CbCtrlData.TxdDataBuf[3] = 0x66;
    412c:	86 e6       	ldi	r24, 0x66	; 102
    412e:	80 93 83 20 	sts	0x2083, r24
			CbCtrlData.TxdDataBuf[4] = 0x77;
    4132:	87 e7       	ldi	r24, 0x77	; 119
    4134:	80 93 84 20 	sts	0x2084, r24
			CbCtrlData.TxdDataBuf[5] = 0x88;
    4138:	88 e8       	ldi	r24, 0x88	; 136
    413a:	80 93 85 20 	sts	0x2085, r24
    413e:	35 c0       	rjmp	.+106    	; 0x41aa <CbStatrOneFrameTxd+0x26a>
		}


	}
	
	else if(CbCtrlData.FireState == FIRE_PREPARE)
    4140:	80 91 ab 20 	lds	r24, 0x20AB
    4144:	81 30       	cpi	r24, 0x01	; 1
    4146:	b9 f4       	brne	.+46     	; 0x4176 <CbStatrOneFrameTxd+0x236>
	{
		for(count=0;count<CB_TXD_LEN-1;count++)
    4148:	19 82       	std	Y+1, r1	; 0x01
    414a:	11 c0       	rjmp	.+34     	; 0x416e <CbStatrOneFrameTxd+0x22e>
			CbCtrlData.TxdDataBuf[count] = CB_PREPARE_DATA[count];
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	28 2f       	mov	r18, r24
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	88 2f       	mov	r24, r24
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	fc 01       	movw	r30, r24
    415a:	ea 5c       	subi	r30, 0xCA	; 202
    415c:	ff 4d       	sbci	r31, 0xDF	; 223
    415e:	80 81       	ld	r24, Z
    4160:	f9 01       	movw	r30, r18
    4162:	e0 58       	subi	r30, 0x80	; 128
    4164:	ff 4d       	sbci	r31, 0xDF	; 223
    4166:	80 83       	st	Z, r24

	}
	
	else if(CbCtrlData.FireState == FIRE_PREPARE)
	{
		for(count=0;count<CB_TXD_LEN-1;count++)
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	8f 5f       	subi	r24, 0xFF	; 255
    416c:	89 83       	std	Y+1, r24	; 0x01
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	8c 30       	cpi	r24, 0x0C	; 12
    4172:	60 f3       	brcs	.-40     	; 0x414c <CbStatrOneFrameTxd+0x20c>
    4174:	1a c0       	rjmp	.+52     	; 0x41aa <CbStatrOneFrameTxd+0x26a>
			CbCtrlData.TxdDataBuf[count] = CB_PREPARE_DATA[count];
	}
	else if(CbCtrlData.FireState == FIRE_START)
    4176:	80 91 ab 20 	lds	r24, 0x20AB
    417a:	82 30       	cpi	r24, 0x02	; 2
    417c:	b1 f4       	brne	.+44     	; 0x41aa <CbStatrOneFrameTxd+0x26a>
	{
		for(count=0;count<CB_TXD_LEN-1;count++)
    417e:	19 82       	std	Y+1, r1	; 0x01
    4180:	11 c0       	rjmp	.+34     	; 0x41a4 <CbStatrOneFrameTxd+0x264>
			CbCtrlData.TxdDataBuf[count] = CB_FIRE_DATA[count];
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	28 2f       	mov	r18, r24
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	88 2f       	mov	r24, r24
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	fc 01       	movw	r30, r24
    4190:	e7 5d       	subi	r30, 0xD7	; 215
    4192:	ff 4d       	sbci	r31, 0xDF	; 223
    4194:	80 81       	ld	r24, Z
    4196:	f9 01       	movw	r30, r18
    4198:	e0 58       	subi	r30, 0x80	; 128
    419a:	ff 4d       	sbci	r31, 0xDF	; 223
    419c:	80 83       	st	Z, r24
		for(count=0;count<CB_TXD_LEN-1;count++)
			CbCtrlData.TxdDataBuf[count] = CB_PREPARE_DATA[count];
	}
	else if(CbCtrlData.FireState == FIRE_START)
	{
		for(count=0;count<CB_TXD_LEN-1;count++)
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	8f 5f       	subi	r24, 0xFF	; 255
    41a2:	89 83       	std	Y+1, r24	; 0x01
    41a4:	89 81       	ldd	r24, Y+1	; 0x01
    41a6:	8c 30       	cpi	r24, 0x0C	; 12
    41a8:	60 f3       	brcs	.-40     	; 0x4182 <CbStatrOneFrameTxd+0x242>
			CbCtrlData.TxdDataBuf[count] = CB_FIRE_DATA[count];
	}


	/******************  Çó¼ìÑéºÍ   ******************/
	CbCtrlData.TxdDataBuf[CB_TXD_LEN-1] = 0x00;
    41aa:	10 92 8c 20 	sts	0x208C, r1
	for(count=0;count<CB_TXD_LEN-1;count++)
    41ae:	19 82       	std	Y+1, r1	; 0x01
    41b0:	0f c0       	rjmp	.+30     	; 0x41d0 <CbStatrOneFrameTxd+0x290>
		CbCtrlData.TxdDataBuf[CB_TXD_LEN-1] += CbCtrlData.TxdDataBuf[count];
    41b2:	20 91 8c 20 	lds	r18, 0x208C
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	88 2f       	mov	r24, r24
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	fc 01       	movw	r30, r24
    41be:	e0 58       	subi	r30, 0x80	; 128
    41c0:	ff 4d       	sbci	r31, 0xDF	; 223
    41c2:	80 81       	ld	r24, Z
    41c4:	82 0f       	add	r24, r18
    41c6:	80 93 8c 20 	sts	0x208C, r24
	}


	/******************  Çó¼ìÑéºÍ   ******************/
	CbCtrlData.TxdDataBuf[CB_TXD_LEN-1] = 0x00;
	for(count=0;count<CB_TXD_LEN-1;count++)
    41ca:	89 81       	ldd	r24, Y+1	; 0x01
    41cc:	8f 5f       	subi	r24, 0xFF	; 255
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	8c 30       	cpi	r24, 0x0C	; 12
    41d4:	70 f3       	brcs	.-36     	; 0x41b2 <CbStatrOneFrameTxd+0x272>
		CbCtrlData.TxdDataBuf[CB_TXD_LEN-1] += CbCtrlData.TxdDataBuf[count];
}
    41d6:	0f 90       	pop	r0
    41d8:	cf 91       	pop	r28
    41da:	df 91       	pop	r29
    41dc:	08 95       	ret

000041de <CbSendDataToLcd>:
}

#define SUM_TICK	10

void CbSendDataToLcd(void)
{
    41de:	df 93       	push	r29
    41e0:	cf 93       	push	r28
    41e2:	cd b7       	in	r28, 0x3d	; 61
    41e4:	de b7       	in	r29, 0x3e	; 62
	static uint32_t SysPower=0,SysPowerSum=0;

	static uint8_t TimeTick = SUM_TICK;

	if(TimeTick>SUM_TICK)
    41e6:	80 91 43 20 	lds	r24, 0x2043
    41ea:	8b 30       	cpi	r24, 0x0B	; 11
    41ec:	88 f1       	brcs	.+98     	; 0x4250 <CbSendDataToLcd+0x72>
	{
		SysPower = SysPowerSum/(SUM_TICK+1);
    41ee:	80 91 73 20 	lds	r24, 0x2073
    41f2:	90 91 74 20 	lds	r25, 0x2074
    41f6:	a0 91 75 20 	lds	r26, 0x2075
    41fa:	b0 91 76 20 	lds	r27, 0x2076
    41fe:	2b e0       	ldi	r18, 0x0B	; 11
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	40 e0       	ldi	r20, 0x00	; 0
    4204:	50 e0       	ldi	r21, 0x00	; 0
    4206:	bc 01       	movw	r22, r24
    4208:	cd 01       	movw	r24, r26
    420a:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    420e:	da 01       	movw	r26, r20
    4210:	c9 01       	movw	r24, r18
    4212:	80 93 77 20 	sts	0x2077, r24
    4216:	90 93 78 20 	sts	0x2078, r25
    421a:	a0 93 79 20 	sts	0x2079, r26
    421e:	b0 93 7a 20 	sts	0x207A, r27
		SysPowerSum = 0;
    4222:	10 92 73 20 	sts	0x2073, r1
    4226:	10 92 74 20 	sts	0x2074, r1
    422a:	10 92 75 20 	sts	0x2075, r1
    422e:	10 92 76 20 	sts	0x2076, r1
		TimeTick = 0;
    4232:	10 92 43 20 	sts	0x2043, r1

		CbCtrlData.CtrlBoxPowerVal = CbCtrlAdValToPowerVal(SysPower);
    4236:	80 91 77 20 	lds	r24, 0x2077
    423a:	90 91 78 20 	lds	r25, 0x2078
    423e:	a0 91 79 20 	lds	r26, 0x2079
    4242:	b0 91 7a 20 	lds	r27, 0x207A
    4246:	0e 94 57 21 	call	0x42ae	; 0x42ae <CbCtrlAdValToPowerVal>
    424a:	80 93 b8 20 	sts	0x20B8, r24
    424e:	22 c0       	rjmp	.+68     	; 0x4294 <CbSendDataToLcd+0xb6>

	}
	else
	{
		TimeTick++;
    4250:	80 91 43 20 	lds	r24, 0x2043
    4254:	8f 5f       	subi	r24, 0xFF	; 255
    4256:	80 93 43 20 	sts	0x2043, r24
		SysPowerSum += adc_a_control.ad3;
    425a:	80 91 11 20 	lds	r24, 0x2011
    425e:	90 91 12 20 	lds	r25, 0x2012
    4262:	9c 01       	movw	r18, r24
    4264:	44 27       	eor	r20, r20
    4266:	37 fd       	sbrc	r19, 7
    4268:	40 95       	com	r20
    426a:	54 2f       	mov	r21, r20
    426c:	80 91 73 20 	lds	r24, 0x2073
    4270:	90 91 74 20 	lds	r25, 0x2074
    4274:	a0 91 75 20 	lds	r26, 0x2075
    4278:	b0 91 76 20 	lds	r27, 0x2076
    427c:	82 0f       	add	r24, r18
    427e:	93 1f       	adc	r25, r19
    4280:	a4 1f       	adc	r26, r20
    4282:	b5 1f       	adc	r27, r21
    4284:	80 93 73 20 	sts	0x2073, r24
    4288:	90 93 74 20 	sts	0x2074, r25
    428c:	a0 93 75 20 	sts	0x2075, r26
    4290:	b0 93 76 20 	sts	0x2076, r27

	}



	CbDisCtrl.pSendDisCtrl(&USART_data_C1,&CbCtrlData);
    4294:	e0 91 51 20 	lds	r30, 0x2051
    4298:	f0 91 52 20 	lds	r31, 0x2052
    429c:	85 e2       	ldi	r24, 0x25	; 37
    429e:	91 e2       	ldi	r25, 0x21	; 33
    42a0:	20 e8       	ldi	r18, 0x80	; 128
    42a2:	30 e2       	ldi	r19, 0x20	; 32
    42a4:	b9 01       	movw	r22, r18
    42a6:	09 95       	icall

//	ADC3	Voltage			ÏµÍ³¹¤×÷µçÑ¹



}
    42a8:	cf 91       	pop	r28
    42aa:	df 91       	pop	r29
    42ac:	08 95       	ret

000042ae <CbCtrlAdValToPowerVal>:




inline static uint16_t CbCtrlAdValToPowerVal(uint16_t AdVal)
{
    42ae:	df 93       	push	r29
    42b0:	cf 93       	push	r28
    42b2:	00 d0       	rcall	.+0      	; 0x42b4 <CbCtrlAdValToPowerVal+0x6>
    42b4:	00 d0       	rcall	.+0      	; 0x42b6 <CbCtrlAdValToPowerVal+0x8>
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	8b 83       	std	Y+3, r24	; 0x03
    42bc:	9c 83       	std	Y+4, r25	; 0x04
	uint16_t PowerVal;
	if(AdVal<POWER_AD_K1)
    42be:	8b 81       	ldd	r24, Y+3	; 0x03
    42c0:	9c 81       	ldd	r25, Y+4	; 0x04
    42c2:	25 e0       	ldi	r18, 0x05	; 5
    42c4:	83 3e       	cpi	r24, 0xE3	; 227
    42c6:	92 07       	cpc	r25, r18
    42c8:	18 f4       	brcc	.+6      	; 0x42d0 <CbCtrlAdValToPowerVal+0x22>
	{
		PowerVal= 0;
    42ca:	19 82       	std	Y+1, r1	; 0x01
    42cc:	1a 82       	std	Y+2, r1	; 0x02
    42ce:	5c c0       	rjmp	.+184    	; 0x4388 <CbCtrlAdValToPowerVal+0xda>
	}
	else if(AdVal<POWER_AD_K2)
    42d0:	8b 81       	ldd	r24, Y+3	; 0x03
    42d2:	9c 81       	ldd	r25, Y+4	; 0x04
    42d4:	27 e0       	ldi	r18, 0x07	; 7
    42d6:	80 35       	cpi	r24, 0x50	; 80
    42d8:	92 07       	cpc	r25, r18
    42da:	d8 f4       	brcc	.+54     	; 0x4312 <CbCtrlAdValToPowerVal+0x64>
	{
		PowerVal= (AdVal-POWER_AD_K1)*POWER_Val_K21/POWER_AD_K21+POWER_Val_K1;
    42dc:	8b 81       	ldd	r24, Y+3	; 0x03
    42de:	9c 81       	ldd	r25, Y+4	; 0x04
    42e0:	9c 01       	movw	r18, r24
    42e2:	22 0f       	add	r18, r18
    42e4:	33 1f       	adc	r19, r19
    42e6:	22 0f       	add	r18, r18
    42e8:	33 1f       	adc	r19, r19
    42ea:	c9 01       	movw	r24, r18
    42ec:	88 0f       	add	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	88 0f       	add	r24, r24
    42f2:	99 1f       	adc	r25, r25
    42f4:	82 0f       	add	r24, r18
    42f6:	93 1f       	adc	r25, r19
    42f8:	8c 5b       	subi	r24, 0xBC	; 188
    42fa:	95 47       	sbci	r25, 0x75	; 117
    42fc:	2d e6       	ldi	r18, 0x6D	; 109
    42fe:	31 e0       	ldi	r19, 0x01	; 1
    4300:	b9 01       	movw	r22, r18
    4302:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__udivmodhi4>
    4306:	cb 01       	movw	r24, r22
    4308:	80 5b       	subi	r24, 0xB0	; 176
    430a:	9f 4f       	sbci	r25, 0xFF	; 255
    430c:	89 83       	std	Y+1, r24	; 0x01
    430e:	9a 83       	std	Y+2, r25	; 0x02
    4310:	3b c0       	rjmp	.+118    	; 0x4388 <CbCtrlAdValToPowerVal+0xda>
	}
	else if(AdVal<POWER_AD_K3)
    4312:	8b 81       	ldd	r24, Y+3	; 0x03
    4314:	9c 81       	ldd	r25, Y+4	; 0x04
    4316:	28 e0       	ldi	r18, 0x08	; 8
    4318:	85 3c       	cpi	r24, 0xC5	; 197
    431a:	92 07       	cpc	r25, r18
    431c:	d8 f4       	brcc	.+54     	; 0x4354 <CbCtrlAdValToPowerVal+0xa6>
	{
		PowerVal= (AdVal-POWER_AD_K2)*POWER_Val_K32/POWER_AD_K32+POWER_Val_K2;
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	9c 81       	ldd	r25, Y+4	; 0x04
    4322:	9c 01       	movw	r18, r24
    4324:	22 0f       	add	r18, r18
    4326:	33 1f       	adc	r19, r19
    4328:	22 0f       	add	r18, r18
    432a:	33 1f       	adc	r19, r19
    432c:	c9 01       	movw	r24, r18
    432e:	88 0f       	add	r24, r24
    4330:	99 1f       	adc	r25, r25
    4332:	88 0f       	add	r24, r24
    4334:	99 1f       	adc	r25, r25
    4336:	82 0f       	add	r24, r18
    4338:	93 1f       	adc	r25, r19
    433a:	80 54       	subi	r24, 0x40	; 64
    433c:	92 49       	sbci	r25, 0x92	; 146
    433e:	25 e7       	ldi	r18, 0x75	; 117
    4340:	31 e0       	ldi	r19, 0x01	; 1
    4342:	b9 01       	movw	r22, r18
    4344:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__udivmodhi4>
    4348:	cb 01       	movw	r24, r22
    434a:	8c 59       	subi	r24, 0x9C	; 156
    434c:	9f 4f       	sbci	r25, 0xFF	; 255
    434e:	89 83       	std	Y+1, r24	; 0x01
    4350:	9a 83       	std	Y+2, r25	; 0x02
    4352:	1a c0       	rjmp	.+52     	; 0x4388 <CbCtrlAdValToPowerVal+0xda>
	}
	else
	{
		PowerVal= (AdVal-POWER_AD_K3)*POWER_Val_K43/POWER_AD_K43+POWER_Val_K3;
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	9c 81       	ldd	r25, Y+4	; 0x04
    4358:	9c 01       	movw	r18, r24
    435a:	22 0f       	add	r18, r18
    435c:	33 1f       	adc	r19, r19
    435e:	22 0f       	add	r18, r18
    4360:	33 1f       	adc	r19, r19
    4362:	c9 01       	movw	r24, r18
    4364:	88 0f       	add	r24, r24
    4366:	99 1f       	adc	r25, r25
    4368:	88 0f       	add	r24, r24
    436a:	99 1f       	adc	r25, r25
    436c:	82 0f       	add	r24, r18
    436e:	93 1f       	adc	r25, r19
    4370:	84 56       	subi	r24, 0x64	; 100
    4372:	9f 4a       	sbci	r25, 0xAF	; 175
    4374:	2d e6       	ldi	r18, 0x6D	; 109
    4376:	31 e0       	ldi	r19, 0x01	; 1
    4378:	b9 01       	movw	r22, r18
    437a:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <__udivmodhi4>
    437e:	cb 01       	movw	r24, r22
    4380:	88 58       	subi	r24, 0x88	; 136
    4382:	9f 4f       	sbci	r25, 0xFF	; 255
    4384:	89 83       	std	Y+1, r24	; 0x01
    4386:	9a 83       	std	Y+2, r25	; 0x02
	}
	return PowerVal;
    4388:	89 81       	ldd	r24, Y+1	; 0x01
    438a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    438c:	24 96       	adiw	r28, 0x04	; 4
    438e:	cd bf       	out	0x3d, r28	; 61
    4390:	de bf       	out	0x3e, r29	; 62
    4392:	cf 91       	pop	r28
    4394:	df 91       	pop	r29
    4396:	08 95       	ret

00004398 <AdjustAdc>:

#define ADC_M	18500
#define ADC_C	10000

void AdjustAdc(void)
{
    4398:	df 93       	push	r29
    439a:	cf 93       	push	r28
    439c:	00 d0       	rcall	.+0      	; 0x439e <AdjustAdc+0x6>
    439e:	00 d0       	rcall	.+0      	; 0x43a0 <AdjustAdc+0x8>
    43a0:	cd b7       	in	r28, 0x3d	; 61
    43a2:	de b7       	in	r29, 0x3e	; 62
	uint32_t TempLong;

	TempLong = adc_a_control.ad0;
    43a4:	80 91 0b 20 	lds	r24, 0x200B
    43a8:	90 91 0c 20 	lds	r25, 0x200C
    43ac:	aa 27       	eor	r26, r26
    43ae:	97 fd       	sbrc	r25, 7
    43b0:	a0 95       	com	r26
    43b2:	ba 2f       	mov	r27, r26
    43b4:	89 83       	std	Y+1, r24	; 0x01
    43b6:	9a 83       	std	Y+2, r25	; 0x02
    43b8:	ab 83       	std	Y+3, r26	; 0x03
    43ba:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	9a 81       	ldd	r25, Y+2	; 0x02
    43c0:	ab 81       	ldd	r26, Y+3	; 0x03
    43c2:	bc 81       	ldd	r27, Y+4	; 0x04
    43c4:	24 e4       	ldi	r18, 0x44	; 68
    43c6:	38 e4       	ldi	r19, 0x48	; 72
    43c8:	40 e0       	ldi	r20, 0x00	; 0
    43ca:	50 e0       	ldi	r21, 0x00	; 0
    43cc:	bc 01       	movw	r22, r24
    43ce:	cd 01       	movw	r24, r26
    43d0:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	20 e1       	ldi	r18, 0x10	; 16
    43da:	37 e2       	ldi	r19, 0x27	; 39
    43dc:	40 e0       	ldi	r20, 0x00	; 0
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    43e8:	da 01       	movw	r26, r20
    43ea:	c9 01       	movw	r24, r18
    43ec:	89 83       	std	Y+1, r24	; 0x01
    43ee:	9a 83       	std	Y+2, r25	; 0x02
    43f0:	ab 83       	std	Y+3, r26	; 0x03
    43f2:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad0 = TempLong;
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
    43f6:	9a 81       	ldd	r25, Y+2	; 0x02
    43f8:	80 93 0b 20 	sts	0x200B, r24
    43fc:	90 93 0c 20 	sts	0x200C, r25

	TempLong = adc_a_control.ad1;
    4400:	80 91 0d 20 	lds	r24, 0x200D
    4404:	90 91 0e 20 	lds	r25, 0x200E
    4408:	aa 27       	eor	r26, r26
    440a:	97 fd       	sbrc	r25, 7
    440c:	a0 95       	com	r26
    440e:	ba 2f       	mov	r27, r26
    4410:	89 83       	std	Y+1, r24	; 0x01
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	ab 83       	std	Y+3, r26	; 0x03
    4416:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	9a 81       	ldd	r25, Y+2	; 0x02
    441c:	ab 81       	ldd	r26, Y+3	; 0x03
    441e:	bc 81       	ldd	r27, Y+4	; 0x04
    4420:	24 e4       	ldi	r18, 0x44	; 68
    4422:	38 e4       	ldi	r19, 0x48	; 72
    4424:	40 e0       	ldi	r20, 0x00	; 0
    4426:	50 e0       	ldi	r21, 0x00	; 0
    4428:	bc 01       	movw	r22, r24
    442a:	cd 01       	movw	r24, r26
    442c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	20 e1       	ldi	r18, 0x10	; 16
    4436:	37 e2       	ldi	r19, 0x27	; 39
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    4444:	da 01       	movw	r26, r20
    4446:	c9 01       	movw	r24, r18
    4448:	89 83       	std	Y+1, r24	; 0x01
    444a:	9a 83       	std	Y+2, r25	; 0x02
    444c:	ab 83       	std	Y+3, r26	; 0x03
    444e:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad1 = TempLong;
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	9a 81       	ldd	r25, Y+2	; 0x02
    4454:	80 93 0d 20 	sts	0x200D, r24
    4458:	90 93 0e 20 	sts	0x200E, r25

	TempLong = adc_a_control.ad2;
    445c:	80 91 0f 20 	lds	r24, 0x200F
    4460:	90 91 10 20 	lds	r25, 0x2010
    4464:	aa 27       	eor	r26, r26
    4466:	97 fd       	sbrc	r25, 7
    4468:	a0 95       	com	r26
    446a:	ba 2f       	mov	r27, r26
    446c:	89 83       	std	Y+1, r24	; 0x01
    446e:	9a 83       	std	Y+2, r25	; 0x02
    4470:	ab 83       	std	Y+3, r26	; 0x03
    4472:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	9a 81       	ldd	r25, Y+2	; 0x02
    4478:	ab 81       	ldd	r26, Y+3	; 0x03
    447a:	bc 81       	ldd	r27, Y+4	; 0x04
    447c:	24 e4       	ldi	r18, 0x44	; 68
    447e:	38 e4       	ldi	r19, 0x48	; 72
    4480:	40 e0       	ldi	r20, 0x00	; 0
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	bc 01       	movw	r22, r24
    4486:	cd 01       	movw	r24, r26
    4488:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	20 e1       	ldi	r18, 0x10	; 16
    4492:	37 e2       	ldi	r19, 0x27	; 39
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	bc 01       	movw	r22, r24
    449a:	cd 01       	movw	r24, r26
    449c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    44a0:	da 01       	movw	r26, r20
    44a2:	c9 01       	movw	r24, r18
    44a4:	89 83       	std	Y+1, r24	; 0x01
    44a6:	9a 83       	std	Y+2, r25	; 0x02
    44a8:	ab 83       	std	Y+3, r26	; 0x03
    44aa:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad2 = TempLong;
    44ac:	89 81       	ldd	r24, Y+1	; 0x01
    44ae:	9a 81       	ldd	r25, Y+2	; 0x02
    44b0:	80 93 0f 20 	sts	0x200F, r24
    44b4:	90 93 10 20 	sts	0x2010, r25

	TempLong = adc_a_control.ad3;
    44b8:	80 91 11 20 	lds	r24, 0x2011
    44bc:	90 91 12 20 	lds	r25, 0x2012
    44c0:	aa 27       	eor	r26, r26
    44c2:	97 fd       	sbrc	r25, 7
    44c4:	a0 95       	com	r26
    44c6:	ba 2f       	mov	r27, r26
    44c8:	89 83       	std	Y+1, r24	; 0x01
    44ca:	9a 83       	std	Y+2, r25	; 0x02
    44cc:	ab 83       	std	Y+3, r26	; 0x03
    44ce:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	9a 81       	ldd	r25, Y+2	; 0x02
    44d4:	ab 81       	ldd	r26, Y+3	; 0x03
    44d6:	bc 81       	ldd	r27, Y+4	; 0x04
    44d8:	24 e4       	ldi	r18, 0x44	; 68
    44da:	38 e4       	ldi	r19, 0x48	; 72
    44dc:	40 e0       	ldi	r20, 0x00	; 0
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	bc 01       	movw	r22, r24
    44e2:	cd 01       	movw	r24, r26
    44e4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	20 e1       	ldi	r18, 0x10	; 16
    44ee:	37 e2       	ldi	r19, 0x27	; 39
    44f0:	40 e0       	ldi	r20, 0x00	; 0
    44f2:	50 e0       	ldi	r21, 0x00	; 0
    44f4:	bc 01       	movw	r22, r24
    44f6:	cd 01       	movw	r24, r26
    44f8:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    44fc:	da 01       	movw	r26, r20
    44fe:	c9 01       	movw	r24, r18
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	9a 83       	std	Y+2, r25	; 0x02
    4504:	ab 83       	std	Y+3, r26	; 0x03
    4506:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad3 = TempLong;
    4508:	89 81       	ldd	r24, Y+1	; 0x01
    450a:	9a 81       	ldd	r25, Y+2	; 0x02
    450c:	80 93 11 20 	sts	0x2011, r24
    4510:	90 93 12 20 	sts	0x2012, r25

	TempLong = adc_a_control.ad4;
    4514:	80 91 13 20 	lds	r24, 0x2013
    4518:	90 91 14 20 	lds	r25, 0x2014
    451c:	aa 27       	eor	r26, r26
    451e:	97 fd       	sbrc	r25, 7
    4520:	a0 95       	com	r26
    4522:	ba 2f       	mov	r27, r26
    4524:	89 83       	std	Y+1, r24	; 0x01
    4526:	9a 83       	std	Y+2, r25	; 0x02
    4528:	ab 83       	std	Y+3, r26	; 0x03
    452a:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    452c:	89 81       	ldd	r24, Y+1	; 0x01
    452e:	9a 81       	ldd	r25, Y+2	; 0x02
    4530:	ab 81       	ldd	r26, Y+3	; 0x03
    4532:	bc 81       	ldd	r27, Y+4	; 0x04
    4534:	24 e4       	ldi	r18, 0x44	; 68
    4536:	38 e4       	ldi	r19, 0x48	; 72
    4538:	40 e0       	ldi	r20, 0x00	; 0
    453a:	50 e0       	ldi	r21, 0x00	; 0
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	20 e1       	ldi	r18, 0x10	; 16
    454a:	37 e2       	ldi	r19, 0x27	; 39
    454c:	40 e0       	ldi	r20, 0x00	; 0
    454e:	50 e0       	ldi	r21, 0x00	; 0
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    4558:	da 01       	movw	r26, r20
    455a:	c9 01       	movw	r24, r18
    455c:	89 83       	std	Y+1, r24	; 0x01
    455e:	9a 83       	std	Y+2, r25	; 0x02
    4560:	ab 83       	std	Y+3, r26	; 0x03
    4562:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad4 = TempLong;
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	9a 81       	ldd	r25, Y+2	; 0x02
    4568:	80 93 13 20 	sts	0x2013, r24
    456c:	90 93 14 20 	sts	0x2014, r25

	TempLong = adc_a_control.ad5;
    4570:	80 91 15 20 	lds	r24, 0x2015
    4574:	90 91 16 20 	lds	r25, 0x2016
    4578:	aa 27       	eor	r26, r26
    457a:	97 fd       	sbrc	r25, 7
    457c:	a0 95       	com	r26
    457e:	ba 2f       	mov	r27, r26
    4580:	89 83       	std	Y+1, r24	; 0x01
    4582:	9a 83       	std	Y+2, r25	; 0x02
    4584:	ab 83       	std	Y+3, r26	; 0x03
    4586:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    4588:	89 81       	ldd	r24, Y+1	; 0x01
    458a:	9a 81       	ldd	r25, Y+2	; 0x02
    458c:	ab 81       	ldd	r26, Y+3	; 0x03
    458e:	bc 81       	ldd	r27, Y+4	; 0x04
    4590:	24 e4       	ldi	r18, 0x44	; 68
    4592:	38 e4       	ldi	r19, 0x48	; 72
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	bc 01       	movw	r22, r24
    459a:	cd 01       	movw	r24, r26
    459c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	20 e1       	ldi	r18, 0x10	; 16
    45a6:	37 e2       	ldi	r19, 0x27	; 39
    45a8:	40 e0       	ldi	r20, 0x00	; 0
    45aa:	50 e0       	ldi	r21, 0x00	; 0
    45ac:	bc 01       	movw	r22, r24
    45ae:	cd 01       	movw	r24, r26
    45b0:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    45b4:	da 01       	movw	r26, r20
    45b6:	c9 01       	movw	r24, r18
    45b8:	89 83       	std	Y+1, r24	; 0x01
    45ba:	9a 83       	std	Y+2, r25	; 0x02
    45bc:	ab 83       	std	Y+3, r26	; 0x03
    45be:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad5 = TempLong;
    45c0:	89 81       	ldd	r24, Y+1	; 0x01
    45c2:	9a 81       	ldd	r25, Y+2	; 0x02
    45c4:	80 93 15 20 	sts	0x2015, r24
    45c8:	90 93 16 20 	sts	0x2016, r25

	TempLong = adc_a_control.ad6;
    45cc:	80 91 17 20 	lds	r24, 0x2017
    45d0:	90 91 18 20 	lds	r25, 0x2018
    45d4:	aa 27       	eor	r26, r26
    45d6:	97 fd       	sbrc	r25, 7
    45d8:	a0 95       	com	r26
    45da:	ba 2f       	mov	r27, r26
    45dc:	89 83       	std	Y+1, r24	; 0x01
    45de:	9a 83       	std	Y+2, r25	; 0x02
    45e0:	ab 83       	std	Y+3, r26	; 0x03
    45e2:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	9a 81       	ldd	r25, Y+2	; 0x02
    45e8:	ab 81       	ldd	r26, Y+3	; 0x03
    45ea:	bc 81       	ldd	r27, Y+4	; 0x04
    45ec:	24 e4       	ldi	r18, 0x44	; 68
    45ee:	38 e4       	ldi	r19, 0x48	; 72
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	20 e1       	ldi	r18, 0x10	; 16
    4602:	37 e2       	ldi	r19, 0x27	; 39
    4604:	40 e0       	ldi	r20, 0x00	; 0
    4606:	50 e0       	ldi	r21, 0x00	; 0
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    4610:	da 01       	movw	r26, r20
    4612:	c9 01       	movw	r24, r18
    4614:	89 83       	std	Y+1, r24	; 0x01
    4616:	9a 83       	std	Y+2, r25	; 0x02
    4618:	ab 83       	std	Y+3, r26	; 0x03
    461a:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad6 = TempLong;
    461c:	89 81       	ldd	r24, Y+1	; 0x01
    461e:	9a 81       	ldd	r25, Y+2	; 0x02
    4620:	80 93 17 20 	sts	0x2017, r24
    4624:	90 93 18 20 	sts	0x2018, r25

	TempLong = adc_a_control.ad7;
    4628:	80 91 19 20 	lds	r24, 0x2019
    462c:	90 91 1a 20 	lds	r25, 0x201A
    4630:	aa 27       	eor	r26, r26
    4632:	97 fd       	sbrc	r25, 7
    4634:	a0 95       	com	r26
    4636:	ba 2f       	mov	r27, r26
    4638:	89 83       	std	Y+1, r24	; 0x01
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	ab 83       	std	Y+3, r26	; 0x03
    463e:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	9a 81       	ldd	r25, Y+2	; 0x02
    4644:	ab 81       	ldd	r26, Y+3	; 0x03
    4646:	bc 81       	ldd	r27, Y+4	; 0x04
    4648:	24 e4       	ldi	r18, 0x44	; 68
    464a:	38 e4       	ldi	r19, 0x48	; 72
    464c:	40 e0       	ldi	r20, 0x00	; 0
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	bc 01       	movw	r22, r24
    4652:	cd 01       	movw	r24, r26
    4654:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    4658:	dc 01       	movw	r26, r24
    465a:	cb 01       	movw	r24, r22
    465c:	20 e1       	ldi	r18, 0x10	; 16
    465e:	37 e2       	ldi	r19, 0x27	; 39
    4660:	40 e0       	ldi	r20, 0x00	; 0
    4662:	50 e0       	ldi	r21, 0x00	; 0
    4664:	bc 01       	movw	r22, r24
    4666:	cd 01       	movw	r24, r26
    4668:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    466c:	da 01       	movw	r26, r20
    466e:	c9 01       	movw	r24, r18
    4670:	89 83       	std	Y+1, r24	; 0x01
    4672:	9a 83       	std	Y+2, r25	; 0x02
    4674:	ab 83       	std	Y+3, r26	; 0x03
    4676:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.ad7 = TempLong;
    4678:	89 81       	ldd	r24, Y+1	; 0x01
    467a:	9a 81       	ldd	r25, Y+2	; 0x02
    467c:	80 93 19 20 	sts	0x2019, r24
    4680:	90 93 1a 20 	sts	0x201A, r25


	TempLong = adc_a_control.adb0;
    4684:	80 91 1b 20 	lds	r24, 0x201B
    4688:	90 91 1c 20 	lds	r25, 0x201C
    468c:	aa 27       	eor	r26, r26
    468e:	97 fd       	sbrc	r25, 7
    4690:	a0 95       	com	r26
    4692:	ba 2f       	mov	r27, r26
    4694:	89 83       	std	Y+1, r24	; 0x01
    4696:	9a 83       	std	Y+2, r25	; 0x02
    4698:	ab 83       	std	Y+3, r26	; 0x03
    469a:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    469c:	89 81       	ldd	r24, Y+1	; 0x01
    469e:	9a 81       	ldd	r25, Y+2	; 0x02
    46a0:	ab 81       	ldd	r26, Y+3	; 0x03
    46a2:	bc 81       	ldd	r27, Y+4	; 0x04
    46a4:	24 e4       	ldi	r18, 0x44	; 68
    46a6:	38 e4       	ldi	r19, 0x48	; 72
    46a8:	40 e0       	ldi	r20, 0x00	; 0
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	bc 01       	movw	r22, r24
    46ae:	cd 01       	movw	r24, r26
    46b0:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	20 e1       	ldi	r18, 0x10	; 16
    46ba:	37 e2       	ldi	r19, 0x27	; 39
    46bc:	40 e0       	ldi	r20, 0x00	; 0
    46be:	50 e0       	ldi	r21, 0x00	; 0
    46c0:	bc 01       	movw	r22, r24
    46c2:	cd 01       	movw	r24, r26
    46c4:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    46c8:	da 01       	movw	r26, r20
    46ca:	c9 01       	movw	r24, r18
    46cc:	89 83       	std	Y+1, r24	; 0x01
    46ce:	9a 83       	std	Y+2, r25	; 0x02
    46d0:	ab 83       	std	Y+3, r26	; 0x03
    46d2:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.adb0 = TempLong;
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	9a 81       	ldd	r25, Y+2	; 0x02
    46d8:	80 93 1b 20 	sts	0x201B, r24
    46dc:	90 93 1c 20 	sts	0x201C, r25

	TempLong = adc_a_control.adb1;
    46e0:	80 91 1d 20 	lds	r24, 0x201D
    46e4:	90 91 1e 20 	lds	r25, 0x201E
    46e8:	aa 27       	eor	r26, r26
    46ea:	97 fd       	sbrc	r25, 7
    46ec:	a0 95       	com	r26
    46ee:	ba 2f       	mov	r27, r26
    46f0:	89 83       	std	Y+1, r24	; 0x01
    46f2:	9a 83       	std	Y+2, r25	; 0x02
    46f4:	ab 83       	std	Y+3, r26	; 0x03
    46f6:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	9a 81       	ldd	r25, Y+2	; 0x02
    46fc:	ab 81       	ldd	r26, Y+3	; 0x03
    46fe:	bc 81       	ldd	r27, Y+4	; 0x04
    4700:	24 e4       	ldi	r18, 0x44	; 68
    4702:	38 e4       	ldi	r19, 0x48	; 72
    4704:	40 e0       	ldi	r20, 0x00	; 0
    4706:	50 e0       	ldi	r21, 0x00	; 0
    4708:	bc 01       	movw	r22, r24
    470a:	cd 01       	movw	r24, r26
    470c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	20 e1       	ldi	r18, 0x10	; 16
    4716:	37 e2       	ldi	r19, 0x27	; 39
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	50 e0       	ldi	r21, 0x00	; 0
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    4724:	da 01       	movw	r26, r20
    4726:	c9 01       	movw	r24, r18
    4728:	89 83       	std	Y+1, r24	; 0x01
    472a:	9a 83       	std	Y+2, r25	; 0x02
    472c:	ab 83       	std	Y+3, r26	; 0x03
    472e:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.adb1 = TempLong;
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	80 93 1d 20 	sts	0x201D, r24
    4738:	90 93 1e 20 	sts	0x201E, r25

	TempLong = adc_a_control.adb2;
    473c:	80 91 1f 20 	lds	r24, 0x201F
    4740:	90 91 20 20 	lds	r25, 0x2020
    4744:	aa 27       	eor	r26, r26
    4746:	97 fd       	sbrc	r25, 7
    4748:	a0 95       	com	r26
    474a:	ba 2f       	mov	r27, r26
    474c:	89 83       	std	Y+1, r24	; 0x01
    474e:	9a 83       	std	Y+2, r25	; 0x02
    4750:	ab 83       	std	Y+3, r26	; 0x03
    4752:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	ab 81       	ldd	r26, Y+3	; 0x03
    475a:	bc 81       	ldd	r27, Y+4	; 0x04
    475c:	24 e4       	ldi	r18, 0x44	; 68
    475e:	38 e4       	ldi	r19, 0x48	; 72
    4760:	40 e0       	ldi	r20, 0x00	; 0
    4762:	50 e0       	ldi	r21, 0x00	; 0
    4764:	bc 01       	movw	r22, r24
    4766:	cd 01       	movw	r24, r26
    4768:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    476c:	dc 01       	movw	r26, r24
    476e:	cb 01       	movw	r24, r22
    4770:	20 e1       	ldi	r18, 0x10	; 16
    4772:	37 e2       	ldi	r19, 0x27	; 39
    4774:	40 e0       	ldi	r20, 0x00	; 0
    4776:	50 e0       	ldi	r21, 0x00	; 0
    4778:	bc 01       	movw	r22, r24
    477a:	cd 01       	movw	r24, r26
    477c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    4780:	da 01       	movw	r26, r20
    4782:	c9 01       	movw	r24, r18
    4784:	89 83       	std	Y+1, r24	; 0x01
    4786:	9a 83       	std	Y+2, r25	; 0x02
    4788:	ab 83       	std	Y+3, r26	; 0x03
    478a:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.adb2 = TempLong;
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	9a 81       	ldd	r25, Y+2	; 0x02
    4790:	80 93 1f 20 	sts	0x201F, r24
    4794:	90 93 20 20 	sts	0x2020, r25

	TempLong = adc_a_control.adb3;
    4798:	80 91 21 20 	lds	r24, 0x2021
    479c:	90 91 22 20 	lds	r25, 0x2022
    47a0:	aa 27       	eor	r26, r26
    47a2:	97 fd       	sbrc	r25, 7
    47a4:	a0 95       	com	r26
    47a6:	ba 2f       	mov	r27, r26
    47a8:	89 83       	std	Y+1, r24	; 0x01
    47aa:	9a 83       	std	Y+2, r25	; 0x02
    47ac:	ab 83       	std	Y+3, r26	; 0x03
    47ae:	bc 83       	std	Y+4, r27	; 0x04
	TempLong = (TempLong*ADC_M)/ADC_C;
    47b0:	89 81       	ldd	r24, Y+1	; 0x01
    47b2:	9a 81       	ldd	r25, Y+2	; 0x02
    47b4:	ab 81       	ldd	r26, Y+3	; 0x03
    47b6:	bc 81       	ldd	r27, Y+4	; 0x04
    47b8:	24 e4       	ldi	r18, 0x44	; 68
    47ba:	38 e4       	ldi	r19, 0x48	; 72
    47bc:	40 e0       	ldi	r20, 0x00	; 0
    47be:	50 e0       	ldi	r21, 0x00	; 0
    47c0:	bc 01       	movw	r22, r24
    47c2:	cd 01       	movw	r24, r26
    47c4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__mulsi3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	20 e1       	ldi	r18, 0x10	; 16
    47ce:	37 e2       	ldi	r19, 0x27	; 39
    47d0:	40 e0       	ldi	r20, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	bc 01       	movw	r22, r24
    47d6:	cd 01       	movw	r24, r26
    47d8:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <__udivmodsi4>
    47dc:	da 01       	movw	r26, r20
    47de:	c9 01       	movw	r24, r18
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	9a 83       	std	Y+2, r25	; 0x02
    47e4:	ab 83       	std	Y+3, r26	; 0x03
    47e6:	bc 83       	std	Y+4, r27	; 0x04
	adc_a_control.adb3 = TempLong;
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	80 93 21 20 	sts	0x2021, r24
    47f0:	90 93 22 20 	sts	0x2022, r25
}
    47f4:	24 96       	adiw	r28, 0x04	; 4
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	cf 91       	pop	r28
    47fc:	df 91       	pop	r29
    47fe:	08 95       	ret

00004800 <CbDealCtrl>:

/*******  ¹¤×÷ÔÚ5msµÄ¶¨Ê±Æ÷ÄÚ  *******/
#define TXD_ONE_BYTE_TIME	2
#define TXD_ONE_FRAME_TIME	25
static void CbDealCtrl(void)
{
    4800:	df 93       	push	r29
    4802:	cf 93       	push	r28
    4804:	00 d0       	rcall	.+0      	; 0x4806 <CbDealCtrl+0x6>
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
////			}
////
//			FrameTimeTick++;
////		}
//	}
	if(TimeTick <TXD_ONE_FRAME_TIME-1);
    480a:	80 91 7d 20 	lds	r24, 0x207D
    480e:	90 91 7e 20 	lds	r25, 0x207E
    4812:	88 31       	cpi	r24, 0x18	; 24
    4814:	91 05       	cpc	r25, r1
    4816:	08 f4       	brcc	.+2      	; 0x481a <CbDealCtrl+0x1a>
    4818:	6c c0       	rjmp	.+216    	; 0x48f2 <CbDealCtrl+0xf2>
	else if(TimeTick == TXD_ONE_FRAME_TIME-1)
    481a:	80 91 7d 20 	lds	r24, 0x207D
    481e:	90 91 7e 20 	lds	r25, 0x207E
    4822:	88 31       	cpi	r24, 0x18	; 24
    4824:	91 05       	cpc	r25, r1
    4826:	31 f4       	brne	.+12     	; 0x4834 <CbDealCtrl+0x34>
		adc_a_control.pStart();
    4828:	e0 91 27 20 	lds	r30, 0x2027
    482c:	f0 91 28 20 	lds	r31, 0x2028
    4830:	09 95       	icall
    4832:	5f c0       	rjmp	.+190    	; 0x48f2 <CbDealCtrl+0xf2>
	else if (TimeTick >= TXD_ONE_FRAME_TIME)
    4834:	80 91 7d 20 	lds	r24, 0x207D
    4838:	90 91 7e 20 	lds	r25, 0x207E
    483c:	89 31       	cpi	r24, 0x19	; 25
    483e:	91 05       	cpc	r25, r1
    4840:	08 f4       	brcc	.+2      	; 0x4844 <CbDealCtrl+0x44>
    4842:	57 c0       	rjmp	.+174    	; 0x48f2 <CbDealCtrl+0xf2>
	{
		AdjustAdc();
    4844:	0e 94 cc 21 	call	0x4398	; 0x4398 <AdjustAdc>

		CbIoToComSwCtrl();				//	OK
    4848:	0e 94 75 1f 	call	0x3eea	; 0x3eea <CbIoToComSwCtrl>

		CbIoToArmCtlrData();			//	OK
    484c:	0e 94 46 19 	call	0x328c	; 0x328c <CbIoToArmCtlrData>

		CbIoToMotionCtlrData();			//	OK
    4850:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <CbIoToMotionCtlrData>

		CbIoToCameraCtlrData();			//	OK
    4854:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <CbIoToCameraCtlrData>

		CbIoToLightCtlrData();			//	OK
    4858:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <CbIoToLightCtlrData>

		CbIoToFireCtlrData();			//	OK
    485c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <CbIoToFireCtlrData>

		CbStatrOneFrameTxd();
    4860:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <CbStatrOneFrameTxd>

		CbSendDataToLcd();
    4864:	0e 94 ef 20 	call	0x41de	; 0x41de <CbSendDataToLcd>

		FrameTimeTick = 0;
    4868:	10 92 7b 20 	sts	0x207B, r1
    486c:	10 92 7c 20 	sts	0x207C, r1
		TimeTick = 0;
    4870:	10 92 7d 20 	sts	0x207D, r1
    4874:	10 92 7e 20 	sts	0x207E, r1

		if(CbCtrlData.ComSwState == COM_WIRELESS_EN)
    4878:	80 91 aa 20 	lds	r24, 0x20AA
    487c:	81 30       	cpi	r24, 0x01	; 1
    487e:	d9 f4       	brne	.+54     	; 0x48b6 <CbDealCtrl+0xb6>
		{
			uint8_t Index=0x00;
    4880:	1a 82       	std	Y+2, r1	; 0x02
			for(Index=0;Index<CB_TXD_LEN;Index++)
    4882:	1a 82       	std	Y+2, r1	; 0x02
    4884:	14 c0       	rjmp	.+40     	; 0x48ae <CbDealCtrl+0xae>
				while (!USART_TXBuffer_PutByte(&USART_data_C0,CbCtrlData.TxdDataBuf[Index]));
    4886:	8a 81       	ldd	r24, Y+2	; 0x02
    4888:	88 2f       	mov	r24, r24
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	fc 01       	movw	r30, r24
    488e:	e0 58       	subi	r30, 0x80	; 128
    4890:	ff 4d       	sbci	r31, 0xDF	; 223
    4892:	20 81       	ld	r18, Z
    4894:	83 eb       	ldi	r24, 0xB3	; 179
    4896:	91 e2       	ldi	r25, 0x21	; 33
    4898:	62 2f       	mov	r22, r18
    489a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <USART_TXBuffer_PutByte>
    489e:	98 2f       	mov	r25, r24
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	89 27       	eor	r24, r25
    48a4:	88 23       	and	r24, r24
    48a6:	79 f7       	brne	.-34     	; 0x4886 <CbDealCtrl+0x86>
		TimeTick = 0;

		if(CbCtrlData.ComSwState == COM_WIRELESS_EN)
		{
			uint8_t Index=0x00;
			for(Index=0;Index<CB_TXD_LEN;Index++)
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	8f 5f       	subi	r24, 0xFF	; 255
    48ac:	8a 83       	std	Y+2, r24	; 0x02
    48ae:	8a 81       	ldd	r24, Y+2	; 0x02
    48b0:	8d 30       	cpi	r24, 0x0D	; 13
    48b2:	48 f3       	brcs	.-46     	; 0x4886 <CbDealCtrl+0x86>
    48b4:	1e c0       	rjmp	.+60     	; 0x48f2 <CbDealCtrl+0xf2>
				while (!USART_TXBuffer_PutByte(&USART_data_C0,CbCtrlData.TxdDataBuf[Index]));
		}
		else if(CbCtrlData.ComSwState == COM_WIRE_EN)
    48b6:	80 91 aa 20 	lds	r24, 0x20AA
    48ba:	82 30       	cpi	r24, 0x02	; 2
    48bc:	d1 f4       	brne	.+52     	; 0x48f2 <CbDealCtrl+0xf2>
		{
			uint8_t Index=0x00;
    48be:	19 82       	std	Y+1, r1	; 0x01
			for(Index=0;Index<CB_TXD_LEN;Index++)
    48c0:	19 82       	std	Y+1, r1	; 0x01
    48c2:	14 c0       	rjmp	.+40     	; 0x48ec <CbDealCtrl+0xec>
				while (!USART_TXBuffer_PutByte(&USART_data_D0,CbCtrlData.TxdDataBuf[Index]));
    48c4:	89 81       	ldd	r24, Y+1	; 0x01
    48c6:	88 2f       	mov	r24, r24
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	fc 01       	movw	r30, r24
    48cc:	e0 58       	subi	r30, 0x80	; 128
    48ce:	ff 4d       	sbci	r31, 0xDF	; 223
    48d0:	20 81       	ld	r18, Z
    48d2:	88 e8       	ldi	r24, 0x88	; 136
    48d4:	92 e2       	ldi	r25, 0x22	; 34
    48d6:	62 2f       	mov	r22, r18
    48d8:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <USART_TXBuffer_PutByte>
    48dc:	98 2f       	mov	r25, r24
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	89 27       	eor	r24, r25
    48e2:	88 23       	and	r24, r24
    48e4:	79 f7       	brne	.-34     	; 0x48c4 <CbDealCtrl+0xc4>
				while (!USART_TXBuffer_PutByte(&USART_data_C0,CbCtrlData.TxdDataBuf[Index]));
		}
		else if(CbCtrlData.ComSwState == COM_WIRE_EN)
		{
			uint8_t Index=0x00;
			for(Index=0;Index<CB_TXD_LEN;Index++)
    48e6:	89 81       	ldd	r24, Y+1	; 0x01
    48e8:	8f 5f       	subi	r24, 0xFF	; 255
    48ea:	89 83       	std	Y+1, r24	; 0x01
    48ec:	89 81       	ldd	r24, Y+1	; 0x01
    48ee:	8d 30       	cpi	r24, 0x0D	; 13
    48f0:	48 f3       	brcs	.-46     	; 0x48c4 <CbDealCtrl+0xc4>
		//PORTC.OUTTGL  = PIN1_bm| PIN4_bm;	//////////////////////////////////

		//USART_TXBuffer_PutByte(&USART_data_C0,adc_a_control.adb2 >> 4);
	}

	TimeTick++;
    48f2:	80 91 7d 20 	lds	r24, 0x207D
    48f6:	90 91 7e 20 	lds	r25, 0x207E
    48fa:	01 96       	adiw	r24, 0x01	; 1
    48fc:	80 93 7d 20 	sts	0x207D, r24
    4900:	90 93 7e 20 	sts	0x207E, r25

}
    4904:	0f 90       	pop	r0
    4906:	0f 90       	pop	r0
    4908:	cf 91       	pop	r28
    490a:	df 91       	pop	r29
    490c:	08 95       	ret

0000490e <CbCtrlDealRcData>:
** ÐÞ¶©ÈË:
** ÐÞ¶©ÈÕÆÚ:
**------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************/
static void CbCtrlDealRcData(USART_data_t* p_usart_data, CB_CTRL_DATA_STRUCT* p_Xbot_receive)
{
    490e:	df 93       	push	r29
    4910:	cf 93       	push	r28
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	26 97       	sbiw	r28, 0x06	; 6
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	8b 83       	std	Y+3, r24	; 0x03
    491e:	9c 83       	std	Y+4, r25	; 0x04
    4920:	6d 83       	std	Y+5, r22	; 0x05
    4922:	7e 83       	std	Y+6, r23	; 0x06
    4924:	79 c0       	rjmp	.+242    	; 0x4a18 <CbCtrlDealRcData+0x10a>

	static uint8_t DataIndex = 0;

	while (USART_RXBufferData_Available(p_usart_data))
	{
		TempData = USART_RXBuffer_GetByte(p_usart_data);
    4926:	8b 81       	ldd	r24, Y+3	; 0x03
    4928:	9c 81       	ldd	r25, Y+4	; 0x04
    492a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <USART_RXBuffer_GetByte>
    492e:	8a 83       	std	Y+2, r24	; 0x02

		if (DataIndex == 0X00)
    4930:	80 91 7f 20 	lds	r24, 0x207F
    4934:	88 23       	and	r24, r24
    4936:	c1 f4       	brne	.+48     	; 0x4968 <CbCtrlDealRcData+0x5a>
		{
			if(CBDIS_RXD_START != TempData)
    4938:	8a 81       	ldd	r24, Y+2	; 0x02
    493a:	85 3a       	cpi	r24, 0xA5	; 165
    493c:	19 f0       	breq	.+6      	; 0x4944 <CbCtrlDealRcData+0x36>
			{
				DataIndex = 0;
    493e:	10 92 7f 20 	sts	0x207F, r1
    4942:	6a c0       	rjmp	.+212    	; 0x4a18 <CbCtrlDealRcData+0x10a>
			}
			else
			{
				p_Xbot_receive->RxdDataBuf[DataIndex] = TempData;
    4944:	80 91 7f 20 	lds	r24, 0x207F
    4948:	28 2f       	mov	r18, r24
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	8d 81       	ldd	r24, Y+5	; 0x05
    494e:	9e 81       	ldd	r25, Y+6	; 0x06
    4950:	82 0f       	add	r24, r18
    4952:	93 1f       	adc	r25, r19
    4954:	fc 01       	movw	r30, r24
    4956:	3d 96       	adiw	r30, 0x0d	; 13
    4958:	8a 81       	ldd	r24, Y+2	; 0x02
    495a:	80 83       	st	Z, r24
				DataIndex++;
    495c:	80 91 7f 20 	lds	r24, 0x207F
    4960:	8f 5f       	subi	r24, 0xFF	; 255
    4962:	80 93 7f 20 	sts	0x207F, r24
    4966:	58 c0       	rjmp	.+176    	; 0x4a18 <CbCtrlDealRcData+0x10a>
			}
		}
		else if (DataIndex < CB_RXD_LEN-1)
    4968:	80 91 7f 20 	lds	r24, 0x207F
    496c:	8c 30       	cpi	r24, 0x0C	; 12
    496e:	90 f4       	brcc	.+36     	; 0x4994 <CbCtrlDealRcData+0x86>
		{
			p_Xbot_receive->RxdDataBuf[DataIndex] = TempData;
    4970:	80 91 7f 20 	lds	r24, 0x207F
    4974:	28 2f       	mov	r18, r24
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	8d 81       	ldd	r24, Y+5	; 0x05
    497a:	9e 81       	ldd	r25, Y+6	; 0x06
    497c:	82 0f       	add	r24, r18
    497e:	93 1f       	adc	r25, r19
    4980:	fc 01       	movw	r30, r24
    4982:	3d 96       	adiw	r30, 0x0d	; 13
    4984:	8a 81       	ldd	r24, Y+2	; 0x02
    4986:	80 83       	st	Z, r24
			DataIndex++;
    4988:	80 91 7f 20 	lds	r24, 0x207F
    498c:	8f 5f       	subi	r24, 0xFF	; 255
    498e:	80 93 7f 20 	sts	0x207F, r24
    4992:	42 c0       	rjmp	.+132    	; 0x4a18 <CbCtrlDealRcData+0x10a>
		}
		else if (DataIndex == CB_RXD_LEN-1)
    4994:	80 91 7f 20 	lds	r24, 0x207F
    4998:	8c 30       	cpi	r24, 0x0C	; 12
    499a:	e1 f5       	brne	.+120    	; 0x4a14 <CbCtrlDealRcData+0x106>
		{
			p_Xbot_receive->RxdDataBuf[DataIndex] = TempData;
    499c:	80 91 7f 20 	lds	r24, 0x207F
    49a0:	28 2f       	mov	r18, r24
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	8d 81       	ldd	r24, Y+5	; 0x05
    49a6:	9e 81       	ldd	r25, Y+6	; 0x06
    49a8:	82 0f       	add	r24, r18
    49aa:	93 1f       	adc	r25, r19
    49ac:	fc 01       	movw	r30, r24
    49ae:	3d 96       	adiw	r30, 0x0d	; 13
    49b0:	8a 81       	ldd	r24, Y+2	; 0x02
    49b2:	80 83       	st	Z, r24
			DataIndex++;
    49b4:	80 91 7f 20 	lds	r24, 0x207F
    49b8:	8f 5f       	subi	r24, 0xFF	; 255
    49ba:	80 93 7f 20 	sts	0x207F, r24

			/*******    ÇóÐ£ÑéºÍ       *******/
			p_Xbot_receive->RxdCheckSum = 0;
    49be:	ed 81       	ldd	r30, Y+5	; 0x05
    49c0:	fe 81       	ldd	r31, Y+6	; 0x06
    49c2:	13 8e       	std	Z+27, r1	; 0x1b

			for(TempCount=0;TempCount<CB_RXD_LEN-1;TempCount++)
    49c4:	19 82       	std	Y+1, r1	; 0x01
    49c6:	14 c0       	rjmp	.+40     	; 0x49f0 <CbCtrlDealRcData+0xe2>
			{
				p_Xbot_receive->RxdCheckSum += p_Xbot_receive->RxdDataBuf[TempCount];
    49c8:	ed 81       	ldd	r30, Y+5	; 0x05
    49ca:	fe 81       	ldd	r31, Y+6	; 0x06
    49cc:	43 8d       	ldd	r20, Z+27	; 0x1b
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	28 2f       	mov	r18, r24
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	8d 81       	ldd	r24, Y+5	; 0x05
    49d6:	9e 81       	ldd	r25, Y+6	; 0x06
    49d8:	82 0f       	add	r24, r18
    49da:	93 1f       	adc	r25, r19
    49dc:	fc 01       	movw	r30, r24
    49de:	3d 96       	adiw	r30, 0x0d	; 13
    49e0:	80 81       	ld	r24, Z
    49e2:	84 0f       	add	r24, r20
    49e4:	ed 81       	ldd	r30, Y+5	; 0x05
    49e6:	fe 81       	ldd	r31, Y+6	; 0x06
    49e8:	83 8f       	std	Z+27, r24	; 0x1b
			DataIndex++;

			/*******    ÇóÐ£ÑéºÍ       *******/
			p_Xbot_receive->RxdCheckSum = 0;

			for(TempCount=0;TempCount<CB_RXD_LEN-1;TempCount++)
    49ea:	89 81       	ldd	r24, Y+1	; 0x01
    49ec:	8f 5f       	subi	r24, 0xFF	; 255
    49ee:	89 83       	std	Y+1, r24	; 0x01
    49f0:	89 81       	ldd	r24, Y+1	; 0x01
    49f2:	8c 30       	cpi	r24, 0x0C	; 12
    49f4:	48 f3       	brcs	.-46     	; 0x49c8 <CbCtrlDealRcData+0xba>
			{
				p_Xbot_receive->RxdCheckSum += p_Xbot_receive->RxdDataBuf[TempCount];
			}

			/******* Èç¹ûÐ£ÑéºÍ¶Ô£¬½âÎöÖ¸Áî *******/
			if(p_Xbot_receive->RxdDataBuf[CB_RXD_LEN-1] == p_Xbot_receive->RxdCheckSum )
    49f6:	ed 81       	ldd	r30, Y+5	; 0x05
    49f8:	fe 81       	ldd	r31, Y+6	; 0x06
    49fa:	91 8d       	ldd	r25, Z+25	; 0x19
    49fc:	ed 81       	ldd	r30, Y+5	; 0x05
    49fe:	fe 81       	ldd	r31, Y+6	; 0x06
    4a00:	83 8d       	ldd	r24, Z+27	; 0x1b
    4a02:	98 17       	cp	r25, r24
    4a04:	21 f4       	brne	.+8      	; 0x4a0e <CbCtrlDealRcData+0x100>
			{

				/******* ³É¹¦½âÎöÐÂµÄÒ»Ö¡Êý¾Ý *******/
				CbCtrlRcSetState(p_Xbot_receive);
    4a06:	8d 81       	ldd	r24, Y+5	; 0x05
    4a08:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0a:	0e 94 19 25 	call	0x4a32	; 0x4a32 <CbCtrlRcSetState>

			}

			/******* ¸´Î»£¬ÖØÐÂ¿ªÊ¼ÐÂµÄÒ»Ö¡Ì½²â *******/
			DataIndex = 0;
    4a0e:	10 92 7f 20 	sts	0x207F, r1
    4a12:	02 c0       	rjmp	.+4      	; 0x4a18 <CbCtrlDealRcData+0x10a>
		}
		else
		{
			DataIndex = 0;
    4a14:	10 92 7f 20 	sts	0x207F, r1
{
	uint8_t TempData,TempCount;

	static uint8_t DataIndex = 0;

	while (USART_RXBufferData_Available(p_usart_data))
    4a18:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a1c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <USART_RXBufferData_Available>
    4a20:	88 23       	and	r24, r24
    4a22:	09 f0       	breq	.+2      	; 0x4a26 <CbCtrlDealRcData+0x118>
    4a24:	80 cf       	rjmp	.-256    	; 0x4926 <CbCtrlDealRcData+0x18>
		{
			DataIndex = 0;
		}
	}

}
    4a26:	26 96       	adiw	r28, 0x06	; 6
    4a28:	cd bf       	out	0x3d, r28	; 61
    4a2a:	de bf       	out	0x3e, r29	; 62
    4a2c:	cf 91       	pop	r28
    4a2e:	df 91       	pop	r29
    4a30:	08 95       	ret

00004a32 <CbCtrlRcSetState>:
	TimeTick++;

}

inline static void CbCtrlRcSetState(CB_CTRL_DATA_STRUCT* pDa)
{
    4a32:	df 93       	push	r29
    4a34:	cf 93       	push	r28
    4a36:	00 d0       	rcall	.+0      	; 0x4a38 <CbCtrlRcSetState+0x6>
    4a38:	0f 92       	push	r0
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
    4a3e:	8a 83       	std	Y+2, r24	; 0x02
    4a40:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t FeedIndex;

	if((pDa->RxdDataBuf[1]&0x80)!=0x80)
    4a42:	ea 81       	ldd	r30, Y+2	; 0x02
    4a44:	fb 81       	ldd	r31, Y+3	; 0x03
    4a46:	86 85       	ldd	r24, Z+14	; 0x0e
    4a48:	88 23       	and	r24, r24
    4a4a:	0c f0       	brlt	.+2      	; 0x4a4e <CbCtrlRcSetState+0x1c>
    4a4c:	53 c0       	rjmp	.+166    	; 0x4af4 <CbCtrlRcSetState+0xc2>
		return;

	FeedIndex = pDa->RxdDataBuf[1]&0x03;
    4a4e:	ea 81       	ldd	r30, Y+2	; 0x02
    4a50:	fb 81       	ldd	r31, Y+3	; 0x03
    4a52:	86 85       	ldd	r24, Z+14	; 0x0e
    4a54:	83 70       	andi	r24, 0x03	; 3
    4a56:	89 83       	std	Y+1, r24	; 0x01

	if(FeedIndex == 0x00)
    4a58:	89 81       	ldd	r24, Y+1	; 0x01
    4a5a:	88 23       	and	r24, r24
    4a5c:	99 f4       	brne	.+38     	; 0x4a84 <CbCtrlRcSetState+0x52>
	{
		pDa->Arm1Angle = pDa->RxdDataBuf[4];
    4a5e:	ea 81       	ldd	r30, Y+2	; 0x02
    4a60:	fb 81       	ldd	r31, Y+3	; 0x03
    4a62:	81 89       	ldd	r24, Z+17	; 0x11
    4a64:	ea 81       	ldd	r30, Y+2	; 0x02
    4a66:	fb 81       	ldd	r31, Y+3	; 0x03
    4a68:	85 a7       	std	Z+45, r24	; 0x2d
		pDa->Arm5Angle = pDa->RxdDataBuf[5];
    4a6a:	ea 81       	ldd	r30, Y+2	; 0x02
    4a6c:	fb 81       	ldd	r31, Y+3	; 0x03
    4a6e:	82 89       	ldd	r24, Z+18	; 0x12
    4a70:	ea 81       	ldd	r30, Y+2	; 0x02
    4a72:	fb 81       	ldd	r31, Y+3	; 0x03
    4a74:	81 ab       	std	Z+49, r24	; 0x31
		pDa->HandWidth = pDa->RxdDataBuf[6];
    4a76:	ea 81       	ldd	r30, Y+2	; 0x02
    4a78:	fb 81       	ldd	r31, Y+3	; 0x03
    4a7a:	83 89       	ldd	r24, Z+19	; 0x13
    4a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a80:	84 ab       	std	Z+52, r24	; 0x34
    4a82:	38 c0       	rjmp	.+112    	; 0x4af4 <CbCtrlRcSetState+0xc2>
	}
	else if(FeedIndex == 0x01)
    4a84:	89 81       	ldd	r24, Y+1	; 0x01
    4a86:	81 30       	cpi	r24, 0x01	; 1
    4a88:	99 f4       	brne	.+38     	; 0x4ab0 <CbCtrlRcSetState+0x7e>
	{
		pDa->Arm2Angle = pDa->RxdDataBuf[4];
    4a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    4a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    4a8e:	81 89       	ldd	r24, Z+17	; 0x11
    4a90:	ea 81       	ldd	r30, Y+2	; 0x02
    4a92:	fb 81       	ldd	r31, Y+3	; 0x03
    4a94:	86 a7       	std	Z+46, r24	; 0x2e
		pDa->Arm6Angle = pDa->RxdDataBuf[5];
    4a96:	ea 81       	ldd	r30, Y+2	; 0x02
    4a98:	fb 81       	ldd	r31, Y+3	; 0x03
    4a9a:	82 89       	ldd	r24, Z+18	; 0x12
    4a9c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a9e:	fb 81       	ldd	r31, Y+3	; 0x03
    4aa0:	82 ab       	std	Z+50, r24	; 0x32
		pDa->Arm0Angle = pDa->RxdDataBuf[6];
    4aa2:	ea 81       	ldd	r30, Y+2	; 0x02
    4aa4:	fb 81       	ldd	r31, Y+3	; 0x03
    4aa6:	83 89       	ldd	r24, Z+19	; 0x13
    4aa8:	ea 81       	ldd	r30, Y+2	; 0x02
    4aaa:	fb 81       	ldd	r31, Y+3	; 0x03
    4aac:	84 a7       	std	Z+44, r24	; 0x2c
    4aae:	22 c0       	rjmp	.+68     	; 0x4af4 <CbCtrlRcSetState+0xc2>
	}
	else if(FeedIndex == 0x02)
    4ab0:	89 81       	ldd	r24, Y+1	; 0x01
    4ab2:	82 30       	cpi	r24, 0x02	; 2
    4ab4:	69 f4       	brne	.+26     	; 0x4ad0 <CbCtrlRcSetState+0x9e>
	{
		pDa->Arm3Angle = pDa->RxdDataBuf[4];
    4ab6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ab8:	fb 81       	ldd	r31, Y+3	; 0x03
    4aba:	81 89       	ldd	r24, Z+17	; 0x11
    4abc:	ea 81       	ldd	r30, Y+2	; 0x02
    4abe:	fb 81       	ldd	r31, Y+3	; 0x03
    4ac0:	87 a7       	std	Z+47, r24	; 0x2f
		pDa->Arm7Angle = pDa->RxdDataBuf[5];
    4ac2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ac4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ac6:	82 89       	ldd	r24, Z+18	; 0x12
    4ac8:	ea 81       	ldd	r30, Y+2	; 0x02
    4aca:	fb 81       	ldd	r31, Y+3	; 0x03
    4acc:	83 ab       	std	Z+51, r24	; 0x33
    4ace:	12 c0       	rjmp	.+36     	; 0x4af4 <CbCtrlRcSetState+0xc2>
	}
	else
	{
		pDa->Arm4Angle 		= pDa->RxdDataBuf[4];
    4ad0:	ea 81       	ldd	r30, Y+2	; 0x02
    4ad2:	fb 81       	ldd	r31, Y+3	; 0x03
    4ad4:	81 89       	ldd	r24, Z+17	; 0x11
    4ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    4ada:	80 ab       	std	Z+48, r24	; 0x30
		pDa->CamPtAngle 	= pDa->RxdDataBuf[5];
    4adc:	ea 81       	ldd	r30, Y+2	; 0x02
    4ade:	fb 81       	ldd	r31, Y+3	; 0x03
    4ae0:	82 89       	ldd	r24, Z+18	; 0x12
    4ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ae6:	85 ab       	std	Z+53, r24	; 0x35
		pDa->RobotSelfPowerVal = pDa->RxdDataBuf[6];
    4ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    4aea:	fb 81       	ldd	r31, Y+3	; 0x03
    4aec:	83 89       	ldd	r24, Z+19	; 0x13
    4aee:	ea 81       	ldd	r30, Y+2	; 0x02
    4af0:	fb 81       	ldd	r31, Y+3	; 0x03
    4af2:	81 af       	std	Z+57, r24	; 0x39
	}

}
    4af4:	23 96       	adiw	r28, 0x03	; 3
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	de bf       	out	0x3e, r29	; 62
    4afa:	cf 91       	pop	r28
    4afc:	df 91       	pop	r29
    4afe:	08 95       	ret

00004b00 <XbotCbSendDisCtrl>:
	}
	return TempSpeed;

}
static void XbotCbSendDisCtrl(USART_data_t * usart_data,CB_CTRL_DATA_STRUCT* pDa)
{
    4b00:	df 93       	push	r29
    4b02:	cf 93       	push	r28
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	61 97       	sbiw	r28, 0x11	; 17
    4b0a:	cd bf       	out	0x3d, r28	; 61
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	8e 87       	std	Y+14, r24	; 0x0e
    4b10:	9f 87       	std	Y+15, r25	; 0x0f
    4b12:	68 8b       	std	Y+16, r22	; 0x10
    4b14:	79 8b       	std	Y+17, r23	; 0x11
	uint8_t SendData[CBDIS_TXD_LEN];
	static uint8_t SendIndex=0x00;
	static uint8_t Index=0x00;

	SendIndex++;
    4b16:	80 91 dc 20 	lds	r24, 0x20DC
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	80 93 dc 20 	sts	0x20DC, r24
	SendIndex = SendIndex&0x03;
    4b20:	80 91 dc 20 	lds	r24, 0x20DC
    4b24:	83 70       	andi	r24, 0x03	; 3
    4b26:	80 93 dc 20 	sts	0x20DC, r24

	SendData[0] = CBDIS_TXD_START;			//ÉèÖÃÖ¡Í·
    4b2a:	85 ea       	ldi	r24, 0xA5	; 165
    4b2c:	89 83       	std	Y+1, r24	; 0x01
	SendData[1] = SendIndex;				//ÉèÖÃÊý¾Ý·½Ïò¡¢ÃüÁî×Ö¡¢»Ø´«ÐòºÅ
    4b2e:	80 91 dc 20 	lds	r24, 0x20DC
    4b32:	8a 83       	std	Y+2, r24	; 0x02

	SendData[2] = CbDisGetSpeed(pDa->LeftMoveCtrl,pDa->LeftMoveSpeed);
    4b34:	e8 89       	ldd	r30, Y+16	; 0x10
    4b36:	f9 89       	ldd	r31, Y+17	; 0x11
    4b38:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b3a:	e8 89       	ldd	r30, Y+16	; 0x10
    4b3c:	f9 89       	ldd	r31, Y+17	; 0x11
    4b3e:	97 8d       	ldd	r25, Z+31	; 0x1f
    4b40:	69 2f       	mov	r22, r25
    4b42:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <CbDisGetSpeed>
    4b46:	8b 83       	std	Y+3, r24	; 0x03
	SendData[3] = CbDisGetSpeed(pDa->RightMoveCtrl,pDa->RightMoveSpeed);
    4b48:	e8 89       	ldd	r30, Y+16	; 0x10
    4b4a:	f9 89       	ldd	r31, Y+17	; 0x11
    4b4c:	86 8d       	ldd	r24, Z+30	; 0x1e
    4b4e:	e8 89       	ldd	r30, Y+16	; 0x10
    4b50:	f9 89       	ldd	r31, Y+17	; 0x11
    4b52:	90 a1       	ldd	r25, Z+32	; 0x20
    4b54:	69 2f       	mov	r22, r25
    4b56:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <CbDisGetSpeed>
    4b5a:	8c 83       	std	Y+4, r24	; 0x04

	if(SendIndex==0x00)
    4b5c:	80 91 dc 20 	lds	r24, 0x20DC
    4b60:	88 23       	and	r24, r24
    4b62:	79 f4       	brne	.+30     	; 0x4b82 <XbotCbSendDisCtrl+0x82>
	{
		SendData[4] =pDa->Arm1Angle;
    4b64:	e8 89       	ldd	r30, Y+16	; 0x10
    4b66:	f9 89       	ldd	r31, Y+17	; 0x11
    4b68:	85 a5       	ldd	r24, Z+45	; 0x2d
    4b6a:	8d 83       	std	Y+5, r24	; 0x05
		SendData[5] =pDa->Arm5Angle;
    4b6c:	e8 89       	ldd	r30, Y+16	; 0x10
    4b6e:	f9 89       	ldd	r31, Y+17	; 0x11
    4b70:	81 a9       	ldd	r24, Z+49	; 0x31
    4b72:	8e 83       	std	Y+6, r24	; 0x06
		SendData[6] =pDa->HandWidth;
    4b74:	e8 89       	ldd	r30, Y+16	; 0x10
    4b76:	f9 89       	ldd	r31, Y+17	; 0x11
    4b78:	84 a9       	ldd	r24, Z+52	; 0x34
    4b7a:	8f 83       	std	Y+7, r24	; 0x07
		SendData[7] = 100;//pDa->Arm0ModeTime;
    4b7c:	84 e6       	ldi	r24, 0x64	; 100
    4b7e:	88 87       	std	Y+8, r24	; 0x08
    4b80:	39 c0       	rjmp	.+114    	; 0x4bf4 <XbotCbSendDisCtrl+0xf4>
	}

	else if(SendIndex==0x01)
    4b82:	80 91 dc 20 	lds	r24, 0x20DC
    4b86:	81 30       	cpi	r24, 0x01	; 1
    4b88:	79 f4       	brne	.+30     	; 0x4ba8 <XbotCbSendDisCtrl+0xa8>
	{
		SendData[4] =pDa->Arm2Angle;
    4b8a:	e8 89       	ldd	r30, Y+16	; 0x10
    4b8c:	f9 89       	ldd	r31, Y+17	; 0x11
    4b8e:	86 a5       	ldd	r24, Z+46	; 0x2e
    4b90:	8d 83       	std	Y+5, r24	; 0x05
		SendData[5] =pDa->Arm6Angle;
    4b92:	e8 89       	ldd	r30, Y+16	; 0x10
    4b94:	f9 89       	ldd	r31, Y+17	; 0x11
    4b96:	82 a9       	ldd	r24, Z+50	; 0x32
    4b98:	8e 83       	std	Y+6, r24	; 0x06
		SendData[6] = pDa->Arm0Angle;;
    4b9a:	e8 89       	ldd	r30, Y+16	; 0x10
    4b9c:	f9 89       	ldd	r31, Y+17	; 0x11
    4b9e:	84 a5       	ldd	r24, Z+44	; 0x2c
    4ba0:	8f 83       	std	Y+7, r24	; 0x07
		SendData[7] =100;//pDa->Arm18ModeTime;
    4ba2:	84 e6       	ldi	r24, 0x64	; 100
    4ba4:	88 87       	std	Y+8, r24	; 0x08
    4ba6:	26 c0       	rjmp	.+76     	; 0x4bf4 <XbotCbSendDisCtrl+0xf4>
	}
	else if(SendIndex==0x02)
    4ba8:	80 91 dc 20 	lds	r24, 0x20DC
    4bac:	82 30       	cpi	r24, 0x02	; 2
    4bae:	81 f4       	brne	.+32     	; 0x4bd0 <XbotCbSendDisCtrl+0xd0>
	{
		SendData[4] =pDa->Arm3Angle;
    4bb0:	e8 89       	ldd	r30, Y+16	; 0x10
    4bb2:	f9 89       	ldd	r31, Y+17	; 0x11
    4bb4:	87 a5       	ldd	r24, Z+47	; 0x2f
    4bb6:	8d 83       	std	Y+5, r24	; 0x05
		SendData[5] =pDa->Arm7Angle;
    4bb8:	e8 89       	ldd	r30, Y+16	; 0x10
    4bba:	f9 89       	ldd	r31, Y+17	; 0x11
    4bbc:	83 a9       	ldd	r24, Z+51	; 0x33
    4bbe:	8e 83       	std	Y+6, r24	; 0x06
		SendData[6] =pDa->CtrlBoxPowerVal/2;
    4bc0:	e8 89       	ldd	r30, Y+16	; 0x10
    4bc2:	f9 89       	ldd	r31, Y+17	; 0x11
    4bc4:	80 ad       	ldd	r24, Z+56	; 0x38
    4bc6:	86 95       	lsr	r24
    4bc8:	8f 83       	std	Y+7, r24	; 0x07
		SendData[7] =CBDIS_NC_DATA;
    4bca:	8c ec       	ldi	r24, 0xCC	; 204
    4bcc:	88 87       	std	Y+8, r24	; 0x08
    4bce:	12 c0       	rjmp	.+36     	; 0x4bf4 <XbotCbSendDisCtrl+0xf4>
	}
	else if(SendIndex==0x03)
    4bd0:	80 91 dc 20 	lds	r24, 0x20DC
    4bd4:	83 30       	cpi	r24, 0x03	; 3
    4bd6:	71 f4       	brne	.+28     	; 0x4bf4 <XbotCbSendDisCtrl+0xf4>
	{
		SendData[4] =pDa->Arm4Angle;
    4bd8:	e8 89       	ldd	r30, Y+16	; 0x10
    4bda:	f9 89       	ldd	r31, Y+17	; 0x11
    4bdc:	80 a9       	ldd	r24, Z+48	; 0x30
    4bde:	8d 83       	std	Y+5, r24	; 0x05
		SendData[5] =pDa->CamPtAngle;
    4be0:	e8 89       	ldd	r30, Y+16	; 0x10
    4be2:	f9 89       	ldd	r31, Y+17	; 0x11
    4be4:	85 a9       	ldd	r24, Z+53	; 0x35
    4be6:	8e 83       	std	Y+6, r24	; 0x06
		SendData[6] =pDa->RobotSelfPowerVal;
    4be8:	e8 89       	ldd	r30, Y+16	; 0x10
    4bea:	f9 89       	ldd	r31, Y+17	; 0x11
    4bec:	81 ad       	ldd	r24, Z+57	; 0x39
    4bee:	8f 83       	std	Y+7, r24	; 0x07
		SendData[7] =CBDIS_NC_DATA;
    4bf0:	8c ec       	ldi	r24, 0xCC	; 204
    4bf2:	88 87       	std	Y+8, r24	; 0x08
	}

	SendData[8] = ((pDa->Arm0WorkMode&0x7)<<5)
    4bf4:	e8 89       	ldd	r30, Y+16	; 0x10
    4bf6:	f9 89       	ldd	r31, Y+17	; 0x11
    4bf8:	82 ad       	ldd	r24, Z+58	; 0x3a
    4bfa:	88 2f       	mov	r24, r24
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	88 0f       	add	r24, r24
    4c00:	99 1f       	adc	r25, r25
    4c02:	82 95       	swap	r24
    4c04:	92 95       	swap	r25
    4c06:	90 7f       	andi	r25, 0xF0	; 240
    4c08:	98 27       	eor	r25, r24
    4c0a:	80 7f       	andi	r24, 0xF0	; 240
    4c0c:	98 27       	eor	r25, r24
    4c0e:	28 2f       	mov	r18, r24
    4c10:	e8 89       	ldd	r30, Y+16	; 0x10
    4c12:	f9 89       	ldd	r31, Y+17	; 0x11
    4c14:	83 ad       	ldd	r24, Z+59	; 0x3b
    4c16:	88 2f       	mov	r24, r24
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	87 70       	andi	r24, 0x07	; 7
    4c1c:	90 70       	andi	r25, 0x00	; 0
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	88 0f       	add	r24, r24
    4c24:	99 1f       	adc	r25, r25
    4c26:	92 2f       	mov	r25, r18
    4c28:	98 2b       	or	r25, r24
    4c2a:	e8 89       	ldd	r30, Y+16	; 0x10
    4c2c:	f9 89       	ldd	r31, Y+17	; 0x11
    4c2e:	83 ad       	ldd	r24, Z+59	; 0x3b
    4c30:	83 70       	andi	r24, 0x03	; 3
    4c32:	89 2b       	or	r24, r25
    4c34:	89 87       	std	Y+9, r24	; 0x09
			|((pDa->Arm18WorkMode&0x7)<<2)|(pDa->Arm18WorkMode&0x03);

	SendData[9] = CBDIS_NC_DATA;
    4c36:	8c ec       	ldi	r24, 0xCC	; 204
    4c38:	8a 87       	std	Y+10, r24	; 0x0a
	SendData[10] = CBDIS_NC_DATA;
    4c3a:	8c ec       	ldi	r24, 0xCC	; 204
    4c3c:	8b 87       	std	Y+11, r24	; 0x0b
	SendData[11] = CBDIS_NC_DATA;
    4c3e:	8c ec       	ldi	r24, 0xCC	; 204
    4c40:	8c 87       	std	Y+12, r24	; 0x0c

	SendData[CBDIS_TXD_LEN-1] = 0x00;
    4c42:	1d 86       	std	Y+13, r1	; 0x0d
	for(Index=0;Index<CBDIS_TXD_LEN-1;Index++)
    4c44:	10 92 db 20 	sts	0x20DB, r1
    4c48:	12 c0       	rjmp	.+36     	; 0x4c6e <XbotCbSendDisCtrl+0x16e>
		SendData[CBDIS_TXD_LEN-1] += SendData[Index];
    4c4a:	4d 85       	ldd	r20, Y+13	; 0x0d
    4c4c:	80 91 db 20 	lds	r24, 0x20DB
    4c50:	28 2f       	mov	r18, r24
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    4c54:	ce 01       	movw	r24, r28
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	fc 01       	movw	r30, r24
    4c5a:	e2 0f       	add	r30, r18
    4c5c:	f3 1f       	adc	r31, r19
    4c5e:	80 81       	ld	r24, Z
    4c60:	84 0f       	add	r24, r20
    4c62:	8d 87       	std	Y+13, r24	; 0x0d
	SendData[9] = CBDIS_NC_DATA;
	SendData[10] = CBDIS_NC_DATA;
	SendData[11] = CBDIS_NC_DATA;

	SendData[CBDIS_TXD_LEN-1] = 0x00;
	for(Index=0;Index<CBDIS_TXD_LEN-1;Index++)
    4c64:	80 91 db 20 	lds	r24, 0x20DB
    4c68:	8f 5f       	subi	r24, 0xFF	; 255
    4c6a:	80 93 db 20 	sts	0x20DB, r24
    4c6e:	80 91 db 20 	lds	r24, 0x20DB
    4c72:	8c 30       	cpi	r24, 0x0C	; 12
    4c74:	50 f3       	brcs	.-44     	; 0x4c4a <XbotCbSendDisCtrl+0x14a>
		SendData[CBDIS_TXD_LEN-1] += SendData[Index];


	for(Index=0;Index<CBDIS_TXD_LEN;Index++)
    4c76:	10 92 db 20 	sts	0x20DB, r1
    4c7a:	19 c0       	rjmp	.+50     	; 0x4cae <XbotCbSendDisCtrl+0x1ae>
		while (!USART_TXBuffer_PutByte(usart_data,SendData[Index]));
    4c7c:	80 91 db 20 	lds	r24, 0x20DB
    4c80:	28 2f       	mov	r18, r24
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	ce 01       	movw	r24, r28
    4c86:	01 96       	adiw	r24, 0x01	; 1
    4c88:	fc 01       	movw	r30, r24
    4c8a:	e2 0f       	add	r30, r18
    4c8c:	f3 1f       	adc	r31, r19
    4c8e:	20 81       	ld	r18, Z
    4c90:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c92:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c94:	62 2f       	mov	r22, r18
    4c96:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <USART_TXBuffer_PutByte>
    4c9a:	98 2f       	mov	r25, r24
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	89 27       	eor	r24, r25
    4ca0:	88 23       	and	r24, r24
    4ca2:	61 f7       	brne	.-40     	; 0x4c7c <XbotCbSendDisCtrl+0x17c>
	SendData[CBDIS_TXD_LEN-1] = 0x00;
	for(Index=0;Index<CBDIS_TXD_LEN-1;Index++)
		SendData[CBDIS_TXD_LEN-1] += SendData[Index];


	for(Index=0;Index<CBDIS_TXD_LEN;Index++)
    4ca4:	80 91 db 20 	lds	r24, 0x20DB
    4ca8:	8f 5f       	subi	r24, 0xFF	; 255
    4caa:	80 93 db 20 	sts	0x20DB, r24
    4cae:	80 91 db 20 	lds	r24, 0x20DB
    4cb2:	8d 30       	cpi	r24, 0x0D	; 13
    4cb4:	18 f3       	brcs	.-58     	; 0x4c7c <XbotCbSendDisCtrl+0x17c>
		while (!USART_TXBuffer_PutByte(usart_data,SendData[Index]));
}
    4cb6:	61 96       	adiw	r28, 0x11	; 17
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	de bf       	out	0x3e, r29	; 62
    4cbc:	cf 91       	pop	r28
    4cbe:	df 91       	pop	r29
    4cc0:	08 95       	ret

00004cc2 <CbDisGetSpeed>:




inline static int8_t CbDisGetSpeed(uint8_t Dir,uint8_t Speed)
{
    4cc2:	df 93       	push	r29
    4cc4:	cf 93       	push	r28
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	28 97       	sbiw	r28, 0x08	; 8
    4ccc:	cd bf       	out	0x3d, r28	; 61
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	8b 83       	std	Y+3, r24	; 0x03
    4cd2:	6c 83       	std	Y+4, r22	; 0x04
	int16_t TempSpeed;
	/**************ÉèÖÃµç»úËÙ*******************/
	if(Dir==0x01)
    4cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd6:	81 30       	cpi	r24, 0x01	; 1
    4cd8:	c9 f4       	brne	.+50     	; 0x4d0c <CbDisGetSpeed+0x4a>
	{
		TempSpeed = Speed;
    4cda:	8c 81       	ldd	r24, Y+4	; 0x04
    4cdc:	88 2f       	mov	r24, r24
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	89 83       	std	Y+1, r24	; 0x01
    4ce2:	9a 83       	std	Y+2, r25	; 0x02
		TempSpeed /= 2;
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ce8:	8d 83       	std	Y+5, r24	; 0x05
    4cea:	9e 83       	std	Y+6, r25	; 0x06
    4cec:	8d 81       	ldd	r24, Y+5	; 0x05
    4cee:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf0:	99 23       	and	r25, r25
    4cf2:	2c f4       	brge	.+10     	; 0x4cfe <CbDisGetSpeed+0x3c>
    4cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf8:	01 96       	adiw	r24, 0x01	; 1
    4cfa:	8d 83       	std	Y+5, r24	; 0x05
    4cfc:	9e 83       	std	Y+6, r25	; 0x06
    4cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4d00:	9e 81       	ldd	r25, Y+6	; 0x06
    4d02:	95 95       	asr	r25
    4d04:	87 95       	ror	r24
    4d06:	89 83       	std	Y+1, r24	; 0x01
    4d08:	9a 83       	std	Y+2, r25	; 0x02
    4d0a:	21 c0       	rjmp	.+66     	; 0x4d4e <CbDisGetSpeed+0x8c>
	}
	else if(Dir==0x02)
    4d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0e:	82 30       	cpi	r24, 0x02	; 2
    4d10:	e1 f4       	brne	.+56     	; 0x4d4a <CbDisGetSpeed+0x88>
	{
		TempSpeed = 0-Speed;
    4d12:	8c 81       	ldd	r24, Y+4	; 0x04
    4d14:	88 2f       	mov	r24, r24
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	90 95       	com	r25
    4d1a:	81 95       	neg	r24
    4d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d1e:	89 83       	std	Y+1, r24	; 0x01
    4d20:	9a 83       	std	Y+2, r25	; 0x02
		TempSpeed /= 2;
    4d22:	89 81       	ldd	r24, Y+1	; 0x01
    4d24:	9a 81       	ldd	r25, Y+2	; 0x02
    4d26:	8f 83       	std	Y+7, r24	; 0x07
    4d28:	98 87       	std	Y+8, r25	; 0x08
    4d2a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d2c:	98 85       	ldd	r25, Y+8	; 0x08
    4d2e:	99 23       	and	r25, r25
    4d30:	2c f4       	brge	.+10     	; 0x4d3c <CbDisGetSpeed+0x7a>
    4d32:	8f 81       	ldd	r24, Y+7	; 0x07
    4d34:	98 85       	ldd	r25, Y+8	; 0x08
    4d36:	01 96       	adiw	r24, 0x01	; 1
    4d38:	8f 83       	std	Y+7, r24	; 0x07
    4d3a:	98 87       	std	Y+8, r25	; 0x08
    4d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d3e:	98 85       	ldd	r25, Y+8	; 0x08
    4d40:	95 95       	asr	r25
    4d42:	87 95       	ror	r24
    4d44:	89 83       	std	Y+1, r24	; 0x01
    4d46:	9a 83       	std	Y+2, r25	; 0x02
    4d48:	02 c0       	rjmp	.+4      	; 0x4d4e <CbDisGetSpeed+0x8c>
	}
	else
	{
		TempSpeed = 0;
    4d4a:	19 82       	std	Y+1, r1	; 0x01
    4d4c:	1a 82       	std	Y+2, r1	; 0x02
	}
	return TempSpeed;
    4d4e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4d50:	28 96       	adiw	r28, 0x08	; 8
    4d52:	cd bf       	out	0x3d, r28	; 61
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	cf 91       	pop	r28
    4d58:	df 91       	pop	r29
    4d5a:	08 95       	ret

00004d5c <XbotCbDealRxDisCtrl>:
		pCtrlData->TestMode = TEST_NC;

}

static void XbotCbDealRxDisCtrl(USART_data_t * p_usart_data,CBDIS_CTRL_DATA_STRUCT* pDa)
{
    4d5c:	df 93       	push	r29
    4d5e:	cf 93       	push	r28
    4d60:	cd b7       	in	r28, 0x3d	; 61
    4d62:	de b7       	in	r29, 0x3e	; 62
    4d64:	26 97       	sbiw	r28, 0x06	; 6
    4d66:	cd bf       	out	0x3d, r28	; 61
    4d68:	de bf       	out	0x3e, r29	; 62
    4d6a:	8b 83       	std	Y+3, r24	; 0x03
    4d6c:	9c 83       	std	Y+4, r25	; 0x04
    4d6e:	6d 83       	std	Y+5, r22	; 0x05
    4d70:	7e 83       	std	Y+6, r23	; 0x06
    4d72:	7d c0       	rjmp	.+250    	; 0x4e6e <XbotCbDealRxDisCtrl+0x112>

	static uint8_t DataIndex = 0;

	while (USART_RXBufferData_Available(p_usart_data))
	{
		TempData = USART_RXBuffer_GetByte(p_usart_data);
    4d74:	8b 81       	ldd	r24, Y+3	; 0x03
    4d76:	9c 81       	ldd	r25, Y+4	; 0x04
    4d78:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <USART_RXBuffer_GetByte>
    4d7c:	8a 83       	std	Y+2, r24	; 0x02

		if (DataIndex == 0X00)
    4d7e:	80 91 dd 20 	lds	r24, 0x20DD
    4d82:	88 23       	and	r24, r24
    4d84:	c1 f4       	brne	.+48     	; 0x4db6 <XbotCbDealRxDisCtrl+0x5a>
		{
			if(CBDIS_RXD_START != TempData)
    4d86:	8a 81       	ldd	r24, Y+2	; 0x02
    4d88:	85 3a       	cpi	r24, 0xA5	; 165
    4d8a:	19 f0       	breq	.+6      	; 0x4d92 <XbotCbDealRxDisCtrl+0x36>
			{
				DataIndex = 0;
    4d8c:	10 92 dd 20 	sts	0x20DD, r1
    4d90:	6e c0       	rjmp	.+220    	; 0x4e6e <XbotCbDealRxDisCtrl+0x112>
			}
			else
			{
				pDa->RxdDataBuf[DataIndex] = TempData;
    4d92:	80 91 dd 20 	lds	r24, 0x20DD
    4d96:	28 2f       	mov	r18, r24
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d9e:	82 0f       	add	r24, r18
    4da0:	93 1f       	adc	r25, r19
    4da2:	fc 01       	movw	r30, r24
    4da4:	3d 96       	adiw	r30, 0x0d	; 13
    4da6:	8a 81       	ldd	r24, Y+2	; 0x02
    4da8:	80 83       	st	Z, r24
				DataIndex++;
    4daa:	80 91 dd 20 	lds	r24, 0x20DD
    4dae:	8f 5f       	subi	r24, 0xFF	; 255
    4db0:	80 93 dd 20 	sts	0x20DD, r24
    4db4:	5c c0       	rjmp	.+184    	; 0x4e6e <XbotCbDealRxDisCtrl+0x112>
			}
		}
		else if (DataIndex < CBDIS_RXD_LEN-1)
    4db6:	80 91 dd 20 	lds	r24, 0x20DD
    4dba:	8c 30       	cpi	r24, 0x0C	; 12
    4dbc:	90 f4       	brcc	.+36     	; 0x4de2 <XbotCbDealRxDisCtrl+0x86>
		{
			pDa->RxdDataBuf[DataIndex] = TempData;
    4dbe:	80 91 dd 20 	lds	r24, 0x20DD
    4dc2:	28 2f       	mov	r18, r24
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dca:	82 0f       	add	r24, r18
    4dcc:	93 1f       	adc	r25, r19
    4dce:	fc 01       	movw	r30, r24
    4dd0:	3d 96       	adiw	r30, 0x0d	; 13
    4dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd4:	80 83       	st	Z, r24
			DataIndex++;
    4dd6:	80 91 dd 20 	lds	r24, 0x20DD
    4dda:	8f 5f       	subi	r24, 0xFF	; 255
    4ddc:	80 93 dd 20 	sts	0x20DD, r24
    4de0:	46 c0       	rjmp	.+140    	; 0x4e6e <XbotCbDealRxDisCtrl+0x112>
		}
		else if (DataIndex == CBDIS_RXD_LEN-1)
    4de2:	80 91 dd 20 	lds	r24, 0x20DD
    4de6:	8c 30       	cpi	r24, 0x0C	; 12
    4de8:	09 f0       	breq	.+2      	; 0x4dec <XbotCbDealRxDisCtrl+0x90>
    4dea:	3f c0       	rjmp	.+126    	; 0x4e6a <XbotCbDealRxDisCtrl+0x10e>
		{
			pDa->RxdDataBuf[DataIndex] = TempData;
    4dec:	80 91 dd 20 	lds	r24, 0x20DD
    4df0:	28 2f       	mov	r18, r24
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	8d 81       	ldd	r24, Y+5	; 0x05
    4df6:	9e 81       	ldd	r25, Y+6	; 0x06
    4df8:	82 0f       	add	r24, r18
    4dfa:	93 1f       	adc	r25, r19
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	3d 96       	adiw	r30, 0x0d	; 13
    4e00:	8a 81       	ldd	r24, Y+2	; 0x02
    4e02:	80 83       	st	Z, r24
			DataIndex++;
    4e04:	80 91 dd 20 	lds	r24, 0x20DD
    4e08:	8f 5f       	subi	r24, 0xFF	; 255
    4e0a:	80 93 dd 20 	sts	0x20DD, r24

			/*******    ÇóÐ£ÑéºÍ       *******/
			pDa->CheckSum = 0;
    4e0e:	ed 81       	ldd	r30, Y+5	; 0x05
    4e10:	fe 81       	ldd	r31, Y+6	; 0x06
    4e12:	14 8e       	std	Z+28, r1	; 0x1c

			for(TempCount=0;TempCount<CBDIS_RXD_LEN-1;TempCount++)
    4e14:	19 82       	std	Y+1, r1	; 0x01
    4e16:	14 c0       	rjmp	.+40     	; 0x4e40 <XbotCbDealRxDisCtrl+0xe4>
			{
				pDa->CheckSum += pDa->RxdDataBuf[TempCount];
    4e18:	ed 81       	ldd	r30, Y+5	; 0x05
    4e1a:	fe 81       	ldd	r31, Y+6	; 0x06
    4e1c:	44 8d       	ldd	r20, Z+28	; 0x1c
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	28 2f       	mov	r18, r24
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	8d 81       	ldd	r24, Y+5	; 0x05
    4e26:	9e 81       	ldd	r25, Y+6	; 0x06
    4e28:	82 0f       	add	r24, r18
    4e2a:	93 1f       	adc	r25, r19
    4e2c:	fc 01       	movw	r30, r24
    4e2e:	3d 96       	adiw	r30, 0x0d	; 13
    4e30:	80 81       	ld	r24, Z
    4e32:	84 0f       	add	r24, r20
    4e34:	ed 81       	ldd	r30, Y+5	; 0x05
    4e36:	fe 81       	ldd	r31, Y+6	; 0x06
    4e38:	84 8f       	std	Z+28, r24	; 0x1c
			DataIndex++;

			/*******    ÇóÐ£ÑéºÍ       *******/
			pDa->CheckSum = 0;

			for(TempCount=0;TempCount<CBDIS_RXD_LEN-1;TempCount++)
    4e3a:	89 81       	ldd	r24, Y+1	; 0x01
    4e3c:	8f 5f       	subi	r24, 0xFF	; 255
    4e3e:	89 83       	std	Y+1, r24	; 0x01
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	8c 30       	cpi	r24, 0x0C	; 12
    4e44:	48 f3       	brcs	.-46     	; 0x4e18 <XbotCbDealRxDisCtrl+0xbc>
			{
				pDa->CheckSum += pDa->RxdDataBuf[TempCount];
			}

			/******* Èç¹ûÐ£ÑéºÍ¶Ô£¬½âÎöÖ¸Áî *******/
			if(pDa->RxdDataBuf[CBDIS_RXD_LEN-1] == pDa->CheckSum )
    4e46:	ed 81       	ldd	r30, Y+5	; 0x05
    4e48:	fe 81       	ldd	r31, Y+6	; 0x06
    4e4a:	91 8d       	ldd	r25, Z+25	; 0x19
    4e4c:	ed 81       	ldd	r30, Y+5	; 0x05
    4e4e:	fe 81       	ldd	r31, Y+6	; 0x06
    4e50:	84 8d       	ldd	r24, Z+28	; 0x1c
    4e52:	98 17       	cp	r25, r24
    4e54:	39 f4       	brne	.+14     	; 0x4e64 <XbotCbDealRxDisCtrl+0x108>
			{

				/******* ³É¹¦½âÎöÐÂµÄÒ»Ö¡Êý¾Ý *******/
				CbDisSetCtrlData(pDa,&CbCtrlData);
    4e56:	8d 81       	ldd	r24, Y+5	; 0x05
    4e58:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5a:	20 e8       	ldi	r18, 0x80	; 128
    4e5c:	30 e2       	ldi	r19, 0x20	; 32
    4e5e:	b9 01       	movw	r22, r18
    4e60:	0e 94 44 27 	call	0x4e88	; 0x4e88 <CbDisSetCtrlData>

			}

			/******* ¸´Î»£¬ÖØÐÂ¿ªÊ¼ÐÂµÄÒ»Ö¡Ì½²â *******/
			DataIndex = 0;
    4e64:	10 92 dd 20 	sts	0x20DD, r1
    4e68:	02 c0       	rjmp	.+4      	; 0x4e6e <XbotCbDealRxDisCtrl+0x112>
		}
		else
		{
			DataIndex = 0;
    4e6a:	10 92 dd 20 	sts	0x20DD, r1
{
	uint8_t TempData,TempCount;

	static uint8_t DataIndex = 0;

	while (USART_RXBufferData_Available(p_usart_data))
    4e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e70:	9c 81       	ldd	r25, Y+4	; 0x04
    4e72:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <USART_RXBufferData_Available>
    4e76:	88 23       	and	r24, r24
    4e78:	09 f0       	breq	.+2      	; 0x4e7c <XbotCbDealRxDisCtrl+0x120>
    4e7a:	7c cf       	rjmp	.-264    	; 0x4d74 <XbotCbDealRxDisCtrl+0x18>
		}
	}

	/***  Ã»ÓÐ³É¹¦½âÎöÐÂµÄÒ»Ö¡Êý¾Ý ****/

}
    4e7c:	26 96       	adiw	r28, 0x06	; 6
    4e7e:	cd bf       	out	0x3d, r28	; 61
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	cf 91       	pop	r28
    4e84:	df 91       	pop	r29
    4e86:	08 95       	ret

00004e88 <CbDisSetCtrlData>:
	for(Index=0;Index<CBDIS_TXD_LEN;Index++)
		while (!USART_TXBuffer_PutByte(usart_data,SendData[Index]));
}

inline static void CbDisSetCtrlData(CBDIS_CTRL_DATA_STRUCT* pDa,CB_CTRL_DATA_STRUCT* pCtrlData)
{
    4e88:	df 93       	push	r29
    4e8a:	cf 93       	push	r28
    4e8c:	00 d0       	rcall	.+0      	; 0x4e8e <CbDisSetCtrlData+0x6>
    4e8e:	00 d0       	rcall	.+0      	; 0x4e90 <CbDisSetCtrlData+0x8>
    4e90:	cd b7       	in	r28, 0x3d	; 61
    4e92:	de b7       	in	r29, 0x3e	; 62
    4e94:	89 83       	std	Y+1, r24	; 0x01
    4e96:	9a 83       	std	Y+2, r25	; 0x02
    4e98:	6b 83       	std	Y+3, r22	; 0x03
    4e9a:	7c 83       	std	Y+4, r23	; 0x04
	if((pDa->RxdDataBuf[1]&0x80) != 0x00)
    4e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    4e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    4ea0:	86 85       	ldd	r24, Z+14	; 0x0e
    4ea2:	88 23       	and	r24, r24
    4ea4:	bc f1       	brlt	.+110    	; 0x4f14 <CbDisSetCtrlData+0x8c>
		return;

	if(((pDa->RxdDataBuf[1]>>4)&0x0F) == 0x00)
    4ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eaa:	86 85       	ldd	r24, Z+14	; 0x0e
    4eac:	82 95       	swap	r24
    4eae:	8f 70       	andi	r24, 0x0F	; 15
    4eb0:	88 23       	and	r24, r24
    4eb2:	c9 f4       	brne	.+50     	; 0x4ee6 <CbDisSetCtrlData+0x5e>
	{
		pCtrlData->Arm0WorkMode 	= (pDa->RxdDataBuf[2]>>5)&0X07;			//°ÚÍÈ¹¤×÷Ä£Ê½
    4eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    4eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    4eb8:	87 85       	ldd	r24, Z+15	; 0x0f
    4eba:	82 95       	swap	r24
    4ebc:	86 95       	lsr	r24
    4ebe:	87 70       	andi	r24, 0x07	; 7
    4ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    4ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    4ec4:	82 af       	std	Z+58, r24	; 0x3a
		pCtrlData->Arm18WorkMode 	= (pDa->RxdDataBuf[2]>>2)&0X07;;		//»úÐµ±Û¹¤×÷Ä£Ê½
    4ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eca:	87 85       	ldd	r24, Z+15	; 0x0f
    4ecc:	86 95       	lsr	r24
    4ece:	86 95       	lsr	r24
    4ed0:	87 70       	andi	r24, 0x07	; 7
    4ed2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ed4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ed6:	83 af       	std	Z+59, r24	; 0x3b
		pCtrlData->YtWorkMode 		= (pDa->RxdDataBuf[2]>>0)&0X03;;		//ÔÆÌ¨¹¤×÷Ä£Ê½
    4ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    4eda:	fa 81       	ldd	r31, Y+2	; 0x02
    4edc:	87 85       	ldd	r24, Z+15	; 0x0f
    4ede:	83 70       	andi	r24, 0x03	; 3
    4ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    4ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    4ee4:	84 af       	std	Z+60, r24	; 0x3c

	}

	if(pDa->RxdDataBuf[3] == 0x8A)
    4ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eea:	80 89       	ldd	r24, Z+16	; 0x10
    4eec:	8a 38       	cpi	r24, 0x8A	; 138
    4eee:	29 f4       	brne	.+10     	; 0x4efa <CbDisSetCtrlData+0x72>
		pCtrlData->TestMode = TEST_NO_LIMIT;
    4ef0:	eb 81       	ldd	r30, Y+3	; 0x03
    4ef2:	fc 81       	ldd	r31, Y+4	; 0x04
    4ef4:	81 e0       	ldi	r24, 0x01	; 1
    4ef6:	85 af       	std	Z+61, r24	; 0x3d
    4ef8:	0d c0       	rjmp	.+26     	; 0x4f14 <CbDisSetCtrlData+0x8c>
	else if(pDa->RxdDataBuf[3] == 0x8B)
    4efa:	e9 81       	ldd	r30, Y+1	; 0x01
    4efc:	fa 81       	ldd	r31, Y+2	; 0x02
    4efe:	80 89       	ldd	r24, Z+16	; 0x10
    4f00:	8b 38       	cpi	r24, 0x8B	; 139
    4f02:	29 f4       	brne	.+10     	; 0x4f0e <CbDisSetCtrlData+0x86>
		pCtrlData->TestMode = TEST_SET_ZERO;
    4f04:	eb 81       	ldd	r30, Y+3	; 0x03
    4f06:	fc 81       	ldd	r31, Y+4	; 0x04
    4f08:	81 e0       	ldi	r24, 0x01	; 1
    4f0a:	85 af       	std	Z+61, r24	; 0x3d
    4f0c:	03 c0       	rjmp	.+6      	; 0x4f14 <CbDisSetCtrlData+0x8c>
	else
		pCtrlData->TestMode = TEST_NC;
    4f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    4f10:	fc 81       	ldd	r31, Y+4	; 0x04
    4f12:	15 ae       	std	Z+61, r1	; 0x3d

}
    4f14:	24 96       	adiw	r28, 0x04	; 4
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	de bf       	out	0x3e, r29	; 62
    4f1a:	cf 91       	pop	r28
    4f1c:	df 91       	pop	r29
    4f1e:	08 95       	ret

00004f20 <__fixunssfsi>:
    4f20:	ef 92       	push	r14
    4f22:	ff 92       	push	r15
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	7b 01       	movw	r14, r22
    4f2a:	8c 01       	movw	r16, r24
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	40 e0       	ldi	r20, 0x00	; 0
    4f32:	5f e4       	ldi	r21, 0x4F	; 79
    4f34:	0e 94 3c 2b 	call	0x5678	; 0x5678 <__gesf2>
    4f38:	88 23       	and	r24, r24
    4f3a:	8c f0       	brlt	.+34     	; 0x4f5e <__fixunssfsi+0x3e>
    4f3c:	c8 01       	movw	r24, r16
    4f3e:	b7 01       	movw	r22, r14
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e0       	ldi	r20, 0x00	; 0
    4f46:	5f e4       	ldi	r21, 0x4F	; 79
    4f48:	0e 94 08 29 	call	0x5210	; 0x5210 <__subsf3>
    4f4c:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__fixsfsi>
    4f50:	9b 01       	movw	r18, r22
    4f52:	ac 01       	movw	r20, r24
    4f54:	20 50       	subi	r18, 0x00	; 0
    4f56:	30 40       	sbci	r19, 0x00	; 0
    4f58:	40 40       	sbci	r20, 0x00	; 0
    4f5a:	50 48       	sbci	r21, 0x80	; 128
    4f5c:	06 c0       	rjmp	.+12     	; 0x4f6a <__fixunssfsi+0x4a>
    4f5e:	c8 01       	movw	r24, r16
    4f60:	b7 01       	movw	r22, r14
    4f62:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__fixsfsi>
    4f66:	9b 01       	movw	r18, r22
    4f68:	ac 01       	movw	r20, r24
    4f6a:	b9 01       	movw	r22, r18
    4f6c:	ca 01       	movw	r24, r20
    4f6e:	1f 91       	pop	r17
    4f70:	0f 91       	pop	r16
    4f72:	ff 90       	pop	r15
    4f74:	ef 90       	pop	r14
    4f76:	08 95       	ret

00004f78 <_fpadd_parts>:
    4f78:	a0 e0       	ldi	r26, 0x00	; 0
    4f7a:	b0 e0       	ldi	r27, 0x00	; 0
    4f7c:	e2 ec       	ldi	r30, 0xC2	; 194
    4f7e:	f7 e2       	ldi	r31, 0x27	; 39
    4f80:	0c 94 19 2e 	jmp	0x5c32	; 0x5c32 <__prologue_saves__>
    4f84:	dc 01       	movw	r26, r24
    4f86:	2b 01       	movw	r4, r22
    4f88:	fa 01       	movw	r30, r20
    4f8a:	9c 91       	ld	r25, X
    4f8c:	92 30       	cpi	r25, 0x02	; 2
    4f8e:	08 f4       	brcc	.+2      	; 0x4f92 <_fpadd_parts+0x1a>
    4f90:	39 c1       	rjmp	.+626    	; 0x5204 <_fpadd_parts+0x28c>
    4f92:	eb 01       	movw	r28, r22
    4f94:	88 81       	ld	r24, Y
    4f96:	82 30       	cpi	r24, 0x02	; 2
    4f98:	08 f4       	brcc	.+2      	; 0x4f9c <_fpadd_parts+0x24>
    4f9a:	33 c1       	rjmp	.+614    	; 0x5202 <_fpadd_parts+0x28a>
    4f9c:	94 30       	cpi	r25, 0x04	; 4
    4f9e:	69 f4       	brne	.+26     	; 0x4fba <_fpadd_parts+0x42>
    4fa0:	84 30       	cpi	r24, 0x04	; 4
    4fa2:	09 f0       	breq	.+2      	; 0x4fa6 <_fpadd_parts+0x2e>
    4fa4:	2f c1       	rjmp	.+606    	; 0x5204 <_fpadd_parts+0x28c>
    4fa6:	11 96       	adiw	r26, 0x01	; 1
    4fa8:	9c 91       	ld	r25, X
    4faa:	11 97       	sbiw	r26, 0x01	; 1
    4fac:	89 81       	ldd	r24, Y+1	; 0x01
    4fae:	98 17       	cp	r25, r24
    4fb0:	09 f4       	brne	.+2      	; 0x4fb4 <_fpadd_parts+0x3c>
    4fb2:	28 c1       	rjmp	.+592    	; 0x5204 <_fpadd_parts+0x28c>
    4fb4:	a5 e5       	ldi	r26, 0x55	; 85
    4fb6:	b0 e2       	ldi	r27, 0x20	; 32
    4fb8:	25 c1       	rjmp	.+586    	; 0x5204 <_fpadd_parts+0x28c>
    4fba:	84 30       	cpi	r24, 0x04	; 4
    4fbc:	09 f4       	brne	.+2      	; 0x4fc0 <_fpadd_parts+0x48>
    4fbe:	21 c1       	rjmp	.+578    	; 0x5202 <_fpadd_parts+0x28a>
    4fc0:	82 30       	cpi	r24, 0x02	; 2
    4fc2:	a9 f4       	brne	.+42     	; 0x4fee <_fpadd_parts+0x76>
    4fc4:	92 30       	cpi	r25, 0x02	; 2
    4fc6:	09 f0       	breq	.+2      	; 0x4fca <_fpadd_parts+0x52>
    4fc8:	1d c1       	rjmp	.+570    	; 0x5204 <_fpadd_parts+0x28c>
    4fca:	9a 01       	movw	r18, r20
    4fcc:	ad 01       	movw	r20, r26
    4fce:	88 e0       	ldi	r24, 0x08	; 8
    4fd0:	ea 01       	movw	r28, r20
    4fd2:	09 90       	ld	r0, Y+
    4fd4:	ae 01       	movw	r20, r28
    4fd6:	e9 01       	movw	r28, r18
    4fd8:	09 92       	st	Y+, r0
    4fda:	9e 01       	movw	r18, r28
    4fdc:	81 50       	subi	r24, 0x01	; 1
    4fde:	c1 f7       	brne	.-16     	; 0x4fd0 <_fpadd_parts+0x58>
    4fe0:	e2 01       	movw	r28, r4
    4fe2:	89 81       	ldd	r24, Y+1	; 0x01
    4fe4:	11 96       	adiw	r26, 0x01	; 1
    4fe6:	9c 91       	ld	r25, X
    4fe8:	89 23       	and	r24, r25
    4fea:	81 83       	std	Z+1, r24	; 0x01
    4fec:	08 c1       	rjmp	.+528    	; 0x51fe <_fpadd_parts+0x286>
    4fee:	92 30       	cpi	r25, 0x02	; 2
    4ff0:	09 f4       	brne	.+2      	; 0x4ff4 <_fpadd_parts+0x7c>
    4ff2:	07 c1       	rjmp	.+526    	; 0x5202 <_fpadd_parts+0x28a>
    4ff4:	12 96       	adiw	r26, 0x02	; 2
    4ff6:	2d 90       	ld	r2, X+
    4ff8:	3c 90       	ld	r3, X
    4ffa:	13 97       	sbiw	r26, 0x03	; 3
    4ffc:	eb 01       	movw	r28, r22
    4ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    5000:	9b 81       	ldd	r25, Y+3	; 0x03
    5002:	14 96       	adiw	r26, 0x04	; 4
    5004:	ad 90       	ld	r10, X+
    5006:	bd 90       	ld	r11, X+
    5008:	cd 90       	ld	r12, X+
    500a:	dc 90       	ld	r13, X
    500c:	17 97       	sbiw	r26, 0x07	; 7
    500e:	ec 80       	ldd	r14, Y+4	; 0x04
    5010:	fd 80       	ldd	r15, Y+5	; 0x05
    5012:	0e 81       	ldd	r16, Y+6	; 0x06
    5014:	1f 81       	ldd	r17, Y+7	; 0x07
    5016:	91 01       	movw	r18, r2
    5018:	28 1b       	sub	r18, r24
    501a:	39 0b       	sbc	r19, r25
    501c:	b9 01       	movw	r22, r18
    501e:	37 ff       	sbrs	r19, 7
    5020:	04 c0       	rjmp	.+8      	; 0x502a <_fpadd_parts+0xb2>
    5022:	66 27       	eor	r22, r22
    5024:	77 27       	eor	r23, r23
    5026:	62 1b       	sub	r22, r18
    5028:	73 0b       	sbc	r23, r19
    502a:	60 32       	cpi	r22, 0x20	; 32
    502c:	71 05       	cpc	r23, r1
    502e:	0c f0       	brlt	.+2      	; 0x5032 <_fpadd_parts+0xba>
    5030:	61 c0       	rjmp	.+194    	; 0x50f4 <_fpadd_parts+0x17c>
    5032:	12 16       	cp	r1, r18
    5034:	13 06       	cpc	r1, r19
    5036:	6c f5       	brge	.+90     	; 0x5092 <_fpadd_parts+0x11a>
    5038:	37 01       	movw	r6, r14
    503a:	48 01       	movw	r8, r16
    503c:	06 2e       	mov	r0, r22
    503e:	04 c0       	rjmp	.+8      	; 0x5048 <_fpadd_parts+0xd0>
    5040:	96 94       	lsr	r9
    5042:	87 94       	ror	r8
    5044:	77 94       	ror	r7
    5046:	67 94       	ror	r6
    5048:	0a 94       	dec	r0
    504a:	d2 f7       	brpl	.-12     	; 0x5040 <_fpadd_parts+0xc8>
    504c:	21 e0       	ldi	r18, 0x01	; 1
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	40 e0       	ldi	r20, 0x00	; 0
    5052:	50 e0       	ldi	r21, 0x00	; 0
    5054:	04 c0       	rjmp	.+8      	; 0x505e <_fpadd_parts+0xe6>
    5056:	22 0f       	add	r18, r18
    5058:	33 1f       	adc	r19, r19
    505a:	44 1f       	adc	r20, r20
    505c:	55 1f       	adc	r21, r21
    505e:	6a 95       	dec	r22
    5060:	d2 f7       	brpl	.-12     	; 0x5056 <_fpadd_parts+0xde>
    5062:	21 50       	subi	r18, 0x01	; 1
    5064:	30 40       	sbci	r19, 0x00	; 0
    5066:	40 40       	sbci	r20, 0x00	; 0
    5068:	50 40       	sbci	r21, 0x00	; 0
    506a:	2e 21       	and	r18, r14
    506c:	3f 21       	and	r19, r15
    506e:	40 23       	and	r20, r16
    5070:	51 23       	and	r21, r17
    5072:	21 15       	cp	r18, r1
    5074:	31 05       	cpc	r19, r1
    5076:	41 05       	cpc	r20, r1
    5078:	51 05       	cpc	r21, r1
    507a:	21 f0       	breq	.+8      	; 0x5084 <_fpadd_parts+0x10c>
    507c:	21 e0       	ldi	r18, 0x01	; 1
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e0       	ldi	r20, 0x00	; 0
    5082:	50 e0       	ldi	r21, 0x00	; 0
    5084:	79 01       	movw	r14, r18
    5086:	8a 01       	movw	r16, r20
    5088:	e6 28       	or	r14, r6
    508a:	f7 28       	or	r15, r7
    508c:	08 29       	or	r16, r8
    508e:	19 29       	or	r17, r9
    5090:	3c c0       	rjmp	.+120    	; 0x510a <_fpadd_parts+0x192>
    5092:	23 2b       	or	r18, r19
    5094:	d1 f1       	breq	.+116    	; 0x510a <_fpadd_parts+0x192>
    5096:	26 0e       	add	r2, r22
    5098:	37 1e       	adc	r3, r23
    509a:	35 01       	movw	r6, r10
    509c:	46 01       	movw	r8, r12
    509e:	06 2e       	mov	r0, r22
    50a0:	04 c0       	rjmp	.+8      	; 0x50aa <_fpadd_parts+0x132>
    50a2:	96 94       	lsr	r9
    50a4:	87 94       	ror	r8
    50a6:	77 94       	ror	r7
    50a8:	67 94       	ror	r6
    50aa:	0a 94       	dec	r0
    50ac:	d2 f7       	brpl	.-12     	; 0x50a2 <_fpadd_parts+0x12a>
    50ae:	21 e0       	ldi	r18, 0x01	; 1
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	40 e0       	ldi	r20, 0x00	; 0
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	04 c0       	rjmp	.+8      	; 0x50c0 <_fpadd_parts+0x148>
    50b8:	22 0f       	add	r18, r18
    50ba:	33 1f       	adc	r19, r19
    50bc:	44 1f       	adc	r20, r20
    50be:	55 1f       	adc	r21, r21
    50c0:	6a 95       	dec	r22
    50c2:	d2 f7       	brpl	.-12     	; 0x50b8 <_fpadd_parts+0x140>
    50c4:	21 50       	subi	r18, 0x01	; 1
    50c6:	30 40       	sbci	r19, 0x00	; 0
    50c8:	40 40       	sbci	r20, 0x00	; 0
    50ca:	50 40       	sbci	r21, 0x00	; 0
    50cc:	2a 21       	and	r18, r10
    50ce:	3b 21       	and	r19, r11
    50d0:	4c 21       	and	r20, r12
    50d2:	5d 21       	and	r21, r13
    50d4:	21 15       	cp	r18, r1
    50d6:	31 05       	cpc	r19, r1
    50d8:	41 05       	cpc	r20, r1
    50da:	51 05       	cpc	r21, r1
    50dc:	21 f0       	breq	.+8      	; 0x50e6 <_fpadd_parts+0x16e>
    50de:	21 e0       	ldi	r18, 0x01	; 1
    50e0:	30 e0       	ldi	r19, 0x00	; 0
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	59 01       	movw	r10, r18
    50e8:	6a 01       	movw	r12, r20
    50ea:	a6 28       	or	r10, r6
    50ec:	b7 28       	or	r11, r7
    50ee:	c8 28       	or	r12, r8
    50f0:	d9 28       	or	r13, r9
    50f2:	0b c0       	rjmp	.+22     	; 0x510a <_fpadd_parts+0x192>
    50f4:	82 15       	cp	r24, r2
    50f6:	93 05       	cpc	r25, r3
    50f8:	2c f0       	brlt	.+10     	; 0x5104 <_fpadd_parts+0x18c>
    50fa:	1c 01       	movw	r2, r24
    50fc:	aa 24       	eor	r10, r10
    50fe:	bb 24       	eor	r11, r11
    5100:	65 01       	movw	r12, r10
    5102:	03 c0       	rjmp	.+6      	; 0x510a <_fpadd_parts+0x192>
    5104:	ee 24       	eor	r14, r14
    5106:	ff 24       	eor	r15, r15
    5108:	87 01       	movw	r16, r14
    510a:	11 96       	adiw	r26, 0x01	; 1
    510c:	9c 91       	ld	r25, X
    510e:	d2 01       	movw	r26, r4
    5110:	11 96       	adiw	r26, 0x01	; 1
    5112:	8c 91       	ld	r24, X
    5114:	98 17       	cp	r25, r24
    5116:	09 f4       	brne	.+2      	; 0x511a <_fpadd_parts+0x1a2>
    5118:	45 c0       	rjmp	.+138    	; 0x51a4 <_fpadd_parts+0x22c>
    511a:	99 23       	and	r25, r25
    511c:	39 f0       	breq	.+14     	; 0x512c <_fpadd_parts+0x1b4>
    511e:	a8 01       	movw	r20, r16
    5120:	97 01       	movw	r18, r14
    5122:	2a 19       	sub	r18, r10
    5124:	3b 09       	sbc	r19, r11
    5126:	4c 09       	sbc	r20, r12
    5128:	5d 09       	sbc	r21, r13
    512a:	06 c0       	rjmp	.+12     	; 0x5138 <_fpadd_parts+0x1c0>
    512c:	a6 01       	movw	r20, r12
    512e:	95 01       	movw	r18, r10
    5130:	2e 19       	sub	r18, r14
    5132:	3f 09       	sbc	r19, r15
    5134:	40 0b       	sbc	r20, r16
    5136:	51 0b       	sbc	r21, r17
    5138:	57 fd       	sbrc	r21, 7
    513a:	08 c0       	rjmp	.+16     	; 0x514c <_fpadd_parts+0x1d4>
    513c:	11 82       	std	Z+1, r1	; 0x01
    513e:	22 82       	std	Z+2, r2	; 0x02
    5140:	33 82       	std	Z+3, r3	; 0x03
    5142:	24 83       	std	Z+4, r18	; 0x04
    5144:	35 83       	std	Z+5, r19	; 0x05
    5146:	46 83       	std	Z+6, r20	; 0x06
    5148:	57 83       	std	Z+7, r21	; 0x07
    514a:	1d c0       	rjmp	.+58     	; 0x5186 <_fpadd_parts+0x20e>
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	81 83       	std	Z+1, r24	; 0x01
    5150:	22 82       	std	Z+2, r2	; 0x02
    5152:	33 82       	std	Z+3, r3	; 0x03
    5154:	88 27       	eor	r24, r24
    5156:	99 27       	eor	r25, r25
    5158:	dc 01       	movw	r26, r24
    515a:	82 1b       	sub	r24, r18
    515c:	93 0b       	sbc	r25, r19
    515e:	a4 0b       	sbc	r26, r20
    5160:	b5 0b       	sbc	r27, r21
    5162:	84 83       	std	Z+4, r24	; 0x04
    5164:	95 83       	std	Z+5, r25	; 0x05
    5166:	a6 83       	std	Z+6, r26	; 0x06
    5168:	b7 83       	std	Z+7, r27	; 0x07
    516a:	0d c0       	rjmp	.+26     	; 0x5186 <_fpadd_parts+0x20e>
    516c:	22 0f       	add	r18, r18
    516e:	33 1f       	adc	r19, r19
    5170:	44 1f       	adc	r20, r20
    5172:	55 1f       	adc	r21, r21
    5174:	24 83       	std	Z+4, r18	; 0x04
    5176:	35 83       	std	Z+5, r19	; 0x05
    5178:	46 83       	std	Z+6, r20	; 0x06
    517a:	57 83       	std	Z+7, r21	; 0x07
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	01 97       	sbiw	r24, 0x01	; 1
    5182:	82 83       	std	Z+2, r24	; 0x02
    5184:	93 83       	std	Z+3, r25	; 0x03
    5186:	24 81       	ldd	r18, Z+4	; 0x04
    5188:	35 81       	ldd	r19, Z+5	; 0x05
    518a:	46 81       	ldd	r20, Z+6	; 0x06
    518c:	57 81       	ldd	r21, Z+7	; 0x07
    518e:	da 01       	movw	r26, r20
    5190:	c9 01       	movw	r24, r18
    5192:	01 97       	sbiw	r24, 0x01	; 1
    5194:	a1 09       	sbc	r26, r1
    5196:	b1 09       	sbc	r27, r1
    5198:	8f 5f       	subi	r24, 0xFF	; 255
    519a:	9f 4f       	sbci	r25, 0xFF	; 255
    519c:	af 4f       	sbci	r26, 0xFF	; 255
    519e:	bf 43       	sbci	r27, 0x3F	; 63
    51a0:	28 f3       	brcs	.-54     	; 0x516c <_fpadd_parts+0x1f4>
    51a2:	0b c0       	rjmp	.+22     	; 0x51ba <_fpadd_parts+0x242>
    51a4:	91 83       	std	Z+1, r25	; 0x01
    51a6:	22 82       	std	Z+2, r2	; 0x02
    51a8:	33 82       	std	Z+3, r3	; 0x03
    51aa:	ea 0c       	add	r14, r10
    51ac:	fb 1c       	adc	r15, r11
    51ae:	0c 1d       	adc	r16, r12
    51b0:	1d 1d       	adc	r17, r13
    51b2:	e4 82       	std	Z+4, r14	; 0x04
    51b4:	f5 82       	std	Z+5, r15	; 0x05
    51b6:	06 83       	std	Z+6, r16	; 0x06
    51b8:	17 83       	std	Z+7, r17	; 0x07
    51ba:	83 e0       	ldi	r24, 0x03	; 3
    51bc:	80 83       	st	Z, r24
    51be:	24 81       	ldd	r18, Z+4	; 0x04
    51c0:	35 81       	ldd	r19, Z+5	; 0x05
    51c2:	46 81       	ldd	r20, Z+6	; 0x06
    51c4:	57 81       	ldd	r21, Z+7	; 0x07
    51c6:	57 ff       	sbrs	r21, 7
    51c8:	1a c0       	rjmp	.+52     	; 0x51fe <_fpadd_parts+0x286>
    51ca:	c9 01       	movw	r24, r18
    51cc:	aa 27       	eor	r26, r26
    51ce:	97 fd       	sbrc	r25, 7
    51d0:	a0 95       	com	r26
    51d2:	ba 2f       	mov	r27, r26
    51d4:	81 70       	andi	r24, 0x01	; 1
    51d6:	90 70       	andi	r25, 0x00	; 0
    51d8:	a0 70       	andi	r26, 0x00	; 0
    51da:	b0 70       	andi	r27, 0x00	; 0
    51dc:	56 95       	lsr	r21
    51de:	47 95       	ror	r20
    51e0:	37 95       	ror	r19
    51e2:	27 95       	ror	r18
    51e4:	82 2b       	or	r24, r18
    51e6:	93 2b       	or	r25, r19
    51e8:	a4 2b       	or	r26, r20
    51ea:	b5 2b       	or	r27, r21
    51ec:	84 83       	std	Z+4, r24	; 0x04
    51ee:	95 83       	std	Z+5, r25	; 0x05
    51f0:	a6 83       	std	Z+6, r26	; 0x06
    51f2:	b7 83       	std	Z+7, r27	; 0x07
    51f4:	82 81       	ldd	r24, Z+2	; 0x02
    51f6:	93 81       	ldd	r25, Z+3	; 0x03
    51f8:	01 96       	adiw	r24, 0x01	; 1
    51fa:	82 83       	std	Z+2, r24	; 0x02
    51fc:	93 83       	std	Z+3, r25	; 0x03
    51fe:	df 01       	movw	r26, r30
    5200:	01 c0       	rjmp	.+2      	; 0x5204 <_fpadd_parts+0x28c>
    5202:	d2 01       	movw	r26, r4
    5204:	cd 01       	movw	r24, r26
    5206:	cd b7       	in	r28, 0x3d	; 61
    5208:	de b7       	in	r29, 0x3e	; 62
    520a:	e2 e1       	ldi	r30, 0x12	; 18
    520c:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__epilogue_restores__>

00005210 <__subsf3>:
    5210:	a0 e2       	ldi	r26, 0x20	; 32
    5212:	b0 e0       	ldi	r27, 0x00	; 0
    5214:	ee e0       	ldi	r30, 0x0E	; 14
    5216:	f9 e2       	ldi	r31, 0x29	; 41
    5218:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
    521c:	69 83       	std	Y+1, r22	; 0x01
    521e:	7a 83       	std	Y+2, r23	; 0x02
    5220:	8b 83       	std	Y+3, r24	; 0x03
    5222:	9c 83       	std	Y+4, r25	; 0x04
    5224:	2d 83       	std	Y+5, r18	; 0x05
    5226:	3e 83       	std	Y+6, r19	; 0x06
    5228:	4f 83       	std	Y+7, r20	; 0x07
    522a:	58 87       	std	Y+8, r21	; 0x08
    522c:	e9 e0       	ldi	r30, 0x09	; 9
    522e:	ee 2e       	mov	r14, r30
    5230:	f1 2c       	mov	r15, r1
    5232:	ec 0e       	add	r14, r28
    5234:	fd 1e       	adc	r15, r29
    5236:	ce 01       	movw	r24, r28
    5238:	01 96       	adiw	r24, 0x01	; 1
    523a:	b7 01       	movw	r22, r14
    523c:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5240:	8e 01       	movw	r16, r28
    5242:	0f 5e       	subi	r16, 0xEF	; 239
    5244:	1f 4f       	sbci	r17, 0xFF	; 255
    5246:	ce 01       	movw	r24, r28
    5248:	05 96       	adiw	r24, 0x05	; 5
    524a:	b8 01       	movw	r22, r16
    524c:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5250:	8a 89       	ldd	r24, Y+18	; 0x12
    5252:	91 e0       	ldi	r25, 0x01	; 1
    5254:	89 27       	eor	r24, r25
    5256:	8a 8b       	std	Y+18, r24	; 0x12
    5258:	c7 01       	movw	r24, r14
    525a:	b8 01       	movw	r22, r16
    525c:	ae 01       	movw	r20, r28
    525e:	47 5e       	subi	r20, 0xE7	; 231
    5260:	5f 4f       	sbci	r21, 0xFF	; 255
    5262:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <_fpadd_parts>
    5266:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__pack_f>
    526a:	a0 96       	adiw	r28, 0x20	; 32
    526c:	e6 e0       	ldi	r30, 0x06	; 6
    526e:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

00005272 <__addsf3>:
    5272:	a0 e2       	ldi	r26, 0x20	; 32
    5274:	b0 e0       	ldi	r27, 0x00	; 0
    5276:	ef e3       	ldi	r30, 0x3F	; 63
    5278:	f9 e2       	ldi	r31, 0x29	; 41
    527a:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
    527e:	69 83       	std	Y+1, r22	; 0x01
    5280:	7a 83       	std	Y+2, r23	; 0x02
    5282:	8b 83       	std	Y+3, r24	; 0x03
    5284:	9c 83       	std	Y+4, r25	; 0x04
    5286:	2d 83       	std	Y+5, r18	; 0x05
    5288:	3e 83       	std	Y+6, r19	; 0x06
    528a:	4f 83       	std	Y+7, r20	; 0x07
    528c:	58 87       	std	Y+8, r21	; 0x08
    528e:	f9 e0       	ldi	r31, 0x09	; 9
    5290:	ef 2e       	mov	r14, r31
    5292:	f1 2c       	mov	r15, r1
    5294:	ec 0e       	add	r14, r28
    5296:	fd 1e       	adc	r15, r29
    5298:	ce 01       	movw	r24, r28
    529a:	01 96       	adiw	r24, 0x01	; 1
    529c:	b7 01       	movw	r22, r14
    529e:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    52a2:	8e 01       	movw	r16, r28
    52a4:	0f 5e       	subi	r16, 0xEF	; 239
    52a6:	1f 4f       	sbci	r17, 0xFF	; 255
    52a8:	ce 01       	movw	r24, r28
    52aa:	05 96       	adiw	r24, 0x05	; 5
    52ac:	b8 01       	movw	r22, r16
    52ae:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    52b2:	c7 01       	movw	r24, r14
    52b4:	b8 01       	movw	r22, r16
    52b6:	ae 01       	movw	r20, r28
    52b8:	47 5e       	subi	r20, 0xE7	; 231
    52ba:	5f 4f       	sbci	r21, 0xFF	; 255
    52bc:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <_fpadd_parts>
    52c0:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__pack_f>
    52c4:	a0 96       	adiw	r28, 0x20	; 32
    52c6:	e6 e0       	ldi	r30, 0x06	; 6
    52c8:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

000052cc <__mulsf3>:
    52cc:	a0 e2       	ldi	r26, 0x20	; 32
    52ce:	b0 e0       	ldi	r27, 0x00	; 0
    52d0:	ec e6       	ldi	r30, 0x6C	; 108
    52d2:	f9 e2       	ldi	r31, 0x29	; 41
    52d4:	0c 94 19 2e 	jmp	0x5c32	; 0x5c32 <__prologue_saves__>
    52d8:	69 83       	std	Y+1, r22	; 0x01
    52da:	7a 83       	std	Y+2, r23	; 0x02
    52dc:	8b 83       	std	Y+3, r24	; 0x03
    52de:	9c 83       	std	Y+4, r25	; 0x04
    52e0:	2d 83       	std	Y+5, r18	; 0x05
    52e2:	3e 83       	std	Y+6, r19	; 0x06
    52e4:	4f 83       	std	Y+7, r20	; 0x07
    52e6:	58 87       	std	Y+8, r21	; 0x08
    52e8:	ce 01       	movw	r24, r28
    52ea:	01 96       	adiw	r24, 0x01	; 1
    52ec:	be 01       	movw	r22, r28
    52ee:	67 5f       	subi	r22, 0xF7	; 247
    52f0:	7f 4f       	sbci	r23, 0xFF	; 255
    52f2:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    52f6:	ce 01       	movw	r24, r28
    52f8:	05 96       	adiw	r24, 0x05	; 5
    52fa:	be 01       	movw	r22, r28
    52fc:	6f 5e       	subi	r22, 0xEF	; 239
    52fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5300:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5304:	99 85       	ldd	r25, Y+9	; 0x09
    5306:	92 30       	cpi	r25, 0x02	; 2
    5308:	88 f0       	brcs	.+34     	; 0x532c <__mulsf3+0x60>
    530a:	89 89       	ldd	r24, Y+17	; 0x11
    530c:	82 30       	cpi	r24, 0x02	; 2
    530e:	c8 f0       	brcs	.+50     	; 0x5342 <__mulsf3+0x76>
    5310:	94 30       	cpi	r25, 0x04	; 4
    5312:	19 f4       	brne	.+6      	; 0x531a <__mulsf3+0x4e>
    5314:	82 30       	cpi	r24, 0x02	; 2
    5316:	51 f4       	brne	.+20     	; 0x532c <__mulsf3+0x60>
    5318:	04 c0       	rjmp	.+8      	; 0x5322 <__mulsf3+0x56>
    531a:	84 30       	cpi	r24, 0x04	; 4
    531c:	29 f4       	brne	.+10     	; 0x5328 <__mulsf3+0x5c>
    531e:	92 30       	cpi	r25, 0x02	; 2
    5320:	81 f4       	brne	.+32     	; 0x5342 <__mulsf3+0x76>
    5322:	85 e5       	ldi	r24, 0x55	; 85
    5324:	90 e2       	ldi	r25, 0x20	; 32
    5326:	c6 c0       	rjmp	.+396    	; 0x54b4 <__mulsf3+0x1e8>
    5328:	92 30       	cpi	r25, 0x02	; 2
    532a:	49 f4       	brne	.+18     	; 0x533e <__mulsf3+0x72>
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5330:	8a 89       	ldd	r24, Y+18	; 0x12
    5332:	98 13       	cpse	r25, r24
    5334:	21 e0       	ldi	r18, 0x01	; 1
    5336:	2a 87       	std	Y+10, r18	; 0x0a
    5338:	ce 01       	movw	r24, r28
    533a:	09 96       	adiw	r24, 0x09	; 9
    533c:	bb c0       	rjmp	.+374    	; 0x54b4 <__mulsf3+0x1e8>
    533e:	82 30       	cpi	r24, 0x02	; 2
    5340:	49 f4       	brne	.+18     	; 0x5354 <__mulsf3+0x88>
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	9a 85       	ldd	r25, Y+10	; 0x0a
    5346:	8a 89       	ldd	r24, Y+18	; 0x12
    5348:	98 13       	cpse	r25, r24
    534a:	21 e0       	ldi	r18, 0x01	; 1
    534c:	2a 8b       	std	Y+18, r18	; 0x12
    534e:	ce 01       	movw	r24, r28
    5350:	41 96       	adiw	r24, 0x11	; 17
    5352:	b0 c0       	rjmp	.+352    	; 0x54b4 <__mulsf3+0x1e8>
    5354:	2d 84       	ldd	r2, Y+13	; 0x0d
    5356:	3e 84       	ldd	r3, Y+14	; 0x0e
    5358:	4f 84       	ldd	r4, Y+15	; 0x0f
    535a:	58 88       	ldd	r5, Y+16	; 0x10
    535c:	6d 88       	ldd	r6, Y+21	; 0x15
    535e:	7e 88       	ldd	r7, Y+22	; 0x16
    5360:	8f 88       	ldd	r8, Y+23	; 0x17
    5362:	98 8c       	ldd	r9, Y+24	; 0x18
    5364:	ee 24       	eor	r14, r14
    5366:	ff 24       	eor	r15, r15
    5368:	87 01       	movw	r16, r14
    536a:	aa 24       	eor	r10, r10
    536c:	bb 24       	eor	r11, r11
    536e:	65 01       	movw	r12, r10
    5370:	40 e0       	ldi	r20, 0x00	; 0
    5372:	50 e0       	ldi	r21, 0x00	; 0
    5374:	60 e0       	ldi	r22, 0x00	; 0
    5376:	70 e0       	ldi	r23, 0x00	; 0
    5378:	e0 e0       	ldi	r30, 0x00	; 0
    537a:	f0 e0       	ldi	r31, 0x00	; 0
    537c:	c1 01       	movw	r24, r2
    537e:	81 70       	andi	r24, 0x01	; 1
    5380:	90 70       	andi	r25, 0x00	; 0
    5382:	89 2b       	or	r24, r25
    5384:	e9 f0       	breq	.+58     	; 0x53c0 <__mulsf3+0xf4>
    5386:	e6 0c       	add	r14, r6
    5388:	f7 1c       	adc	r15, r7
    538a:	08 1d       	adc	r16, r8
    538c:	19 1d       	adc	r17, r9
    538e:	9a 01       	movw	r18, r20
    5390:	ab 01       	movw	r20, r22
    5392:	2a 0d       	add	r18, r10
    5394:	3b 1d       	adc	r19, r11
    5396:	4c 1d       	adc	r20, r12
    5398:	5d 1d       	adc	r21, r13
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	a0 e0       	ldi	r26, 0x00	; 0
    53a0:	b0 e0       	ldi	r27, 0x00	; 0
    53a2:	e6 14       	cp	r14, r6
    53a4:	f7 04       	cpc	r15, r7
    53a6:	08 05       	cpc	r16, r8
    53a8:	19 05       	cpc	r17, r9
    53aa:	20 f4       	brcc	.+8      	; 0x53b4 <__mulsf3+0xe8>
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	a0 e0       	ldi	r26, 0x00	; 0
    53b2:	b0 e0       	ldi	r27, 0x00	; 0
    53b4:	ba 01       	movw	r22, r20
    53b6:	a9 01       	movw	r20, r18
    53b8:	48 0f       	add	r20, r24
    53ba:	59 1f       	adc	r21, r25
    53bc:	6a 1f       	adc	r22, r26
    53be:	7b 1f       	adc	r23, r27
    53c0:	aa 0c       	add	r10, r10
    53c2:	bb 1c       	adc	r11, r11
    53c4:	cc 1c       	adc	r12, r12
    53c6:	dd 1c       	adc	r13, r13
    53c8:	97 fe       	sbrs	r9, 7
    53ca:	08 c0       	rjmp	.+16     	; 0x53dc <__mulsf3+0x110>
    53cc:	81 e0       	ldi	r24, 0x01	; 1
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	a0 e0       	ldi	r26, 0x00	; 0
    53d2:	b0 e0       	ldi	r27, 0x00	; 0
    53d4:	a8 2a       	or	r10, r24
    53d6:	b9 2a       	or	r11, r25
    53d8:	ca 2a       	or	r12, r26
    53da:	db 2a       	or	r13, r27
    53dc:	31 96       	adiw	r30, 0x01	; 1
    53de:	e0 32       	cpi	r30, 0x20	; 32
    53e0:	f1 05       	cpc	r31, r1
    53e2:	49 f0       	breq	.+18     	; 0x53f6 <__mulsf3+0x12a>
    53e4:	66 0c       	add	r6, r6
    53e6:	77 1c       	adc	r7, r7
    53e8:	88 1c       	adc	r8, r8
    53ea:	99 1c       	adc	r9, r9
    53ec:	56 94       	lsr	r5
    53ee:	47 94       	ror	r4
    53f0:	37 94       	ror	r3
    53f2:	27 94       	ror	r2
    53f4:	c3 cf       	rjmp	.-122    	; 0x537c <__mulsf3+0xb0>
    53f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    53f8:	ea 89       	ldd	r30, Y+18	; 0x12
    53fa:	2b 89       	ldd	r18, Y+19	; 0x13
    53fc:	3c 89       	ldd	r19, Y+20	; 0x14
    53fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5400:	9c 85       	ldd	r25, Y+12	; 0x0c
    5402:	28 0f       	add	r18, r24
    5404:	39 1f       	adc	r19, r25
    5406:	2e 5f       	subi	r18, 0xFE	; 254
    5408:	3f 4f       	sbci	r19, 0xFF	; 255
    540a:	17 c0       	rjmp	.+46     	; 0x543a <__mulsf3+0x16e>
    540c:	ca 01       	movw	r24, r20
    540e:	81 70       	andi	r24, 0x01	; 1
    5410:	90 70       	andi	r25, 0x00	; 0
    5412:	89 2b       	or	r24, r25
    5414:	61 f0       	breq	.+24     	; 0x542e <__mulsf3+0x162>
    5416:	16 95       	lsr	r17
    5418:	07 95       	ror	r16
    541a:	f7 94       	ror	r15
    541c:	e7 94       	ror	r14
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	a0 e0       	ldi	r26, 0x00	; 0
    5424:	b0 e8       	ldi	r27, 0x80	; 128
    5426:	e8 2a       	or	r14, r24
    5428:	f9 2a       	or	r15, r25
    542a:	0a 2b       	or	r16, r26
    542c:	1b 2b       	or	r17, r27
    542e:	76 95       	lsr	r23
    5430:	67 95       	ror	r22
    5432:	57 95       	ror	r21
    5434:	47 95       	ror	r20
    5436:	2f 5f       	subi	r18, 0xFF	; 255
    5438:	3f 4f       	sbci	r19, 0xFF	; 255
    543a:	77 fd       	sbrc	r23, 7
    543c:	e7 cf       	rjmp	.-50     	; 0x540c <__mulsf3+0x140>
    543e:	0c c0       	rjmp	.+24     	; 0x5458 <__mulsf3+0x18c>
    5440:	44 0f       	add	r20, r20
    5442:	55 1f       	adc	r21, r21
    5444:	66 1f       	adc	r22, r22
    5446:	77 1f       	adc	r23, r23
    5448:	17 fd       	sbrc	r17, 7
    544a:	41 60       	ori	r20, 0x01	; 1
    544c:	ee 0c       	add	r14, r14
    544e:	ff 1c       	adc	r15, r15
    5450:	00 1f       	adc	r16, r16
    5452:	11 1f       	adc	r17, r17
    5454:	21 50       	subi	r18, 0x01	; 1
    5456:	30 40       	sbci	r19, 0x00	; 0
    5458:	40 30       	cpi	r20, 0x00	; 0
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	59 07       	cpc	r21, r25
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	69 07       	cpc	r22, r25
    5462:	90 e4       	ldi	r25, 0x40	; 64
    5464:	79 07       	cpc	r23, r25
    5466:	60 f3       	brcs	.-40     	; 0x5440 <__mulsf3+0x174>
    5468:	2b 8f       	std	Y+27, r18	; 0x1b
    546a:	3c 8f       	std	Y+28, r19	; 0x1c
    546c:	db 01       	movw	r26, r22
    546e:	ca 01       	movw	r24, r20
    5470:	8f 77       	andi	r24, 0x7F	; 127
    5472:	90 70       	andi	r25, 0x00	; 0
    5474:	a0 70       	andi	r26, 0x00	; 0
    5476:	b0 70       	andi	r27, 0x00	; 0
    5478:	80 34       	cpi	r24, 0x40	; 64
    547a:	91 05       	cpc	r25, r1
    547c:	a1 05       	cpc	r26, r1
    547e:	b1 05       	cpc	r27, r1
    5480:	61 f4       	brne	.+24     	; 0x549a <__mulsf3+0x1ce>
    5482:	47 fd       	sbrc	r20, 7
    5484:	0a c0       	rjmp	.+20     	; 0x549a <__mulsf3+0x1ce>
    5486:	e1 14       	cp	r14, r1
    5488:	f1 04       	cpc	r15, r1
    548a:	01 05       	cpc	r16, r1
    548c:	11 05       	cpc	r17, r1
    548e:	29 f0       	breq	.+10     	; 0x549a <__mulsf3+0x1ce>
    5490:	40 5c       	subi	r20, 0xC0	; 192
    5492:	5f 4f       	sbci	r21, 0xFF	; 255
    5494:	6f 4f       	sbci	r22, 0xFF	; 255
    5496:	7f 4f       	sbci	r23, 0xFF	; 255
    5498:	40 78       	andi	r20, 0x80	; 128
    549a:	1a 8e       	std	Y+26, r1	; 0x1a
    549c:	fe 17       	cp	r31, r30
    549e:	11 f0       	breq	.+4      	; 0x54a4 <__mulsf3+0x1d8>
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	8a 8f       	std	Y+26, r24	; 0x1a
    54a4:	4d 8f       	std	Y+29, r20	; 0x1d
    54a6:	5e 8f       	std	Y+30, r21	; 0x1e
    54a8:	6f 8f       	std	Y+31, r22	; 0x1f
    54aa:	78 a3       	std	Y+32, r23	; 0x20
    54ac:	83 e0       	ldi	r24, 0x03	; 3
    54ae:	89 8f       	std	Y+25, r24	; 0x19
    54b0:	ce 01       	movw	r24, r28
    54b2:	49 96       	adiw	r24, 0x19	; 25
    54b4:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__pack_f>
    54b8:	a0 96       	adiw	r28, 0x20	; 32
    54ba:	e2 e1       	ldi	r30, 0x12	; 18
    54bc:	0c 94 35 2e 	jmp	0x5c6a	; 0x5c6a <__epilogue_restores__>

000054c0 <__divsf3>:
    54c0:	a8 e1       	ldi	r26, 0x18	; 24
    54c2:	b0 e0       	ldi	r27, 0x00	; 0
    54c4:	e6 e6       	ldi	r30, 0x66	; 102
    54c6:	fa e2       	ldi	r31, 0x2A	; 42
    54c8:	0c 94 21 2e 	jmp	0x5c42	; 0x5c42 <__prologue_saves__+0x10>
    54cc:	69 83       	std	Y+1, r22	; 0x01
    54ce:	7a 83       	std	Y+2, r23	; 0x02
    54d0:	8b 83       	std	Y+3, r24	; 0x03
    54d2:	9c 83       	std	Y+4, r25	; 0x04
    54d4:	2d 83       	std	Y+5, r18	; 0x05
    54d6:	3e 83       	std	Y+6, r19	; 0x06
    54d8:	4f 83       	std	Y+7, r20	; 0x07
    54da:	58 87       	std	Y+8, r21	; 0x08
    54dc:	b9 e0       	ldi	r27, 0x09	; 9
    54de:	eb 2e       	mov	r14, r27
    54e0:	f1 2c       	mov	r15, r1
    54e2:	ec 0e       	add	r14, r28
    54e4:	fd 1e       	adc	r15, r29
    54e6:	ce 01       	movw	r24, r28
    54e8:	01 96       	adiw	r24, 0x01	; 1
    54ea:	b7 01       	movw	r22, r14
    54ec:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    54f0:	8e 01       	movw	r16, r28
    54f2:	0f 5e       	subi	r16, 0xEF	; 239
    54f4:	1f 4f       	sbci	r17, 0xFF	; 255
    54f6:	ce 01       	movw	r24, r28
    54f8:	05 96       	adiw	r24, 0x05	; 5
    54fa:	b8 01       	movw	r22, r16
    54fc:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5500:	29 85       	ldd	r18, Y+9	; 0x09
    5502:	22 30       	cpi	r18, 0x02	; 2
    5504:	08 f4       	brcc	.+2      	; 0x5508 <__divsf3+0x48>
    5506:	7e c0       	rjmp	.+252    	; 0x5604 <__divsf3+0x144>
    5508:	39 89       	ldd	r19, Y+17	; 0x11
    550a:	32 30       	cpi	r19, 0x02	; 2
    550c:	10 f4       	brcc	.+4      	; 0x5512 <__divsf3+0x52>
    550e:	b8 01       	movw	r22, r16
    5510:	7c c0       	rjmp	.+248    	; 0x560a <__divsf3+0x14a>
    5512:	8a 85       	ldd	r24, Y+10	; 0x0a
    5514:	9a 89       	ldd	r25, Y+18	; 0x12
    5516:	89 27       	eor	r24, r25
    5518:	8a 87       	std	Y+10, r24	; 0x0a
    551a:	24 30       	cpi	r18, 0x04	; 4
    551c:	11 f0       	breq	.+4      	; 0x5522 <__divsf3+0x62>
    551e:	22 30       	cpi	r18, 0x02	; 2
    5520:	31 f4       	brne	.+12     	; 0x552e <__divsf3+0x6e>
    5522:	23 17       	cp	r18, r19
    5524:	09 f0       	breq	.+2      	; 0x5528 <__divsf3+0x68>
    5526:	6e c0       	rjmp	.+220    	; 0x5604 <__divsf3+0x144>
    5528:	65 e5       	ldi	r22, 0x55	; 85
    552a:	70 e2       	ldi	r23, 0x20	; 32
    552c:	6e c0       	rjmp	.+220    	; 0x560a <__divsf3+0x14a>
    552e:	34 30       	cpi	r19, 0x04	; 4
    5530:	39 f4       	brne	.+14     	; 0x5540 <__divsf3+0x80>
    5532:	1d 86       	std	Y+13, r1	; 0x0d
    5534:	1e 86       	std	Y+14, r1	; 0x0e
    5536:	1f 86       	std	Y+15, r1	; 0x0f
    5538:	18 8a       	std	Y+16, r1	; 0x10
    553a:	1b 86       	std	Y+11, r1	; 0x0b
    553c:	1c 86       	std	Y+12, r1	; 0x0c
    553e:	04 c0       	rjmp	.+8      	; 0x5548 <__divsf3+0x88>
    5540:	32 30       	cpi	r19, 0x02	; 2
    5542:	21 f4       	brne	.+8      	; 0x554c <__divsf3+0x8c>
    5544:	84 e0       	ldi	r24, 0x04	; 4
    5546:	89 87       	std	Y+9, r24	; 0x09
    5548:	b7 01       	movw	r22, r14
    554a:	5f c0       	rjmp	.+190    	; 0x560a <__divsf3+0x14a>
    554c:	2b 85       	ldd	r18, Y+11	; 0x0b
    554e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5550:	8b 89       	ldd	r24, Y+19	; 0x13
    5552:	9c 89       	ldd	r25, Y+20	; 0x14
    5554:	28 1b       	sub	r18, r24
    5556:	39 0b       	sbc	r19, r25
    5558:	2b 87       	std	Y+11, r18	; 0x0b
    555a:	3c 87       	std	Y+12, r19	; 0x0c
    555c:	ed 84       	ldd	r14, Y+13	; 0x0d
    555e:	fe 84       	ldd	r15, Y+14	; 0x0e
    5560:	0f 85       	ldd	r16, Y+15	; 0x0f
    5562:	18 89       	ldd	r17, Y+16	; 0x10
    5564:	ad 88       	ldd	r10, Y+21	; 0x15
    5566:	be 88       	ldd	r11, Y+22	; 0x16
    5568:	cf 88       	ldd	r12, Y+23	; 0x17
    556a:	d8 8c       	ldd	r13, Y+24	; 0x18
    556c:	ea 14       	cp	r14, r10
    556e:	fb 04       	cpc	r15, r11
    5570:	0c 05       	cpc	r16, r12
    5572:	1d 05       	cpc	r17, r13
    5574:	40 f4       	brcc	.+16     	; 0x5586 <__divsf3+0xc6>
    5576:	ee 0c       	add	r14, r14
    5578:	ff 1c       	adc	r15, r15
    557a:	00 1f       	adc	r16, r16
    557c:	11 1f       	adc	r17, r17
    557e:	21 50       	subi	r18, 0x01	; 1
    5580:	30 40       	sbci	r19, 0x00	; 0
    5582:	2b 87       	std	Y+11, r18	; 0x0b
    5584:	3c 87       	std	Y+12, r19	; 0x0c
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 e0       	ldi	r20, 0x00	; 0
    558c:	50 e0       	ldi	r21, 0x00	; 0
    558e:	80 e0       	ldi	r24, 0x00	; 0
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	a0 e0       	ldi	r26, 0x00	; 0
    5594:	b0 e4       	ldi	r27, 0x40	; 64
    5596:	60 e0       	ldi	r22, 0x00	; 0
    5598:	70 e0       	ldi	r23, 0x00	; 0
    559a:	ea 14       	cp	r14, r10
    559c:	fb 04       	cpc	r15, r11
    559e:	0c 05       	cpc	r16, r12
    55a0:	1d 05       	cpc	r17, r13
    55a2:	40 f0       	brcs	.+16     	; 0x55b4 <__divsf3+0xf4>
    55a4:	28 2b       	or	r18, r24
    55a6:	39 2b       	or	r19, r25
    55a8:	4a 2b       	or	r20, r26
    55aa:	5b 2b       	or	r21, r27
    55ac:	ea 18       	sub	r14, r10
    55ae:	fb 08       	sbc	r15, r11
    55b0:	0c 09       	sbc	r16, r12
    55b2:	1d 09       	sbc	r17, r13
    55b4:	b6 95       	lsr	r27
    55b6:	a7 95       	ror	r26
    55b8:	97 95       	ror	r25
    55ba:	87 95       	ror	r24
    55bc:	ee 0c       	add	r14, r14
    55be:	ff 1c       	adc	r15, r15
    55c0:	00 1f       	adc	r16, r16
    55c2:	11 1f       	adc	r17, r17
    55c4:	6f 5f       	subi	r22, 0xFF	; 255
    55c6:	7f 4f       	sbci	r23, 0xFF	; 255
    55c8:	6f 31       	cpi	r22, 0x1F	; 31
    55ca:	71 05       	cpc	r23, r1
    55cc:	31 f7       	brne	.-52     	; 0x559a <__divsf3+0xda>
    55ce:	da 01       	movw	r26, r20
    55d0:	c9 01       	movw	r24, r18
    55d2:	8f 77       	andi	r24, 0x7F	; 127
    55d4:	90 70       	andi	r25, 0x00	; 0
    55d6:	a0 70       	andi	r26, 0x00	; 0
    55d8:	b0 70       	andi	r27, 0x00	; 0
    55da:	80 34       	cpi	r24, 0x40	; 64
    55dc:	91 05       	cpc	r25, r1
    55de:	a1 05       	cpc	r26, r1
    55e0:	b1 05       	cpc	r27, r1
    55e2:	61 f4       	brne	.+24     	; 0x55fc <__divsf3+0x13c>
    55e4:	27 fd       	sbrc	r18, 7
    55e6:	0a c0       	rjmp	.+20     	; 0x55fc <__divsf3+0x13c>
    55e8:	e1 14       	cp	r14, r1
    55ea:	f1 04       	cpc	r15, r1
    55ec:	01 05       	cpc	r16, r1
    55ee:	11 05       	cpc	r17, r1
    55f0:	29 f0       	breq	.+10     	; 0x55fc <__divsf3+0x13c>
    55f2:	20 5c       	subi	r18, 0xC0	; 192
    55f4:	3f 4f       	sbci	r19, 0xFF	; 255
    55f6:	4f 4f       	sbci	r20, 0xFF	; 255
    55f8:	5f 4f       	sbci	r21, 0xFF	; 255
    55fa:	20 78       	andi	r18, 0x80	; 128
    55fc:	2d 87       	std	Y+13, r18	; 0x0d
    55fe:	3e 87       	std	Y+14, r19	; 0x0e
    5600:	4f 87       	std	Y+15, r20	; 0x0f
    5602:	58 8b       	std	Y+16, r21	; 0x10
    5604:	be 01       	movw	r22, r28
    5606:	67 5f       	subi	r22, 0xF7	; 247
    5608:	7f 4f       	sbci	r23, 0xFF	; 255
    560a:	cb 01       	movw	r24, r22
    560c:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <__pack_f>
    5610:	68 96       	adiw	r28, 0x18	; 24
    5612:	ea e0       	ldi	r30, 0x0A	; 10
    5614:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__epilogue_restores__+0x10>

00005618 <__gtsf2>:
    5618:	a8 e1       	ldi	r26, 0x18	; 24
    561a:	b0 e0       	ldi	r27, 0x00	; 0
    561c:	e2 e1       	ldi	r30, 0x12	; 18
    561e:	fb e2       	ldi	r31, 0x2B	; 43
    5620:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
    5624:	69 83       	std	Y+1, r22	; 0x01
    5626:	7a 83       	std	Y+2, r23	; 0x02
    5628:	8b 83       	std	Y+3, r24	; 0x03
    562a:	9c 83       	std	Y+4, r25	; 0x04
    562c:	2d 83       	std	Y+5, r18	; 0x05
    562e:	3e 83       	std	Y+6, r19	; 0x06
    5630:	4f 83       	std	Y+7, r20	; 0x07
    5632:	58 87       	std	Y+8, r21	; 0x08
    5634:	89 e0       	ldi	r24, 0x09	; 9
    5636:	e8 2e       	mov	r14, r24
    5638:	f1 2c       	mov	r15, r1
    563a:	ec 0e       	add	r14, r28
    563c:	fd 1e       	adc	r15, r29
    563e:	ce 01       	movw	r24, r28
    5640:	01 96       	adiw	r24, 0x01	; 1
    5642:	b7 01       	movw	r22, r14
    5644:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5648:	8e 01       	movw	r16, r28
    564a:	0f 5e       	subi	r16, 0xEF	; 239
    564c:	1f 4f       	sbci	r17, 0xFF	; 255
    564e:	ce 01       	movw	r24, r28
    5650:	05 96       	adiw	r24, 0x05	; 5
    5652:	b8 01       	movw	r22, r16
    5654:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5658:	89 85       	ldd	r24, Y+9	; 0x09
    565a:	82 30       	cpi	r24, 0x02	; 2
    565c:	40 f0       	brcs	.+16     	; 0x566e <__gtsf2+0x56>
    565e:	89 89       	ldd	r24, Y+17	; 0x11
    5660:	82 30       	cpi	r24, 0x02	; 2
    5662:	28 f0       	brcs	.+10     	; 0x566e <__gtsf2+0x56>
    5664:	c7 01       	movw	r24, r14
    5666:	b8 01       	movw	r22, r16
    5668:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fpcmp_parts_f>
    566c:	01 c0       	rjmp	.+2      	; 0x5670 <__gtsf2+0x58>
    566e:	8f ef       	ldi	r24, 0xFF	; 255
    5670:	68 96       	adiw	r28, 0x18	; 24
    5672:	e6 e0       	ldi	r30, 0x06	; 6
    5674:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

00005678 <__gesf2>:
    5678:	a8 e1       	ldi	r26, 0x18	; 24
    567a:	b0 e0       	ldi	r27, 0x00	; 0
    567c:	e2 e4       	ldi	r30, 0x42	; 66
    567e:	fb e2       	ldi	r31, 0x2B	; 43
    5680:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
    5684:	69 83       	std	Y+1, r22	; 0x01
    5686:	7a 83       	std	Y+2, r23	; 0x02
    5688:	8b 83       	std	Y+3, r24	; 0x03
    568a:	9c 83       	std	Y+4, r25	; 0x04
    568c:	2d 83       	std	Y+5, r18	; 0x05
    568e:	3e 83       	std	Y+6, r19	; 0x06
    5690:	4f 83       	std	Y+7, r20	; 0x07
    5692:	58 87       	std	Y+8, r21	; 0x08
    5694:	89 e0       	ldi	r24, 0x09	; 9
    5696:	e8 2e       	mov	r14, r24
    5698:	f1 2c       	mov	r15, r1
    569a:	ec 0e       	add	r14, r28
    569c:	fd 1e       	adc	r15, r29
    569e:	ce 01       	movw	r24, r28
    56a0:	01 96       	adiw	r24, 0x01	; 1
    56a2:	b7 01       	movw	r22, r14
    56a4:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    56a8:	8e 01       	movw	r16, r28
    56aa:	0f 5e       	subi	r16, 0xEF	; 239
    56ac:	1f 4f       	sbci	r17, 0xFF	; 255
    56ae:	ce 01       	movw	r24, r28
    56b0:	05 96       	adiw	r24, 0x05	; 5
    56b2:	b8 01       	movw	r22, r16
    56b4:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    56b8:	89 85       	ldd	r24, Y+9	; 0x09
    56ba:	82 30       	cpi	r24, 0x02	; 2
    56bc:	40 f0       	brcs	.+16     	; 0x56ce <__gesf2+0x56>
    56be:	89 89       	ldd	r24, Y+17	; 0x11
    56c0:	82 30       	cpi	r24, 0x02	; 2
    56c2:	28 f0       	brcs	.+10     	; 0x56ce <__gesf2+0x56>
    56c4:	c7 01       	movw	r24, r14
    56c6:	b8 01       	movw	r22, r16
    56c8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fpcmp_parts_f>
    56cc:	01 c0       	rjmp	.+2      	; 0x56d0 <__gesf2+0x58>
    56ce:	8f ef       	ldi	r24, 0xFF	; 255
    56d0:	68 96       	adiw	r28, 0x18	; 24
    56d2:	e6 e0       	ldi	r30, 0x06	; 6
    56d4:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

000056d8 <__ltsf2>:
    56d8:	a8 e1       	ldi	r26, 0x18	; 24
    56da:	b0 e0       	ldi	r27, 0x00	; 0
    56dc:	e2 e7       	ldi	r30, 0x72	; 114
    56de:	fb e2       	ldi	r31, 0x2B	; 43
    56e0:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__prologue_saves__+0x18>
    56e4:	69 83       	std	Y+1, r22	; 0x01
    56e6:	7a 83       	std	Y+2, r23	; 0x02
    56e8:	8b 83       	std	Y+3, r24	; 0x03
    56ea:	9c 83       	std	Y+4, r25	; 0x04
    56ec:	2d 83       	std	Y+5, r18	; 0x05
    56ee:	3e 83       	std	Y+6, r19	; 0x06
    56f0:	4f 83       	std	Y+7, r20	; 0x07
    56f2:	58 87       	std	Y+8, r21	; 0x08
    56f4:	89 e0       	ldi	r24, 0x09	; 9
    56f6:	e8 2e       	mov	r14, r24
    56f8:	f1 2c       	mov	r15, r1
    56fa:	ec 0e       	add	r14, r28
    56fc:	fd 1e       	adc	r15, r29
    56fe:	ce 01       	movw	r24, r28
    5700:	01 96       	adiw	r24, 0x01	; 1
    5702:	b7 01       	movw	r22, r14
    5704:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5708:	8e 01       	movw	r16, r28
    570a:	0f 5e       	subi	r16, 0xEF	; 239
    570c:	1f 4f       	sbci	r17, 0xFF	; 255
    570e:	ce 01       	movw	r24, r28
    5710:	05 96       	adiw	r24, 0x05	; 5
    5712:	b8 01       	movw	r22, r16
    5714:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    5718:	89 85       	ldd	r24, Y+9	; 0x09
    571a:	82 30       	cpi	r24, 0x02	; 2
    571c:	40 f0       	brcs	.+16     	; 0x572e <__ltsf2+0x56>
    571e:	89 89       	ldd	r24, Y+17	; 0x11
    5720:	82 30       	cpi	r24, 0x02	; 2
    5722:	28 f0       	brcs	.+10     	; 0x572e <__ltsf2+0x56>
    5724:	c7 01       	movw	r24, r14
    5726:	b8 01       	movw	r22, r16
    5728:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fpcmp_parts_f>
    572c:	01 c0       	rjmp	.+2      	; 0x5730 <__ltsf2+0x58>
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	68 96       	adiw	r28, 0x18	; 24
    5732:	e6 e0       	ldi	r30, 0x06	; 6
    5734:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__epilogue_restores__+0x18>

00005738 <__fixsfsi>:
    5738:	ac e0       	ldi	r26, 0x0C	; 12
    573a:	b0 e0       	ldi	r27, 0x00	; 0
    573c:	e2 ea       	ldi	r30, 0xA2	; 162
    573e:	fb e2       	ldi	r31, 0x2B	; 43
    5740:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__prologue_saves__+0x20>
    5744:	69 83       	std	Y+1, r22	; 0x01
    5746:	7a 83       	std	Y+2, r23	; 0x02
    5748:	8b 83       	std	Y+3, r24	; 0x03
    574a:	9c 83       	std	Y+4, r25	; 0x04
    574c:	ce 01       	movw	r24, r28
    574e:	01 96       	adiw	r24, 0x01	; 1
    5750:	be 01       	movw	r22, r28
    5752:	6b 5f       	subi	r22, 0xFB	; 251
    5754:	7f 4f       	sbci	r23, 0xFF	; 255
    5756:	0e 94 c5 2c 	call	0x598a	; 0x598a <__unpack_f>
    575a:	8d 81       	ldd	r24, Y+5	; 0x05
    575c:	82 30       	cpi	r24, 0x02	; 2
    575e:	61 f1       	breq	.+88     	; 0x57b8 <__fixsfsi+0x80>
    5760:	82 30       	cpi	r24, 0x02	; 2
    5762:	50 f1       	brcs	.+84     	; 0x57b8 <__fixsfsi+0x80>
    5764:	84 30       	cpi	r24, 0x04	; 4
    5766:	21 f4       	brne	.+8      	; 0x5770 <__fixsfsi+0x38>
    5768:	8e 81       	ldd	r24, Y+6	; 0x06
    576a:	88 23       	and	r24, r24
    576c:	51 f1       	breq	.+84     	; 0x57c2 <__fixsfsi+0x8a>
    576e:	2e c0       	rjmp	.+92     	; 0x57cc <__fixsfsi+0x94>
    5770:	2f 81       	ldd	r18, Y+7	; 0x07
    5772:	38 85       	ldd	r19, Y+8	; 0x08
    5774:	37 fd       	sbrc	r19, 7
    5776:	20 c0       	rjmp	.+64     	; 0x57b8 <__fixsfsi+0x80>
    5778:	6e 81       	ldd	r22, Y+6	; 0x06
    577a:	2f 31       	cpi	r18, 0x1F	; 31
    577c:	31 05       	cpc	r19, r1
    577e:	1c f0       	brlt	.+6      	; 0x5786 <__fixsfsi+0x4e>
    5780:	66 23       	and	r22, r22
    5782:	f9 f0       	breq	.+62     	; 0x57c2 <__fixsfsi+0x8a>
    5784:	23 c0       	rjmp	.+70     	; 0x57cc <__fixsfsi+0x94>
    5786:	8e e1       	ldi	r24, 0x1E	; 30
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	82 1b       	sub	r24, r18
    578c:	93 0b       	sbc	r25, r19
    578e:	29 85       	ldd	r18, Y+9	; 0x09
    5790:	3a 85       	ldd	r19, Y+10	; 0x0a
    5792:	4b 85       	ldd	r20, Y+11	; 0x0b
    5794:	5c 85       	ldd	r21, Y+12	; 0x0c
    5796:	04 c0       	rjmp	.+8      	; 0x57a0 <__fixsfsi+0x68>
    5798:	56 95       	lsr	r21
    579a:	47 95       	ror	r20
    579c:	37 95       	ror	r19
    579e:	27 95       	ror	r18
    57a0:	8a 95       	dec	r24
    57a2:	d2 f7       	brpl	.-12     	; 0x5798 <__fixsfsi+0x60>
    57a4:	66 23       	and	r22, r22
    57a6:	b1 f0       	breq	.+44     	; 0x57d4 <__fixsfsi+0x9c>
    57a8:	50 95       	com	r21
    57aa:	40 95       	com	r20
    57ac:	30 95       	com	r19
    57ae:	21 95       	neg	r18
    57b0:	3f 4f       	sbci	r19, 0xFF	; 255
    57b2:	4f 4f       	sbci	r20, 0xFF	; 255
    57b4:	5f 4f       	sbci	r21, 0xFF	; 255
    57b6:	0e c0       	rjmp	.+28     	; 0x57d4 <__fixsfsi+0x9c>
    57b8:	20 e0       	ldi	r18, 0x00	; 0
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	40 e0       	ldi	r20, 0x00	; 0
    57be:	50 e0       	ldi	r21, 0x00	; 0
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <__fixsfsi+0x9c>
    57c2:	2f ef       	ldi	r18, 0xFF	; 255
    57c4:	3f ef       	ldi	r19, 0xFF	; 255
    57c6:	4f ef       	ldi	r20, 0xFF	; 255
    57c8:	5f e7       	ldi	r21, 0x7F	; 127
    57ca:	04 c0       	rjmp	.+8      	; 0x57d4 <__fixsfsi+0x9c>
    57cc:	20 e0       	ldi	r18, 0x00	; 0
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	40 e0       	ldi	r20, 0x00	; 0
    57d2:	50 e8       	ldi	r21, 0x80	; 128
    57d4:	b9 01       	movw	r22, r18
    57d6:	ca 01       	movw	r24, r20
    57d8:	2c 96       	adiw	r28, 0x0c	; 12
    57da:	e2 e0       	ldi	r30, 0x02	; 2
    57dc:	0c 94 45 2e 	jmp	0x5c8a	; 0x5c8a <__epilogue_restores__+0x20>

000057e0 <__pack_f>:
    57e0:	df 92       	push	r13
    57e2:	ef 92       	push	r14
    57e4:	ff 92       	push	r15
    57e6:	0f 93       	push	r16
    57e8:	1f 93       	push	r17
    57ea:	fc 01       	movw	r30, r24
    57ec:	e4 80       	ldd	r14, Z+4	; 0x04
    57ee:	f5 80       	ldd	r15, Z+5	; 0x05
    57f0:	06 81       	ldd	r16, Z+6	; 0x06
    57f2:	17 81       	ldd	r17, Z+7	; 0x07
    57f4:	d1 80       	ldd	r13, Z+1	; 0x01
    57f6:	80 81       	ld	r24, Z
    57f8:	82 30       	cpi	r24, 0x02	; 2
    57fa:	48 f4       	brcc	.+18     	; 0x580e <__pack_f+0x2e>
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	a0 e1       	ldi	r26, 0x10	; 16
    5802:	b0 e0       	ldi	r27, 0x00	; 0
    5804:	e8 2a       	or	r14, r24
    5806:	f9 2a       	or	r15, r25
    5808:	0a 2b       	or	r16, r26
    580a:	1b 2b       	or	r17, r27
    580c:	a5 c0       	rjmp	.+330    	; 0x5958 <__pack_f+0x178>
    580e:	84 30       	cpi	r24, 0x04	; 4
    5810:	09 f4       	brne	.+2      	; 0x5814 <__pack_f+0x34>
    5812:	9f c0       	rjmp	.+318    	; 0x5952 <__pack_f+0x172>
    5814:	82 30       	cpi	r24, 0x02	; 2
    5816:	21 f4       	brne	.+8      	; 0x5820 <__pack_f+0x40>
    5818:	ee 24       	eor	r14, r14
    581a:	ff 24       	eor	r15, r15
    581c:	87 01       	movw	r16, r14
    581e:	05 c0       	rjmp	.+10     	; 0x582a <__pack_f+0x4a>
    5820:	e1 14       	cp	r14, r1
    5822:	f1 04       	cpc	r15, r1
    5824:	01 05       	cpc	r16, r1
    5826:	11 05       	cpc	r17, r1
    5828:	19 f4       	brne	.+6      	; 0x5830 <__pack_f+0x50>
    582a:	e0 e0       	ldi	r30, 0x00	; 0
    582c:	f0 e0       	ldi	r31, 0x00	; 0
    582e:	96 c0       	rjmp	.+300    	; 0x595c <__pack_f+0x17c>
    5830:	62 81       	ldd	r22, Z+2	; 0x02
    5832:	73 81       	ldd	r23, Z+3	; 0x03
    5834:	9f ef       	ldi	r25, 0xFF	; 255
    5836:	62 38       	cpi	r22, 0x82	; 130
    5838:	79 07       	cpc	r23, r25
    583a:	0c f0       	brlt	.+2      	; 0x583e <__pack_f+0x5e>
    583c:	5b c0       	rjmp	.+182    	; 0x58f4 <__pack_f+0x114>
    583e:	22 e8       	ldi	r18, 0x82	; 130
    5840:	3f ef       	ldi	r19, 0xFF	; 255
    5842:	26 1b       	sub	r18, r22
    5844:	37 0b       	sbc	r19, r23
    5846:	2a 31       	cpi	r18, 0x1A	; 26
    5848:	31 05       	cpc	r19, r1
    584a:	2c f0       	brlt	.+10     	; 0x5856 <__pack_f+0x76>
    584c:	20 e0       	ldi	r18, 0x00	; 0
    584e:	30 e0       	ldi	r19, 0x00	; 0
    5850:	40 e0       	ldi	r20, 0x00	; 0
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	2a c0       	rjmp	.+84     	; 0x58aa <__pack_f+0xca>
    5856:	b8 01       	movw	r22, r16
    5858:	a7 01       	movw	r20, r14
    585a:	02 2e       	mov	r0, r18
    585c:	04 c0       	rjmp	.+8      	; 0x5866 <__pack_f+0x86>
    585e:	76 95       	lsr	r23
    5860:	67 95       	ror	r22
    5862:	57 95       	ror	r21
    5864:	47 95       	ror	r20
    5866:	0a 94       	dec	r0
    5868:	d2 f7       	brpl	.-12     	; 0x585e <__pack_f+0x7e>
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	a0 e0       	ldi	r26, 0x00	; 0
    5870:	b0 e0       	ldi	r27, 0x00	; 0
    5872:	04 c0       	rjmp	.+8      	; 0x587c <__pack_f+0x9c>
    5874:	88 0f       	add	r24, r24
    5876:	99 1f       	adc	r25, r25
    5878:	aa 1f       	adc	r26, r26
    587a:	bb 1f       	adc	r27, r27
    587c:	2a 95       	dec	r18
    587e:	d2 f7       	brpl	.-12     	; 0x5874 <__pack_f+0x94>
    5880:	01 97       	sbiw	r24, 0x01	; 1
    5882:	a1 09       	sbc	r26, r1
    5884:	b1 09       	sbc	r27, r1
    5886:	8e 21       	and	r24, r14
    5888:	9f 21       	and	r25, r15
    588a:	a0 23       	and	r26, r16
    588c:	b1 23       	and	r27, r17
    588e:	00 97       	sbiw	r24, 0x00	; 0
    5890:	a1 05       	cpc	r26, r1
    5892:	b1 05       	cpc	r27, r1
    5894:	21 f0       	breq	.+8      	; 0x589e <__pack_f+0xbe>
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	a0 e0       	ldi	r26, 0x00	; 0
    589c:	b0 e0       	ldi	r27, 0x00	; 0
    589e:	9a 01       	movw	r18, r20
    58a0:	ab 01       	movw	r20, r22
    58a2:	28 2b       	or	r18, r24
    58a4:	39 2b       	or	r19, r25
    58a6:	4a 2b       	or	r20, r26
    58a8:	5b 2b       	or	r21, r27
    58aa:	da 01       	movw	r26, r20
    58ac:	c9 01       	movw	r24, r18
    58ae:	8f 77       	andi	r24, 0x7F	; 127
    58b0:	90 70       	andi	r25, 0x00	; 0
    58b2:	a0 70       	andi	r26, 0x00	; 0
    58b4:	b0 70       	andi	r27, 0x00	; 0
    58b6:	80 34       	cpi	r24, 0x40	; 64
    58b8:	91 05       	cpc	r25, r1
    58ba:	a1 05       	cpc	r26, r1
    58bc:	b1 05       	cpc	r27, r1
    58be:	39 f4       	brne	.+14     	; 0x58ce <__pack_f+0xee>
    58c0:	27 ff       	sbrs	r18, 7
    58c2:	09 c0       	rjmp	.+18     	; 0x58d6 <__pack_f+0xf6>
    58c4:	20 5c       	subi	r18, 0xC0	; 192
    58c6:	3f 4f       	sbci	r19, 0xFF	; 255
    58c8:	4f 4f       	sbci	r20, 0xFF	; 255
    58ca:	5f 4f       	sbci	r21, 0xFF	; 255
    58cc:	04 c0       	rjmp	.+8      	; 0x58d6 <__pack_f+0xf6>
    58ce:	21 5c       	subi	r18, 0xC1	; 193
    58d0:	3f 4f       	sbci	r19, 0xFF	; 255
    58d2:	4f 4f       	sbci	r20, 0xFF	; 255
    58d4:	5f 4f       	sbci	r21, 0xFF	; 255
    58d6:	e0 e0       	ldi	r30, 0x00	; 0
    58d8:	f0 e0       	ldi	r31, 0x00	; 0
    58da:	20 30       	cpi	r18, 0x00	; 0
    58dc:	a0 e0       	ldi	r26, 0x00	; 0
    58de:	3a 07       	cpc	r19, r26
    58e0:	a0 e0       	ldi	r26, 0x00	; 0
    58e2:	4a 07       	cpc	r20, r26
    58e4:	a0 e4       	ldi	r26, 0x40	; 64
    58e6:	5a 07       	cpc	r21, r26
    58e8:	10 f0       	brcs	.+4      	; 0x58ee <__pack_f+0x10e>
    58ea:	e1 e0       	ldi	r30, 0x01	; 1
    58ec:	f0 e0       	ldi	r31, 0x00	; 0
    58ee:	79 01       	movw	r14, r18
    58f0:	8a 01       	movw	r16, r20
    58f2:	27 c0       	rjmp	.+78     	; 0x5942 <__pack_f+0x162>
    58f4:	60 38       	cpi	r22, 0x80	; 128
    58f6:	71 05       	cpc	r23, r1
    58f8:	64 f5       	brge	.+88     	; 0x5952 <__pack_f+0x172>
    58fa:	fb 01       	movw	r30, r22
    58fc:	e1 58       	subi	r30, 0x81	; 129
    58fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5900:	d8 01       	movw	r26, r16
    5902:	c7 01       	movw	r24, r14
    5904:	8f 77       	andi	r24, 0x7F	; 127
    5906:	90 70       	andi	r25, 0x00	; 0
    5908:	a0 70       	andi	r26, 0x00	; 0
    590a:	b0 70       	andi	r27, 0x00	; 0
    590c:	80 34       	cpi	r24, 0x40	; 64
    590e:	91 05       	cpc	r25, r1
    5910:	a1 05       	cpc	r26, r1
    5912:	b1 05       	cpc	r27, r1
    5914:	39 f4       	brne	.+14     	; 0x5924 <__pack_f+0x144>
    5916:	e7 fe       	sbrs	r14, 7
    5918:	0d c0       	rjmp	.+26     	; 0x5934 <__pack_f+0x154>
    591a:	80 e4       	ldi	r24, 0x40	; 64
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	a0 e0       	ldi	r26, 0x00	; 0
    5920:	b0 e0       	ldi	r27, 0x00	; 0
    5922:	04 c0       	rjmp	.+8      	; 0x592c <__pack_f+0x14c>
    5924:	8f e3       	ldi	r24, 0x3F	; 63
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	a0 e0       	ldi	r26, 0x00	; 0
    592a:	b0 e0       	ldi	r27, 0x00	; 0
    592c:	e8 0e       	add	r14, r24
    592e:	f9 1e       	adc	r15, r25
    5930:	0a 1f       	adc	r16, r26
    5932:	1b 1f       	adc	r17, r27
    5934:	17 ff       	sbrs	r17, 7
    5936:	05 c0       	rjmp	.+10     	; 0x5942 <__pack_f+0x162>
    5938:	16 95       	lsr	r17
    593a:	07 95       	ror	r16
    593c:	f7 94       	ror	r15
    593e:	e7 94       	ror	r14
    5940:	31 96       	adiw	r30, 0x01	; 1
    5942:	87 e0       	ldi	r24, 0x07	; 7
    5944:	16 95       	lsr	r17
    5946:	07 95       	ror	r16
    5948:	f7 94       	ror	r15
    594a:	e7 94       	ror	r14
    594c:	8a 95       	dec	r24
    594e:	d1 f7       	brne	.-12     	; 0x5944 <__pack_f+0x164>
    5950:	05 c0       	rjmp	.+10     	; 0x595c <__pack_f+0x17c>
    5952:	ee 24       	eor	r14, r14
    5954:	ff 24       	eor	r15, r15
    5956:	87 01       	movw	r16, r14
    5958:	ef ef       	ldi	r30, 0xFF	; 255
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	6e 2f       	mov	r22, r30
    595e:	67 95       	ror	r22
    5960:	66 27       	eor	r22, r22
    5962:	67 95       	ror	r22
    5964:	90 2f       	mov	r25, r16
    5966:	9f 77       	andi	r25, 0x7F	; 127
    5968:	d7 94       	ror	r13
    596a:	dd 24       	eor	r13, r13
    596c:	d7 94       	ror	r13
    596e:	8e 2f       	mov	r24, r30
    5970:	86 95       	lsr	r24
    5972:	49 2f       	mov	r20, r25
    5974:	46 2b       	or	r20, r22
    5976:	58 2f       	mov	r21, r24
    5978:	5d 29       	or	r21, r13
    597a:	b7 01       	movw	r22, r14
    597c:	ca 01       	movw	r24, r20
    597e:	1f 91       	pop	r17
    5980:	0f 91       	pop	r16
    5982:	ff 90       	pop	r15
    5984:	ef 90       	pop	r14
    5986:	df 90       	pop	r13
    5988:	08 95       	ret

0000598a <__unpack_f>:
    598a:	fc 01       	movw	r30, r24
    598c:	db 01       	movw	r26, r22
    598e:	40 81       	ld	r20, Z
    5990:	51 81       	ldd	r21, Z+1	; 0x01
    5992:	22 81       	ldd	r18, Z+2	; 0x02
    5994:	62 2f       	mov	r22, r18
    5996:	6f 77       	andi	r22, 0x7F	; 127
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	22 1f       	adc	r18, r18
    599c:	22 27       	eor	r18, r18
    599e:	22 1f       	adc	r18, r18
    59a0:	93 81       	ldd	r25, Z+3	; 0x03
    59a2:	89 2f       	mov	r24, r25
    59a4:	88 0f       	add	r24, r24
    59a6:	82 2b       	or	r24, r18
    59a8:	28 2f       	mov	r18, r24
    59aa:	30 e0       	ldi	r19, 0x00	; 0
    59ac:	99 1f       	adc	r25, r25
    59ae:	99 27       	eor	r25, r25
    59b0:	99 1f       	adc	r25, r25
    59b2:	11 96       	adiw	r26, 0x01	; 1
    59b4:	9c 93       	st	X, r25
    59b6:	11 97       	sbiw	r26, 0x01	; 1
    59b8:	21 15       	cp	r18, r1
    59ba:	31 05       	cpc	r19, r1
    59bc:	a9 f5       	brne	.+106    	; 0x5a28 <__unpack_f+0x9e>
    59be:	41 15       	cp	r20, r1
    59c0:	51 05       	cpc	r21, r1
    59c2:	61 05       	cpc	r22, r1
    59c4:	71 05       	cpc	r23, r1
    59c6:	11 f4       	brne	.+4      	; 0x59cc <__unpack_f+0x42>
    59c8:	82 e0       	ldi	r24, 0x02	; 2
    59ca:	37 c0       	rjmp	.+110    	; 0x5a3a <__unpack_f+0xb0>
    59cc:	82 e8       	ldi	r24, 0x82	; 130
    59ce:	9f ef       	ldi	r25, 0xFF	; 255
    59d0:	12 96       	adiw	r26, 0x02	; 2
    59d2:	8d 93       	st	X+, r24
    59d4:	9c 93       	st	X, r25
    59d6:	13 97       	sbiw	r26, 0x03	; 3
    59d8:	9a 01       	movw	r18, r20
    59da:	ab 01       	movw	r20, r22
    59dc:	67 e0       	ldi	r22, 0x07	; 7
    59de:	22 0f       	add	r18, r18
    59e0:	33 1f       	adc	r19, r19
    59e2:	44 1f       	adc	r20, r20
    59e4:	55 1f       	adc	r21, r21
    59e6:	6a 95       	dec	r22
    59e8:	d1 f7       	brne	.-12     	; 0x59de <__unpack_f+0x54>
    59ea:	83 e0       	ldi	r24, 0x03	; 3
    59ec:	8c 93       	st	X, r24
    59ee:	0d c0       	rjmp	.+26     	; 0x5a0a <__unpack_f+0x80>
    59f0:	22 0f       	add	r18, r18
    59f2:	33 1f       	adc	r19, r19
    59f4:	44 1f       	adc	r20, r20
    59f6:	55 1f       	adc	r21, r21
    59f8:	12 96       	adiw	r26, 0x02	; 2
    59fa:	8d 91       	ld	r24, X+
    59fc:	9c 91       	ld	r25, X
    59fe:	13 97       	sbiw	r26, 0x03	; 3
    5a00:	01 97       	sbiw	r24, 0x01	; 1
    5a02:	12 96       	adiw	r26, 0x02	; 2
    5a04:	8d 93       	st	X+, r24
    5a06:	9c 93       	st	X, r25
    5a08:	13 97       	sbiw	r26, 0x03	; 3
    5a0a:	20 30       	cpi	r18, 0x00	; 0
    5a0c:	80 e0       	ldi	r24, 0x00	; 0
    5a0e:	38 07       	cpc	r19, r24
    5a10:	80 e0       	ldi	r24, 0x00	; 0
    5a12:	48 07       	cpc	r20, r24
    5a14:	80 e4       	ldi	r24, 0x40	; 64
    5a16:	58 07       	cpc	r21, r24
    5a18:	58 f3       	brcs	.-42     	; 0x59f0 <__unpack_f+0x66>
    5a1a:	14 96       	adiw	r26, 0x04	; 4
    5a1c:	2d 93       	st	X+, r18
    5a1e:	3d 93       	st	X+, r19
    5a20:	4d 93       	st	X+, r20
    5a22:	5c 93       	st	X, r21
    5a24:	17 97       	sbiw	r26, 0x07	; 7
    5a26:	08 95       	ret
    5a28:	2f 3f       	cpi	r18, 0xFF	; 255
    5a2a:	31 05       	cpc	r19, r1
    5a2c:	79 f4       	brne	.+30     	; 0x5a4c <__unpack_f+0xc2>
    5a2e:	41 15       	cp	r20, r1
    5a30:	51 05       	cpc	r21, r1
    5a32:	61 05       	cpc	r22, r1
    5a34:	71 05       	cpc	r23, r1
    5a36:	19 f4       	brne	.+6      	; 0x5a3e <__unpack_f+0xb4>
    5a38:	84 e0       	ldi	r24, 0x04	; 4
    5a3a:	8c 93       	st	X, r24
    5a3c:	08 95       	ret
    5a3e:	64 ff       	sbrs	r22, 4
    5a40:	03 c0       	rjmp	.+6      	; 0x5a48 <__unpack_f+0xbe>
    5a42:	81 e0       	ldi	r24, 0x01	; 1
    5a44:	8c 93       	st	X, r24
    5a46:	12 c0       	rjmp	.+36     	; 0x5a6c <__unpack_f+0xe2>
    5a48:	1c 92       	st	X, r1
    5a4a:	10 c0       	rjmp	.+32     	; 0x5a6c <__unpack_f+0xe2>
    5a4c:	2f 57       	subi	r18, 0x7F	; 127
    5a4e:	30 40       	sbci	r19, 0x00	; 0
    5a50:	12 96       	adiw	r26, 0x02	; 2
    5a52:	2d 93       	st	X+, r18
    5a54:	3c 93       	st	X, r19
    5a56:	13 97       	sbiw	r26, 0x03	; 3
    5a58:	83 e0       	ldi	r24, 0x03	; 3
    5a5a:	8c 93       	st	X, r24
    5a5c:	87 e0       	ldi	r24, 0x07	; 7
    5a5e:	44 0f       	add	r20, r20
    5a60:	55 1f       	adc	r21, r21
    5a62:	66 1f       	adc	r22, r22
    5a64:	77 1f       	adc	r23, r23
    5a66:	8a 95       	dec	r24
    5a68:	d1 f7       	brne	.-12     	; 0x5a5e <__unpack_f+0xd4>
    5a6a:	70 64       	ori	r23, 0x40	; 64
    5a6c:	14 96       	adiw	r26, 0x04	; 4
    5a6e:	4d 93       	st	X+, r20
    5a70:	5d 93       	st	X+, r21
    5a72:	6d 93       	st	X+, r22
    5a74:	7c 93       	st	X, r23
    5a76:	17 97       	sbiw	r26, 0x07	; 7
    5a78:	08 95       	ret

00005a7a <__fpcmp_parts_f>:
    5a7a:	1f 93       	push	r17
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	fb 01       	movw	r30, r22
    5a80:	9c 91       	ld	r25, X
    5a82:	92 30       	cpi	r25, 0x02	; 2
    5a84:	08 f4       	brcc	.+2      	; 0x5a88 <__fpcmp_parts_f+0xe>
    5a86:	47 c0       	rjmp	.+142    	; 0x5b16 <__fpcmp_parts_f+0x9c>
    5a88:	80 81       	ld	r24, Z
    5a8a:	82 30       	cpi	r24, 0x02	; 2
    5a8c:	08 f4       	brcc	.+2      	; 0x5a90 <__fpcmp_parts_f+0x16>
    5a8e:	43 c0       	rjmp	.+134    	; 0x5b16 <__fpcmp_parts_f+0x9c>
    5a90:	94 30       	cpi	r25, 0x04	; 4
    5a92:	51 f4       	brne	.+20     	; 0x5aa8 <__fpcmp_parts_f+0x2e>
    5a94:	11 96       	adiw	r26, 0x01	; 1
    5a96:	1c 91       	ld	r17, X
    5a98:	84 30       	cpi	r24, 0x04	; 4
    5a9a:	99 f5       	brne	.+102    	; 0x5b02 <__fpcmp_parts_f+0x88>
    5a9c:	81 81       	ldd	r24, Z+1	; 0x01
    5a9e:	68 2f       	mov	r22, r24
    5aa0:	70 e0       	ldi	r23, 0x00	; 0
    5aa2:	61 1b       	sub	r22, r17
    5aa4:	71 09       	sbc	r23, r1
    5aa6:	3f c0       	rjmp	.+126    	; 0x5b26 <__fpcmp_parts_f+0xac>
    5aa8:	84 30       	cpi	r24, 0x04	; 4
    5aaa:	21 f0       	breq	.+8      	; 0x5ab4 <__fpcmp_parts_f+0x3a>
    5aac:	92 30       	cpi	r25, 0x02	; 2
    5aae:	31 f4       	brne	.+12     	; 0x5abc <__fpcmp_parts_f+0x42>
    5ab0:	82 30       	cpi	r24, 0x02	; 2
    5ab2:	b9 f1       	breq	.+110    	; 0x5b22 <__fpcmp_parts_f+0xa8>
    5ab4:	81 81       	ldd	r24, Z+1	; 0x01
    5ab6:	88 23       	and	r24, r24
    5ab8:	89 f1       	breq	.+98     	; 0x5b1c <__fpcmp_parts_f+0xa2>
    5aba:	2d c0       	rjmp	.+90     	; 0x5b16 <__fpcmp_parts_f+0x9c>
    5abc:	11 96       	adiw	r26, 0x01	; 1
    5abe:	1c 91       	ld	r17, X
    5ac0:	11 97       	sbiw	r26, 0x01	; 1
    5ac2:	82 30       	cpi	r24, 0x02	; 2
    5ac4:	f1 f0       	breq	.+60     	; 0x5b02 <__fpcmp_parts_f+0x88>
    5ac6:	81 81       	ldd	r24, Z+1	; 0x01
    5ac8:	18 17       	cp	r17, r24
    5aca:	d9 f4       	brne	.+54     	; 0x5b02 <__fpcmp_parts_f+0x88>
    5acc:	12 96       	adiw	r26, 0x02	; 2
    5ace:	2d 91       	ld	r18, X+
    5ad0:	3c 91       	ld	r19, X
    5ad2:	13 97       	sbiw	r26, 0x03	; 3
    5ad4:	82 81       	ldd	r24, Z+2	; 0x02
    5ad6:	93 81       	ldd	r25, Z+3	; 0x03
    5ad8:	82 17       	cp	r24, r18
    5ada:	93 07       	cpc	r25, r19
    5adc:	94 f0       	brlt	.+36     	; 0x5b02 <__fpcmp_parts_f+0x88>
    5ade:	28 17       	cp	r18, r24
    5ae0:	39 07       	cpc	r19, r25
    5ae2:	bc f0       	brlt	.+46     	; 0x5b12 <__fpcmp_parts_f+0x98>
    5ae4:	14 96       	adiw	r26, 0x04	; 4
    5ae6:	8d 91       	ld	r24, X+
    5ae8:	9d 91       	ld	r25, X+
    5aea:	0d 90       	ld	r0, X+
    5aec:	bc 91       	ld	r27, X
    5aee:	a0 2d       	mov	r26, r0
    5af0:	24 81       	ldd	r18, Z+4	; 0x04
    5af2:	35 81       	ldd	r19, Z+5	; 0x05
    5af4:	46 81       	ldd	r20, Z+6	; 0x06
    5af6:	57 81       	ldd	r21, Z+7	; 0x07
    5af8:	28 17       	cp	r18, r24
    5afa:	39 07       	cpc	r19, r25
    5afc:	4a 07       	cpc	r20, r26
    5afe:	5b 07       	cpc	r21, r27
    5b00:	18 f4       	brcc	.+6      	; 0x5b08 <__fpcmp_parts_f+0x8e>
    5b02:	11 23       	and	r17, r17
    5b04:	41 f0       	breq	.+16     	; 0x5b16 <__fpcmp_parts_f+0x9c>
    5b06:	0a c0       	rjmp	.+20     	; 0x5b1c <__fpcmp_parts_f+0xa2>
    5b08:	82 17       	cp	r24, r18
    5b0a:	93 07       	cpc	r25, r19
    5b0c:	a4 07       	cpc	r26, r20
    5b0e:	b5 07       	cpc	r27, r21
    5b10:	40 f4       	brcc	.+16     	; 0x5b22 <__fpcmp_parts_f+0xa8>
    5b12:	11 23       	and	r17, r17
    5b14:	19 f0       	breq	.+6      	; 0x5b1c <__fpcmp_parts_f+0xa2>
    5b16:	61 e0       	ldi	r22, 0x01	; 1
    5b18:	70 e0       	ldi	r23, 0x00	; 0
    5b1a:	05 c0       	rjmp	.+10     	; 0x5b26 <__fpcmp_parts_f+0xac>
    5b1c:	6f ef       	ldi	r22, 0xFF	; 255
    5b1e:	7f ef       	ldi	r23, 0xFF	; 255
    5b20:	02 c0       	rjmp	.+4      	; 0x5b26 <__fpcmp_parts_f+0xac>
    5b22:	60 e0       	ldi	r22, 0x00	; 0
    5b24:	70 e0       	ldi	r23, 0x00	; 0
    5b26:	cb 01       	movw	r24, r22
    5b28:	1f 91       	pop	r17
    5b2a:	08 95       	ret

00005b2c <__mulsi3>:
    5b2c:	62 9f       	mul	r22, r18
    5b2e:	d0 01       	movw	r26, r0
    5b30:	73 9f       	mul	r23, r19
    5b32:	f0 01       	movw	r30, r0
    5b34:	82 9f       	mul	r24, r18
    5b36:	e0 0d       	add	r30, r0
    5b38:	f1 1d       	adc	r31, r1
    5b3a:	64 9f       	mul	r22, r20
    5b3c:	e0 0d       	add	r30, r0
    5b3e:	f1 1d       	adc	r31, r1
    5b40:	92 9f       	mul	r25, r18
    5b42:	f0 0d       	add	r31, r0
    5b44:	83 9f       	mul	r24, r19
    5b46:	f0 0d       	add	r31, r0
    5b48:	74 9f       	mul	r23, r20
    5b4a:	f0 0d       	add	r31, r0
    5b4c:	65 9f       	mul	r22, r21
    5b4e:	f0 0d       	add	r31, r0
    5b50:	99 27       	eor	r25, r25
    5b52:	72 9f       	mul	r23, r18
    5b54:	b0 0d       	add	r27, r0
    5b56:	e1 1d       	adc	r30, r1
    5b58:	f9 1f       	adc	r31, r25
    5b5a:	63 9f       	mul	r22, r19
    5b5c:	b0 0d       	add	r27, r0
    5b5e:	e1 1d       	adc	r30, r1
    5b60:	f9 1f       	adc	r31, r25
    5b62:	bd 01       	movw	r22, r26
    5b64:	cf 01       	movw	r24, r30
    5b66:	11 24       	eor	r1, r1
    5b68:	08 95       	ret

00005b6a <__udivmodhi4>:
    5b6a:	aa 1b       	sub	r26, r26
    5b6c:	bb 1b       	sub	r27, r27
    5b6e:	51 e1       	ldi	r21, 0x11	; 17
    5b70:	07 c0       	rjmp	.+14     	; 0x5b80 <__udivmodhi4_ep>

00005b72 <__udivmodhi4_loop>:
    5b72:	aa 1f       	adc	r26, r26
    5b74:	bb 1f       	adc	r27, r27
    5b76:	a6 17       	cp	r26, r22
    5b78:	b7 07       	cpc	r27, r23
    5b7a:	10 f0       	brcs	.+4      	; 0x5b80 <__udivmodhi4_ep>
    5b7c:	a6 1b       	sub	r26, r22
    5b7e:	b7 0b       	sbc	r27, r23

00005b80 <__udivmodhi4_ep>:
    5b80:	88 1f       	adc	r24, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	5a 95       	dec	r21
    5b86:	a9 f7       	brne	.-22     	; 0x5b72 <__udivmodhi4_loop>
    5b88:	80 95       	com	r24
    5b8a:	90 95       	com	r25
    5b8c:	bc 01       	movw	r22, r24
    5b8e:	cd 01       	movw	r24, r26
    5b90:	08 95       	ret

00005b92 <__divmodhi4>:
    5b92:	97 fb       	bst	r25, 7
    5b94:	09 2e       	mov	r0, r25
    5b96:	07 26       	eor	r0, r23
    5b98:	0a d0       	rcall	.+20     	; 0x5bae <__divmodhi4_neg1>
    5b9a:	77 fd       	sbrc	r23, 7
    5b9c:	04 d0       	rcall	.+8      	; 0x5ba6 <__divmodhi4_neg2>
    5b9e:	e5 df       	rcall	.-54     	; 0x5b6a <__udivmodhi4>
    5ba0:	06 d0       	rcall	.+12     	; 0x5bae <__divmodhi4_neg1>
    5ba2:	00 20       	and	r0, r0
    5ba4:	1a f4       	brpl	.+6      	; 0x5bac <__divmodhi4_exit>

00005ba6 <__divmodhi4_neg2>:
    5ba6:	70 95       	com	r23
    5ba8:	61 95       	neg	r22
    5baa:	7f 4f       	sbci	r23, 0xFF	; 255

00005bac <__divmodhi4_exit>:
    5bac:	08 95       	ret

00005bae <__divmodhi4_neg1>:
    5bae:	f6 f7       	brtc	.-4      	; 0x5bac <__divmodhi4_exit>
    5bb0:	90 95       	com	r25
    5bb2:	81 95       	neg	r24
    5bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb6:	08 95       	ret

00005bb8 <__udivmodsi4>:
    5bb8:	a1 e2       	ldi	r26, 0x21	; 33
    5bba:	1a 2e       	mov	r1, r26
    5bbc:	aa 1b       	sub	r26, r26
    5bbe:	bb 1b       	sub	r27, r27
    5bc0:	fd 01       	movw	r30, r26
    5bc2:	0d c0       	rjmp	.+26     	; 0x5bde <__udivmodsi4_ep>

00005bc4 <__udivmodsi4_loop>:
    5bc4:	aa 1f       	adc	r26, r26
    5bc6:	bb 1f       	adc	r27, r27
    5bc8:	ee 1f       	adc	r30, r30
    5bca:	ff 1f       	adc	r31, r31
    5bcc:	a2 17       	cp	r26, r18
    5bce:	b3 07       	cpc	r27, r19
    5bd0:	e4 07       	cpc	r30, r20
    5bd2:	f5 07       	cpc	r31, r21
    5bd4:	20 f0       	brcs	.+8      	; 0x5bde <__udivmodsi4_ep>
    5bd6:	a2 1b       	sub	r26, r18
    5bd8:	b3 0b       	sbc	r27, r19
    5bda:	e4 0b       	sbc	r30, r20
    5bdc:	f5 0b       	sbc	r31, r21

00005bde <__udivmodsi4_ep>:
    5bde:	66 1f       	adc	r22, r22
    5be0:	77 1f       	adc	r23, r23
    5be2:	88 1f       	adc	r24, r24
    5be4:	99 1f       	adc	r25, r25
    5be6:	1a 94       	dec	r1
    5be8:	69 f7       	brne	.-38     	; 0x5bc4 <__udivmodsi4_loop>
    5bea:	60 95       	com	r22
    5bec:	70 95       	com	r23
    5bee:	80 95       	com	r24
    5bf0:	90 95       	com	r25
    5bf2:	9b 01       	movw	r18, r22
    5bf4:	ac 01       	movw	r20, r24
    5bf6:	bd 01       	movw	r22, r26
    5bf8:	cf 01       	movw	r24, r30
    5bfa:	08 95       	ret

00005bfc <__divmodsi4>:
    5bfc:	97 fb       	bst	r25, 7
    5bfe:	09 2e       	mov	r0, r25
    5c00:	05 26       	eor	r0, r21
    5c02:	0e d0       	rcall	.+28     	; 0x5c20 <__divmodsi4_neg1>
    5c04:	57 fd       	sbrc	r21, 7
    5c06:	04 d0       	rcall	.+8      	; 0x5c10 <__divmodsi4_neg2>
    5c08:	d7 df       	rcall	.-82     	; 0x5bb8 <__udivmodsi4>
    5c0a:	0a d0       	rcall	.+20     	; 0x5c20 <__divmodsi4_neg1>
    5c0c:	00 1c       	adc	r0, r0
    5c0e:	38 f4       	brcc	.+14     	; 0x5c1e <__divmodsi4_exit>

00005c10 <__divmodsi4_neg2>:
    5c10:	50 95       	com	r21
    5c12:	40 95       	com	r20
    5c14:	30 95       	com	r19
    5c16:	21 95       	neg	r18
    5c18:	3f 4f       	sbci	r19, 0xFF	; 255
    5c1a:	4f 4f       	sbci	r20, 0xFF	; 255
    5c1c:	5f 4f       	sbci	r21, 0xFF	; 255

00005c1e <__divmodsi4_exit>:
    5c1e:	08 95       	ret

00005c20 <__divmodsi4_neg1>:
    5c20:	f6 f7       	brtc	.-4      	; 0x5c1e <__divmodsi4_exit>
    5c22:	90 95       	com	r25
    5c24:	80 95       	com	r24
    5c26:	70 95       	com	r23
    5c28:	61 95       	neg	r22
    5c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c30:	08 95       	ret

00005c32 <__prologue_saves__>:
    5c32:	2f 92       	push	r2
    5c34:	3f 92       	push	r3
    5c36:	4f 92       	push	r4
    5c38:	5f 92       	push	r5
    5c3a:	6f 92       	push	r6
    5c3c:	7f 92       	push	r7
    5c3e:	8f 92       	push	r8
    5c40:	9f 92       	push	r9
    5c42:	af 92       	push	r10
    5c44:	bf 92       	push	r11
    5c46:	cf 92       	push	r12
    5c48:	df 92       	push	r13
    5c4a:	ef 92       	push	r14
    5c4c:	ff 92       	push	r15
    5c4e:	0f 93       	push	r16
    5c50:	1f 93       	push	r17
    5c52:	cf 93       	push	r28
    5c54:	df 93       	push	r29
    5c56:	cd b7       	in	r28, 0x3d	; 61
    5c58:	de b7       	in	r29, 0x3e	; 62
    5c5a:	ca 1b       	sub	r28, r26
    5c5c:	db 0b       	sbc	r29, r27
    5c5e:	0f b6       	in	r0, 0x3f	; 63
    5c60:	f8 94       	cli
    5c62:	de bf       	out	0x3e, r29	; 62
    5c64:	0f be       	out	0x3f, r0	; 63
    5c66:	cd bf       	out	0x3d, r28	; 61
    5c68:	09 94       	ijmp

00005c6a <__epilogue_restores__>:
    5c6a:	2a 88       	ldd	r2, Y+18	; 0x12
    5c6c:	39 88       	ldd	r3, Y+17	; 0x11
    5c6e:	48 88       	ldd	r4, Y+16	; 0x10
    5c70:	5f 84       	ldd	r5, Y+15	; 0x0f
    5c72:	6e 84       	ldd	r6, Y+14	; 0x0e
    5c74:	7d 84       	ldd	r7, Y+13	; 0x0d
    5c76:	8c 84       	ldd	r8, Y+12	; 0x0c
    5c78:	9b 84       	ldd	r9, Y+11	; 0x0b
    5c7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    5c7c:	b9 84       	ldd	r11, Y+9	; 0x09
    5c7e:	c8 84       	ldd	r12, Y+8	; 0x08
    5c80:	df 80       	ldd	r13, Y+7	; 0x07
    5c82:	ee 80       	ldd	r14, Y+6	; 0x06
    5c84:	fd 80       	ldd	r15, Y+5	; 0x05
    5c86:	0c 81       	ldd	r16, Y+4	; 0x04
    5c88:	1b 81       	ldd	r17, Y+3	; 0x03
    5c8a:	aa 81       	ldd	r26, Y+2	; 0x02
    5c8c:	b9 81       	ldd	r27, Y+1	; 0x01
    5c8e:	ce 0f       	add	r28, r30
    5c90:	d1 1d       	adc	r29, r1
    5c92:	0f b6       	in	r0, 0x3f	; 63
    5c94:	f8 94       	cli
    5c96:	de bf       	out	0x3e, r29	; 62
    5c98:	0f be       	out	0x3f, r0	; 63
    5c9a:	cd bf       	out	0x3d, r28	; 61
    5c9c:	ed 01       	movw	r28, r26
    5c9e:	08 95       	ret

00005ca0 <_exit>:
    5ca0:	f8 94       	cli

00005ca2 <__stop_program>:
    5ca2:	ff cf       	rjmp	.-2      	; 0x5ca2 <__stop_program>
